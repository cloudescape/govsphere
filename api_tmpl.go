// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
package main

var headerTmpl = `
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// Generated by https://github.com/cloudescape/govsphere
// Do not manually edit it.
`

var importsTmpl = `
import (
	gowsdl "github.com/cloudescape/gowsdl/generator"
)
`

var moTmpl = doTmpl

var doTmpl = `
{{$comment := comment .Description}}
{{$type := makePublic .Name true}}
{{$namespace := .Namespace}}
{{if $comment}} {{$comment}} {{end}}
type {{$type}} struct {
	{{$extends := toGoType .Extends}}
	{{if ne $extends "*ManagedEntity"}}
		{{if ne $extends "*ExtensibleManagedObject"}}
			{{if eq $namespace "mo"}}*ManagedObject{{end}}
		{{end}}{{end}}{{lookUpNamespace $extends $namespace}}
	{{range .Properties}}
		{{$fieldComment := comment .Description}}
		{{$privileges := comment .RequiredPrivileges}}
		{{$fieldType := toGoType .Type}}
		{{if ne $namespace "mo"}}{{if $fieldComment}} {{$fieldComment}} {{end}}{{if $privileges}} {{$privileges}} {{end}}{{end}}
		{{if ne $namespace "mo"}}{{makePublic .Name true}}{{else}}{{replaceReservedWords .Name}}{{end}} {{lookUpNamespace $fieldType $namespace}}{{if eq $type "ManagedObjectReference"}}{{if eq .Name "type"}}` + "`" + `xml:"{{.Name}},attr"` + "`" + `{{else if eq .Name "value"}}` + "`" + `xml:",innerxml"` + "`" + `{{end}}{{else}}` + "`" + `xml:"{{.Name}},omitempty"` + "`" + `{{end}}
	{{end}}
}

{{if eq $namespace "mo"}}
	{{range .Properties}}
		{{$fieldComment := comment .Description}}
		{{$privileges := comment .RequiredPrivileges}}
		{{$fieldType := toGoType .Type}}
		{{$nullValue := toNullType $fieldType}}
		{{$getterName := genGetterName .Name $extends}}
		{{if $fieldComment}} {{$fieldComment}} {{end}}{{if $privileges}} {{$privileges}} {{end}}
		func (mo *{{$type}}) {{$getterName}}() ({{$fieldType}}, error) {
			p, err := mo.currentProperty("{{.Name}}")
			if err != nil {
				return {{$nullValue}}, err
			}

			{{if eq $fieldType "[]*ManagedEntity"}}
				refs := p.(*ArrayOfManagedObjectReference).Things
				return ToManagedEntities(refs), nil
			{{else if eq $fieldType "[]string"}}
				return p.(*ArrayOfString).Things, nil
			{{else if eq $fieldType "[]int32"}}
				return p.(*ArrayOfInt).Things, nil
			{{else if eq $fieldType "[]int8"}}
				return p.(*ArrayOfByte).Things, nil
			{{else if $fieldType}}
				if p != nil {
					return p.({{$fieldType}}), nil
				}
				return {{$nullValue}}, nil
			{{else}}
				return nil
			{{end}}
		}
	{{end}}
{{end}}


{{range .Methods}}
{{$mcomment := comment .Description}}
{{$returnType := toGoType .ReturnValue.Type}}
{{if $mcomment}} {{$mcomment}} {{end}}
func ({{$namespace}} *{{$type}}) {{makePublic .Name true}}(
{{range .Parameters}} {{if ne .Name "_this"}}{{$ptype := toGoType .Type}} {{replaceReservedWords .Name}} {{lookUpNamespace $ptype $namespace}}, {{end}}{{end}}
) ({{if $returnType}}{{lookUpNamespace $returnType $namespace}},{{end}} error) {

	{{$requestType := makePublic .Name true}}

	request := struct {
		XMLName	xml.Name ` + "`" + `xml:"{{$requestType}}"` + "`" + `
		{{range .Parameters}}{{$ptype := toGoType .Type}}{{if eq .Name "_this"}}This{{else}}{{makePublic .Name true}}{{end}} {{lookUpNamespace $ptype $namespace}} ` + "`" + `xml:"{{.Name}},omitempty"` + "`" + `
		{{end}}
	}{
		{{range .Parameters}}{{if eq .Name "_this"}}This{{else}}{{makePublic .Name true}}{{end}}:{{if eq .Name "_this"}}&ManagedObjectReference{Type: mo.ManagedObject.Type, Value:mo.ManagedObject.Value},{{else}}{{replaceReservedWords .Name}},{{end}}
		{{end}}
	}

	{{if $returnType}}
	response := struct {
		Returnval {{lookUpNamespace $returnType $namespace}} ` + "`" + `xml:"returnval"` + "`" + `
	}{}
	{{end}}

	if session == nil {
		panic("You need to create a vSphereSession first")
	}

	err := session.invoke(request, {{if $returnType}}&response{{else}}nil{{end}})
	if err != nil {
		{{if $returnType}}return {{toNullType $returnType}}, err{{else}}return err{{end}}
	}

	{{if $returnType}}
		return response.Returnval, nil
	{{else}}
		return nil
	{{end}}
}
{{end}}
`

var enumTmpl = `
{{$type := .Name}}
{{$comment := comment .Description}}
{{if $comment}} {{$comment}} {{end}}
type {{$type}} string
const (
	{{range .Constants}}
		{{$constComment := comment .Description}}
		{{if $constComment}} {{$constComment}} {{end}}
		{{makePublic .Name true}}_{{$type}} {{$type}} = "{{.Name}}"
	{{end}}
)
`

var faultTmpl = doTmpl

var registryTmpl = `
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// This is an auto-generated type registry map needed in order to convert
// anyType SOAP types to Go types in runtime, without using reflection.

type ArrayOfManagedObjectReference struct {
	Things []*ManagedObjectReference ` + "`xml:\"ManagedObjectReference\"`" + `
}

type ArrayOfString struct {
	Things []string ` + "`xml:\"string\"`" + `
}

type ArrayOfByte struct {
	Things []int8 ` + "`xml:\"byte\"`" + `
}

type ArrayOfInt struct {
	Things []int32 ` + "`xml:\"int\"`" + `
}

var registry map[string]func() interface{}
func init() {
	registry = map[string]func() interface{}{
		"ArrayOfManagedObjectReference": func() interface{} { return &ArrayOfManagedObjectReference{} },
		"ArrayOfString":                 func() interface{} { return &ArrayOfString{} },
		"ArrayOfByte":                   func() interface{} { return &ArrayOfByte{} },
		"ArrayOfInt":                    func() interface{} { return &ArrayOfInt{} },

		{{range .}}"{{.Name}}": func() interface{} { return &{{.Name}}{} },
		{{end}}
	}
}
`
