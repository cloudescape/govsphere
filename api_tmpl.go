package main

var headerTmpl = `
//Generated by https://github.com/c4milo/govsphere
//Do not modify
//Copyright (c) 2014, Cloudescape. All rights reserved.

`

var importsTmpl = `
import (
	gowsdl "github.com/c4milo/gowsdl/generator"
)
`

var moTmpl = doTmpl

var doTmpl = `
{{$comment := comment .Description}}
{{$type := makePublic .Name true}}
{{$namespace := .Namespace}}
{{if $comment}} {{$comment}} {{end}}
type {{$type}} struct {
	{{$extends := toGoType .Extends}}
	{{if ne $extends "*ManagedEntity"}}
		{{if ne $extends "*ExtensibleManagedObject"}}
			{{if eq $namespace "mo"}}*ManagedObject{{end}}
		{{end}}{{end}}{{lookUpNamespace $extends $namespace}}
	{{range .Properties}}
		{{$fieldComment := comment .Description}}
		{{$privileges := comment .RequiredPrivileges}}
		{{$fieldType := toGoType .Type}}
		{{if ne $namespace "mo"}}{{if $fieldComment}} {{$fieldComment}} {{end}}{{if $privileges}} {{$privileges}} {{end}}{{end}}
		{{if ne $namespace "mo"}}{{makePublic .Name true}}{{else}}{{replaceReservedWords .Name}}{{end}} {{lookUpNamespace $fieldType $namespace}}
	{{end}}
}

{{if eq $namespace "mo"}}
	{{range .Properties}}
		{{$fieldComment := comment .Description}}
		{{$privileges := comment .RequiredPrivileges}}
		{{$fieldType := toGoType .Type}}
		{{$nullValue := toNullType $fieldType}}
		{{$getterName := genGetterName .Name $extends}}
		{{if $fieldComment}} {{$fieldComment}} {{end}}{{if $privileges}} {{$privileges}} {{end}}
		func (mo *{{$type}}) {{$getterName}}() ({{$fieldType}}, error) {
			t, err := mo.currentProperty("{{.Name}}")
			if err != nil {
				return {{$nullValue}}, err
			}

			v, ok := t.({{$fieldType}})
			if !ok {
				return {{$nullValue}}, errors.New("Unable to make type assertion to: {{$fieldType}}")
			}
			return v, nil
		}
	{{end}}
{{end}}


{{range .Methods}}
{{$mcomment := comment .Description}}
{{$returnType := toGoType .ReturnValue.Type}}
{{if $mcomment}} {{$mcomment}} {{end}}
func ({{$namespace}} *{{$type}}) {{makePublic .Name true}}(
{{range .Parameters}} {{$ptype := toGoType .Type}} {{replaceReservedWords .Name}} {{lookUpNamespace $ptype $namespace}}, {{end}}
) ({{if $returnType}}{{lookUpNamespace $returnType $namespace}},{{end}} error) {
	{{if $returnType}}
		return {{toNullType $returnType}}, nil
	{{else}}
		return nil
	{{end}}
}
{{end}}
`

var enumTmpl = `
{{$type := .Name}}
{{$comment := comment .Description}}
{{if $comment}} {{$comment}} {{end}}
type {{$type}} string
const (
	{{range .Constants}}
		{{$constComment := comment .Description}}
		{{if $constComment}} {{$constComment}} {{end}}
		{{makePublic .Name true}}_{{$type}} {{$type}} = "{{.Name}}"
	{{end}}
)
`

var faultTmpl = doTmpl
