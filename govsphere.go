package govsphere

//Generated by https://github.com/c4milo/gowsdl
//Do not modify
//Copyright (c) 2014, Cloudescape. All rights reserved.
import (
	gowsdl "github.com/c4milo/gowsdl/generator"
	"time"
)

type AddAuthorizationRoleResponse struct {
	Returnval int32 `xml:"returnval,omitempty"`
}

type RemoveAuthorizationRoleResponse struct {
}

type UpdateAuthorizationRoleResponse struct {
}

type MergePermissionsResponse struct {
}

type RetrieveRolePermissionsResponse struct {
	Returnval []*Permission `xml:"returnval,omitempty"`
}

type RetrieveEntityPermissionsResponse struct {
	Returnval []*Permission `xml:"returnval,omitempty"`
}

type RetrieveAllPermissionsResponse struct {
	Returnval []*Permission `xml:"returnval,omitempty"`
}

type SetEntityPermissionsResponse struct {
}

type ResetEntityPermissionsResponse struct {
}

type RemoveEntityPermissionResponse struct {
}

type HasPrivilegeOnEntityResponse struct {
	Returnval []bool `xml:"returnval,omitempty"`
}

type HasPrivilegeOnEntitiesResponse struct {
	Returnval []*EntityPrivilege `xml:"returnval,omitempty"`
}

type ReconfigureCluster_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ApplyRecommendationResponse struct {
}

type CancelRecommendationResponse struct {
}

type RecommendHostsForVmResponse struct {
	Returnval []*ClusterHostRecommendation `xml:"returnval,omitempty"`
}

type AddHost_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type MoveInto_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type MoveHostInto_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RefreshRecommendationResponse struct {
}

type RetrieveDasAdvancedRuntimeInfoResponse struct {
	Returnval *ClusterDasAdvancedRuntimeInfo `xml:"returnval,omitempty"`
}

type ClusterEnterMaintenanceModeResponse struct {
	Returnval *ClusterEnterMaintenanceResult `xml:"returnval,omitempty"`
}

type ReconfigureComputeResource_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type AddCustomFieldDefResponse struct {
	Returnval *CustomFieldDef `xml:"returnval,omitempty"`
}

type RemoveCustomFieldDefResponse struct {
}

type RenameCustomFieldDefResponse struct {
}

type SetFieldResponse struct {
}

type DoesCustomizationSpecExistResponse struct {
	Returnval bool `xml:"returnval,omitempty"`
}

type GetCustomizationSpecResponse struct {
	Returnval *CustomizationSpecItem `xml:"returnval,omitempty"`
}

type CreateCustomizationSpecResponse struct {
}

type OverwriteCustomizationSpecResponse struct {
}

type DeleteCustomizationSpecResponse struct {
}

type DuplicateCustomizationSpecResponse struct {
}

type RenameCustomizationSpecResponse struct {
}

type CustomizationSpecItemToXmlResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type XmlToCustomizationSpecItemResponse struct {
	Returnval *CustomizationSpecItem `xml:"returnval,omitempty"`
}

type CheckCustomizationResourcesResponse struct {
}

type QueryConnectionInfoResponse struct {
	Returnval *HostConnectInfo `xml:"returnval,omitempty"`
}

type PowerOnMultiVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type queryDatacenterConfigOptionDescriptorResponse struct {
	Returnval []*VirtualMachineConfigOptionDescriptor `xml:"returnval,omitempty"`
}

type ReconfigureDatacenter_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RefreshDatastoreResponse struct {
}

type RefreshDatastoreStorageInfoResponse struct {
}

type UpdateVirtualMachineFiles_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RenameDatastoreResponse struct {
}

type DestroyDatastoreResponse struct {
}

type DatastoreEnterMaintenanceModeResponse struct {
	Returnval *StoragePlacementResult `xml:"returnval,omitempty"`
}

type DatastoreExitMaintenanceMode_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateDirectoryResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type DeleteDirectoryResponse struct {
}

type QueryDescriptionsResponse struct {
	Returnval []*DiagnosticManagerLogDescriptor `xml:"returnval,omitempty"`
}

type BrowseDiagnosticLogResponse struct {
	Returnval *DiagnosticManagerLogHeader `xml:"returnval,omitempty"`
}

type GenerateLogBundles_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type FetchDVPortKeysResponse struct {
	Returnval []string `xml:"returnval,omitempty"`
}

type FetchDVPortsResponse struct {
	Returnval []*DistributedVirtualPort `xml:"returnval,omitempty"`
}

type QueryUsedVlanIdInDvsResponse struct {
	Returnval []int32 `xml:"returnval,omitempty"`
}

type ReconfigureDvs_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type PerformDvsProductSpecOperation_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type MergeDvs_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type AddDVPortgroup_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type MoveDVPort_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UpdateDvsCapabilityResponse struct {
}

type ReconfigureDVPort_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RefreshDVPortStateResponse struct {
}

type RectifyDvsHost_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UpdateNetworkResourcePoolResponse struct {
}

type AddNetworkResourcePoolResponse struct {
}

type RemoveNetworkResourcePoolResponse struct {
}

type EnableNetworkResourceManagementResponse struct {
}

type DVSRollback_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateDVPortgroup_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UpdateDVSHealthCheckConfig_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type LookupDvPortGroupResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryConfigOptionDescriptorResponse struct {
	Returnval []*VirtualMachineConfigOptionDescriptor `xml:"returnval,omitempty"`
}

type QueryConfigOptionResponse struct {
	Returnval *VirtualMachineConfigOption `xml:"returnval,omitempty"`
}

type QueryConfigTargetResponse struct {
	Returnval *ConfigTarget `xml:"returnval,omitempty"`
}

type QueryTargetCapabilitiesResponse struct {
	Returnval *HostCapability `xml:"returnval,omitempty"`
}

type setCustomValueResponse struct {
}

type UnregisterExtensionResponse struct {
}

type FindExtensionResponse struct {
	Returnval *Extension `xml:"returnval,omitempty"`
}

type RegisterExtensionResponse struct {
}

type UpdateExtensionResponse struct {
}

type GetPublicKeyResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type SetPublicKeyResponse struct {
}

type SetExtensionCertificateResponse struct {
}

type QueryManagedByResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryExtensionIpAllocationUsageResponse struct {
	Returnval []*ExtensionManagerIpAllocationUsage `xml:"returnval,omitempty"`
}

type MoveDatastoreFile_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CopyDatastoreFile_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DeleteDatastoreFile_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type MakeDirectoryResponse struct {
}

type ChangeOwnerResponse struct {
}

type CreateFolderResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type MoveIntoFolder_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RegisterVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateClusterResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateClusterExResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type AddStandaloneHost_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateDatacenterResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UnregisterAndDestroy_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateDVS_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateStoragePodResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type SetCollectorPageSizeResponse struct {
}

type RewindCollectorResponse struct {
}

type ResetCollectorResponse struct {
}

type DestroyCollectorResponse struct {
}

type QueryTpmAttestationReportResponse struct {
	Returnval *HostTpmAttestationReport `xml:"returnval,omitempty"`
}

type QueryHostConnectionInfoResponse struct {
	Returnval *HostConnectInfo `xml:"returnval,omitempty"`
}

type UpdateSystemResourcesResponse struct {
}

type UpdateSystemSwapConfigurationResponse struct {
}

type ReconnectHost_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DisconnectHost_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type EnterMaintenanceMode_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ExitMaintenanceMode_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RebootHost_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ShutdownHost_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type PowerDownHostToStandBy_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type PowerUpHostFromStandBy_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryMemoryOverheadResponse struct {
	Returnval int64 `xml:"returnval,omitempty"`
}

type QueryMemoryOverheadExResponse struct {
	Returnval int64 `xml:"returnval,omitempty"`
}

type ReconfigureHostForDAS_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UpdateFlagsResponse struct {
}

type EnterLockdownModeResponse struct {
}

type ExitLockdownModeResponse struct {
}

type AcquireCimServicesTicketResponse struct {
	Returnval *HostServiceTicket `xml:"returnval,omitempty"`
}

type UpdateIpmiResponse struct {
}

type RetrieveHardwareUptimeResponse struct {
	Returnval int64 `xml:"returnval,omitempty"`
}

type HttpNfcLeaseGetManifestResponse struct {
	Returnval []*HttpNfcLeaseManifestEntry `xml:"returnval,omitempty"`
}

type HttpNfcLeaseCompleteResponse struct {
}

type HttpNfcLeaseAbortResponse struct {
}

type HttpNfcLeaseProgressResponse struct {
}

type QueryIpPoolsResponse struct {
	Returnval []*IpPool `xml:"returnval,omitempty"`
}

type CreateIpPoolResponse struct {
	Returnval int32 `xml:"returnval,omitempty"`
}

type UpdateIpPoolResponse struct {
}

type DestroyIpPoolResponse struct {
}

type AllocateIpv4AddressResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type AllocateIpv6AddressResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type ReleaseIpAllocationResponse struct {
}

type QueryIPAllocationsResponse struct {
	Returnval []*IpPoolManagerIpAllocation `xml:"returnval,omitempty"`
}

type UpdateAssignedLicenseResponse struct {
	Returnval *LicenseManagerLicenseInfo `xml:"returnval,omitempty"`
}

type RemoveAssignedLicenseResponse struct {
}

type QueryAssignedLicensesResponse struct {
	Returnval []*LicenseAssignmentManagerLicenseAssignment `xml:"returnval,omitempty"`
}

type QuerySupportedFeaturesResponse struct {
	Returnval []*LicenseFeatureInfo `xml:"returnval,omitempty"`
}

type QueryLicenseSourceAvailabilityResponse struct {
	Returnval []*LicenseAvailabilityInfo `xml:"returnval,omitempty"`
}

type QueryLicenseUsageResponse struct {
	Returnval *LicenseUsageInfo `xml:"returnval,omitempty"`
}

type SetLicenseEditionResponse struct {
}

type CheckLicenseFeatureResponse struct {
	Returnval bool `xml:"returnval,omitempty"`
}

type EnableFeatureResponse struct {
	Returnval bool `xml:"returnval,omitempty"`
}

type DisableFeatureResponse struct {
	Returnval bool `xml:"returnval,omitempty"`
}

type ConfigureLicenseSourceResponse struct {
}

type UpdateLicenseResponse struct {
	Returnval *LicenseManagerLicenseInfo `xml:"returnval,omitempty"`
}

type AddLicenseResponse struct {
	Returnval *LicenseManagerLicenseInfo `xml:"returnval,omitempty"`
}

type RemoveLicenseResponse struct {
}

type DecodeLicenseResponse struct {
	Returnval *LicenseManagerLicenseInfo `xml:"returnval,omitempty"`
}

type UpdateLicenseLabelResponse struct {
}

type RemoveLicenseLabelResponse struct {
}

type ReloadResponse struct {
}

type Rename_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type Destroy_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DestroyNetworkResponse struct {
}

type ValidateHostResponse struct {
	Returnval *OvfValidateHostResult `xml:"returnval,omitempty"`
}

type ParseDescriptorResponse struct {
	Returnval *OvfParseDescriptorResult `xml:"returnval,omitempty"`
}

type CreateImportSpecResponse struct {
	Returnval *OvfCreateImportSpecResult `xml:"returnval,omitempty"`
}

type CreateDescriptorResponse struct {
	Returnval *OvfCreateDescriptorResult `xml:"returnval,omitempty"`
}

type QueryPerfProviderSummaryResponse struct {
	Returnval *PerfProviderSummary `xml:"returnval,omitempty"`
}

type QueryAvailablePerfMetricResponse struct {
	Returnval []*PerfMetricId `xml:"returnval,omitempty"`
}

type QueryPerfCounterResponse struct {
	Returnval []*PerfCounterInfo `xml:"returnval,omitempty"`
}

type QueryPerfCounterByLevelResponse struct {
	Returnval []*PerfCounterInfo `xml:"returnval,omitempty"`
}

type QueryPerfResponse struct {
	Returnval []*PerfEntityMetricBase `xml:"returnval,omitempty"`
}

type QueryPerfCompositeResponse struct {
	Returnval *PerfCompositeMetric `xml:"returnval,omitempty"`
}

type CreatePerfIntervalResponse struct {
}

type RemovePerfIntervalResponse struct {
}

type UpdatePerfIntervalResponse struct {
}

type UpdateCounterLevelMappingResponse struct {
}

type ResetCounterLevelMappingResponse struct {
}

type EstimateDatabaseSizeResponse struct {
	Returnval *DatabaseSizeEstimate `xml:"returnval,omitempty"`
}

type UpdateConfigResponse struct {
}

type MoveIntoResourcePoolResponse struct {
}

type UpdateChildResourceConfigurationResponse struct {
}

type CreateResourcePoolResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DestroyChildrenResponse struct {
}

type CreateVAppResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateChildVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RegisterChildVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ImportVAppResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryResourceConfigOptionResponse struct {
	Returnval *ResourceConfigOption `xml:"returnval,omitempty"`
}

type RefreshRuntimeResponse struct {
}

type FindByUuidResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type FindByDatastorePathResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type FindByDnsNameResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type FindByIpResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type FindByInventoryPathResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type FindChildResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type FindAllByUuidResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type FindAllByDnsNameResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type FindAllByIpResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type CurrentTimeResponse struct {
	Returnval time.Time `xml:"returnval,omitempty"`
}

type RetrieveServiceContentResponse struct {
	Returnval *ServiceContent `xml:"returnval,omitempty"`
}

type ValidateMigrationResponse struct {
	Returnval []*Event `xml:"returnval,omitempty"`
}

type QueryVMotionCompatibilityResponse struct {
	Returnval []*HostVMotionCompatibility `xml:"returnval,omitempty"`
}

type RetrieveProductComponentsResponse struct {
	Returnval []*ProductComponentInfo `xml:"returnval,omitempty"`
}

type QueryServiceListResponse struct {
	Returnval []*ServiceManagerServiceInfo `xml:"returnval,omitempty"`
}

type UpdateServiceMessageResponse struct {
}

type LoginByTokenResponse struct {
	Returnval *UserSession `xml:"returnval,omitempty"`
}

type LoginResponse struct {
	Returnval *UserSession `xml:"returnval,omitempty"`
}

type LoginBySSPIResponse struct {
	Returnval *UserSession `xml:"returnval,omitempty"`
}

type LogoutResponse struct {
}

type AcquireLocalTicketResponse struct {
	Returnval *SessionManagerLocalTicket `xml:"returnval,omitempty"`
}

type AcquireGenericServiceTicketResponse struct {
	Returnval *SessionManagerGenericServiceTicket `xml:"returnval,omitempty"`
}

type TerminateSessionResponse struct {
}

type SetLocaleResponse struct {
}

type LoginExtensionBySubjectNameResponse struct {
	Returnval *UserSession `xml:"returnval,omitempty"`
}

type LoginExtensionByCertificateResponse struct {
	Returnval *UserSession `xml:"returnval,omitempty"`
}

type ImpersonateUserResponse struct {
	Returnval *UserSession `xml:"returnval,omitempty"`
}

type SessionIsActiveResponse struct {
	Returnval bool `xml:"returnval,omitempty"`
}

type AcquireCloneTicketResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type CloneSessionResponse struct {
	Returnval *UserSession `xml:"returnval,omitempty"`
}

type ExecuteSimpleCommandResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type ConfigureDatastoreIORM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryIORMConfigOptionResponse struct {
	Returnval *StorageIORMConfigOption `xml:"returnval,omitempty"`
}

type QueryDatastorePerformanceSummaryResponse struct {
	Returnval []*StoragePerformanceSummary `xml:"returnval,omitempty"`
}

type ApplyStorageDrsRecommendationToPod_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ApplyStorageDrsRecommendation_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CancelStorageDrsRecommendationResponse struct {
}

type RefreshStorageDrsRecommendationResponse struct {
}

type ConfigureStorageDrsForPod_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RecommendDatastoresResponse struct {
	Returnval *StoragePlacementResult `xml:"returnval,omitempty"`
}

type CancelTaskResponse struct {
}

type UpdateProgressResponse struct {
}

type SetTaskStateResponse struct {
}

type SetTaskDescriptionResponse struct {
}

type ReadNextTasksResponse struct {
	Returnval []*TaskInfo `xml:"returnval,omitempty"`
}

type ReadPreviousTasksResponse struct {
	Returnval []*TaskInfo `xml:"returnval,omitempty"`
}

type CreateCollectorForTasksResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateTaskResponse struct {
	Returnval *TaskInfo `xml:"returnval,omitempty"`
}

type RetrieveUserGroupsResponse struct {
	Returnval []*UserSearchResult `xml:"returnval,omitempty"`
}

type UpdateVAppConfigResponse struct {
}

type UpdateLinkedChildrenResponse struct {
}

type CloneVApp_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ExportVAppResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type PowerOnVApp_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type PowerOffVApp_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type SuspendVApp_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type unregisterVApp_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateVirtualDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DeleteVirtualDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type MoveVirtualDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CopyVirtualDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ExtendVirtualDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryVirtualDiskFragmentationResponse struct {
	Returnval int32 `xml:"returnval,omitempty"`
}

type DefragmentVirtualDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ShrinkVirtualDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type InflateVirtualDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type EagerZeroVirtualDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ZeroFillVirtualDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type SetVirtualDiskUuidResponse struct {
}

type QueryVirtualDiskUuidResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type QueryVirtualDiskGeometryResponse struct {
	Returnval *HostDiskDimensionsChs `xml:"returnval,omitempty"`
}

type RefreshStorageInfoResponse struct {
}

type CreateSnapshot_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RevertToCurrentSnapshot_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RemoveAllSnapshots_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ConsolidateVMDisks_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type EstimateStorageForConsolidateSnapshots_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ReconfigVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UpgradeVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ExtractOvfEnvironmentResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type PowerOnVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type PowerOffVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type SuspendVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ResetVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ShutdownGuestResponse struct {
}

type RebootGuestResponse struct {
}

type StandbyGuestResponse struct {
}

type AnswerVMResponse struct {
}

type CustomizeVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CheckCustomizationSpecResponse struct {
}

type MigrateVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RelocateVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CloneVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ExportVmResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type MarkAsTemplateResponse struct {
}

type MarkAsVirtualMachineResponse struct {
}

type UnregisterVMResponse struct {
}

type ResetGuestInformationResponse struct {
}

type MountToolsInstallerResponse struct {
}

type UnmountToolsInstallerResponse struct {
}

type UpgradeTools_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type AcquireMksTicketResponse struct {
	Returnval *VirtualMachineMksTicket `xml:"returnval,omitempty"`
}

type AcquireTicketResponse struct {
	Returnval *VirtualMachineTicket `xml:"returnval,omitempty"`
}

type SetScreenResolutionResponse struct {
}

type DefragmentAllDisksResponse struct {
}

type CreateSecondaryVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type TurnOffFaultToleranceForVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type MakePrimaryVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type TerminateFaultTolerantVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DisableSecondaryVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type EnableSecondaryVM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type SetDisplayTopologyResponse struct {
}

type StartRecording_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type StopRecording_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type StartReplaying_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type StopReplaying_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type PromoteDisks_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateScreenshot_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryChangedDiskAreasResponse struct {
	Returnval *DiskChangeInfo `xml:"returnval,omitempty"`
}

type QueryUnownedFilesResponse struct {
	Returnval []string `xml:"returnval,omitempty"`
}

type reloadVirtualMachineFromPath_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryFaultToleranceCompatibilityResponse struct {
	Returnval []*LocalizedMethodFault `xml:"returnval,omitempty"`
}

type TerminateVMResponse struct {
}

type RemoveAlarmResponse struct {
}

type ReconfigureAlarmResponse struct {
}

type CreateAlarmResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type GetAlarmResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type AreAlarmActionsEnabledResponse struct {
	Returnval bool `xml:"returnval,omitempty"`
}

type EnableAlarmActionsResponse struct {
}

type GetAlarmStateResponse struct {
	Returnval []*AlarmState `xml:"returnval,omitempty"`
}

type AcknowledgeAlarmResponse struct {
}

type ReconfigureDVPortgroup_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DVPortgroupRollback_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryAvailableDvsSpecResponse struct {
	Returnval []*DistributedVirtualSwitchProductSpec `xml:"returnval,omitempty"`
}

type QueryCompatibleHostForNewDvsResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryCompatibleHostForExistingDvsResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryDvsCompatibleHostSpecResponse struct {
	Returnval []*DistributedVirtualSwitchHostProductSpec `xml:"returnval,omitempty"`
}

type QueryDvsFeatureCapabilityResponse struct {
	Returnval *DVSFeatureCapability `xml:"returnval,omitempty"`
}

type QueryDvsByUuidResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryDvsConfigTargetResponse struct {
	Returnval *DVSManagerDvsConfigTarget `xml:"returnval,omitempty"`
}

type QueryDvsCheckCompatibilityResponse struct {
	Returnval []*DistributedVirtualSwitchManagerCompatibilityResult `xml:"returnval,omitempty"`
}

type RectifyDvsOnHost_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DVSManagerExportEntity_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DVSManagerImportEntity_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DVSManagerLookupDvPortGroupResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UpdateDVSLacpGroupConfig_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ReadNextEventsResponse struct {
	Returnval []*Event `xml:"returnval,omitempty"`
}

type ReadPreviousEventsResponse struct {
	Returnval []*Event `xml:"returnval,omitempty"`
}

type RetrieveArgumentDescriptionResponse struct {
	Returnval []*EventArgDesc `xml:"returnval,omitempty"`
}

type CreateCollectorForEventsResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type LogUserEventResponse struct {
}

type QueryEventsResponse struct {
	Returnval []*Event `xml:"returnval,omitempty"`
}

type PostEventResponse struct {
}

type JoinDomain_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type JoinDomainWithCAM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ImportCertificateForCAM_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type LeaveCurrentDomain_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ReconfigureAutostartResponse struct {
}

type AutoStartPowerOnResponse struct {
}

type AutoStartPowerOffResponse struct {
}

type QueryBootDevicesResponse struct {
	Returnval *HostBootDeviceInfo `xml:"returnval,omitempty"`
}

type UpdateBootDeviceResponse struct {
}

type ConfigureHostCache_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type EnableHyperThreadingResponse struct {
}

type DisableHyperThreadingResponse struct {
}

type SearchDatastore_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type SearchDatastoreSubFolders_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DeleteFileResponse struct {
}

type UpdateLocalSwapDatastoreResponse struct {
}

type QueryAvailableDisksForVmfsResponse struct {
	Returnval []*HostScsiDisk `xml:"returnval,omitempty"`
}

type QueryVmfsDatastoreCreateOptionsResponse struct {
	Returnval []*VmfsDatastoreOption `xml:"returnval,omitempty"`
}

type CreateVmfsDatastoreResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryVmfsDatastoreExtendOptionsResponse struct {
	Returnval []*VmfsDatastoreOption `xml:"returnval,omitempty"`
}

type QueryVmfsDatastoreExpandOptionsResponse struct {
	Returnval []*VmfsDatastoreOption `xml:"returnval,omitempty"`
}

type ExtendVmfsDatastoreResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ExpandVmfsDatastoreResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateNasDatastoreResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateLocalDatastoreResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RemoveDatastoreResponse struct {
}

type ConfigureDatastorePrincipalResponse struct {
}

type QueryUnresolvedVmfsVolumesResponse struct {
	Returnval []*HostUnresolvedVmfsVolume `xml:"returnval,omitempty"`
}

type ResignatureUnresolvedVmfsVolume_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UpdateDateTimeConfigResponse struct {
}

type QueryAvailableTimeZonesResponse struct {
	Returnval []*HostDateTimeSystemTimeZone `xml:"returnval,omitempty"`
}

type QueryDateTimeResponse struct {
	Returnval time.Time `xml:"returnval,omitempty"`
}

type UpdateDateTimeResponse struct {
}

type RefreshDateTimeSystemResponse struct {
}

type QueryAvailablePartitionResponse struct {
	Returnval []*HostDiagnosticPartition `xml:"returnval,omitempty"`
}

type SelectActivePartitionResponse struct {
}

type QueryPartitionCreateOptionsResponse struct {
	Returnval []*HostDiagnosticPartitionCreateOption `xml:"returnval,omitempty"`
}

type QueryPartitionCreateDescResponse struct {
	Returnval *HostDiagnosticPartitionCreateDescription `xml:"returnval,omitempty"`
}

type CreateDiagnosticPartitionResponse struct {
}

type EsxAgentHostManagerUpdateConfigResponse struct {
}

type UpdateDefaultPolicyResponse struct {
}

type EnableRulesetResponse struct {
}

type DisableRulesetResponse struct {
}

type UpdateRulesetResponse struct {
}

type RefreshFirewallResponse struct {
}

type ResetFirmwareToFactoryDefaultsResponse struct {
}

type BackupFirmwareConfigurationResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type QueryFirmwareConfigUploadURLResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type RestoreFirmwareConfigurationResponse struct {
}

type RefreshGraphicsManagerResponse struct {
}

type IsSharedGraphicsActiveResponse struct {
	Returnval bool `xml:"returnval,omitempty"`
}

type RefreshHealthStatusSystemResponse struct {
}

type ResetSystemHealthInfoResponse struct {
}

type HostImageConfigGetAcceptanceResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type HostImageConfigGetProfileResponse struct {
	Returnval *HostImageProfileSummary `xml:"returnval,omitempty"`
}

type UpdateHostImageAcceptanceLevelResponse struct {
}

type QueryVnicStatusResponse struct {
	Returnval *IscsiStatus `xml:"returnval,omitempty"`
}

type QueryPnicStatusResponse struct {
	Returnval *IscsiStatus `xml:"returnval,omitempty"`
}

type QueryBoundVnicsResponse struct {
	Returnval []*IscsiPortInfo `xml:"returnval,omitempty"`
}

type QueryCandidateNicsResponse struct {
	Returnval []*IscsiPortInfo `xml:"returnval,omitempty"`
}

type BindVnicResponse struct {
}

type UnbindVnicResponse struct {
}

type QueryMigrationDependenciesResponse struct {
	Returnval *IscsiMigrationDependency `xml:"returnval,omitempty"`
}

type QueryModulesResponse struct {
	Returnval []*KernelModuleInfo `xml:"returnval,omitempty"`
}

type UpdateModuleOptionStringResponse struct {
}

type QueryConfiguredModuleOptionStringResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type CreateUserResponse struct {
}

type UpdateUserResponse struct {
}

type CreateGroupResponse struct {
}

type RemoveUserResponse struct {
}

type RemoveGroupResponse struct {
}

type AssignUserToGroupResponse struct {
}

type UnassignUserFromGroupResponse struct {
}

type ReconfigureServiceConsoleReservationResponse struct {
}

type ReconfigureVirtualMachineReservationResponse struct {
}

type UpdateNetworkConfigResponse struct {
	Returnval *HostNetworkConfigResult `xml:"returnval,omitempty"`
}

type UpdateDnsConfigResponse struct {
}

type UpdateIpRouteConfigResponse struct {
}

type UpdateConsoleIpRouteConfigResponse struct {
}

type UpdateIpRouteTableConfigResponse struct {
}

type AddVirtualSwitchResponse struct {
}

type RemoveVirtualSwitchResponse struct {
}

type UpdateVirtualSwitchResponse struct {
}

type AddPortGroupResponse struct {
}

type RemovePortGroupResponse struct {
}

type UpdatePortGroupResponse struct {
}

type UpdatePhysicalNicLinkSpeedResponse struct {
}

type QueryNetworkHintResponse struct {
	Returnval []*PhysicalNicHintInfo `xml:"returnval,omitempty"`
}

type AddVirtualNicResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type RemoveVirtualNicResponse struct {
}

type UpdateVirtualNicResponse struct {
}

type AddServiceConsoleVirtualNicResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type RemoveServiceConsoleVirtualNicResponse struct {
}

type UpdateServiceConsoleVirtualNicResponse struct {
}

type RestartServiceConsoleVirtualNicResponse struct {
}

type RefreshNetworkSystemResponse struct {
}

type CheckHostPatch_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ScanHostPatch_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ScanHostPatchV2_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type StageHostPatch_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type InstallHostPatch_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type InstallHostPatchV2_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UninstallHostPatch_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryHostPatch_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RefreshResponse struct {
}

type UpdatePassthruConfigResponse struct {
}

type ConfigurePowerPolicyResponse struct {
}

type UpdateServicePolicyResponse struct {
}

type StartServiceResponse struct {
}

type StopServiceResponse struct {
}

type RestartServiceResponse struct {
}

type UninstallServiceResponse struct {
}

type RefreshServicesResponse struct {
}

type ReconfigureSnmpAgentResponse struct {
}

type SendTestNotificationResponse struct {
}

type RetrieveDiskPartitionInfoResponse struct {
	Returnval []*HostDiskPartitionInfo `xml:"returnval,omitempty"`
}

type ComputeDiskPartitionInfoResponse struct {
	Returnval *HostDiskPartitionInfo `xml:"returnval,omitempty"`
}

type ComputeDiskPartitionInfoForResizeResponse struct {
	Returnval *HostDiskPartitionInfo `xml:"returnval,omitempty"`
}

type UpdateDiskPartitionsResponse struct {
}

type FormatVmfsResponse struct {
	Returnval *HostVmfsVolume `xml:"returnval,omitempty"`
}

type MountVmfsVolumeResponse struct {
}

type UnmountVmfsVolumeResponse struct {
}

type DeleteVmfsVolumeStateResponse struct {
}

type RescanVmfsResponse struct {
}

type AttachVmfsExtentResponse struct {
}

type ExpandVmfsExtentResponse struct {
}

type UpgradeVmfsResponse struct {
}

type UpgradeVmLayoutResponse struct {
}

type QueryUnresolvedVmfsVolumeResponse struct {
	Returnval []*HostUnresolvedVmfsVolume `xml:"returnval,omitempty"`
}

type ResolveMultipleUnresolvedVmfsVolumesResponse struct {
	Returnval []*HostUnresolvedVmfsResolutionResult `xml:"returnval,omitempty"`
}

type ResolveMultipleUnresolvedVmfsVolumesEx_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UnmountForceMountedVmfsVolumeResponse struct {
}

type RescanHbaResponse struct {
}

type RescanAllHbaResponse struct {
}

type UpdateSoftwareInternetScsiEnabledResponse struct {
}

type UpdateInternetScsiDiscoveryPropertiesResponse struct {
}

type UpdateInternetScsiAuthenticationPropertiesResponse struct {
}

type UpdateInternetScsiDigestPropertiesResponse struct {
}

type UpdateInternetScsiAdvancedOptionsResponse struct {
}

type UpdateInternetScsiIPPropertiesResponse struct {
}

type UpdateInternetScsiNameResponse struct {
}

type UpdateInternetScsiAliasResponse struct {
}

type AddInternetScsiSendTargetsResponse struct {
}

type RemoveInternetScsiSendTargetsResponse struct {
}

type AddInternetScsiStaticTargetsResponse struct {
}

type RemoveInternetScsiStaticTargetsResponse struct {
}

type EnableMultipathPathResponse struct {
}

type DisableMultipathPathResponse struct {
}

type SetMultipathLunPolicyResponse struct {
}

type QueryPathSelectionPolicyOptionsResponse struct {
	Returnval []*HostPathSelectionPolicyOption `xml:"returnval,omitempty"`
}

type QueryStorageArrayTypePolicyOptionsResponse struct {
	Returnval []*HostStorageArrayTypePolicyOption `xml:"returnval,omitempty"`
}

type UpdateScsiLunDisplayNameResponse struct {
}

type DetachScsiLunResponse struct {
}

type DeleteScsiLunStateResponse struct {
}

type AttachScsiLunResponse struct {
}

type RefreshStorageSystemResponse struct {
}

type DiscoverFcoeHbasResponse struct {
}

type MarkForRemovalResponse struct {
}

type FormatVffsResponse struct {
	Returnval *HostVffsVolume `xml:"returnval,omitempty"`
}

type ExtendVffsResponse struct {
}

type DestroyVffsResponse struct {
}

type MountVffsVolumeResponse struct {
}

type UnmountVffsVolumeResponse struct {
}

type DeleteVffsVolumeStateResponse struct {
}

type RescanVffsResponse struct {
}

type QueryAvailableSsdsResponse struct {
	Returnval []*HostScsiDisk `xml:"returnval,omitempty"`
}

type ConfigureVFlashResourceEx_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type HostConfigureVFlashResourceResponse struct {
}

type HostRemoveVFlashResourceResponse struct {
}

type HostConfigVFlashCacheResponse struct {
}

type HostGetVFlashModuleDefaultConfigResponse struct {
	Returnval *VirtualDiskVFlashCacheConfigInfo `xml:"returnval,omitempty"`
}

type UpdateIpConfigResponse struct {
}

type SelectVnicResponse struct {
}

type DeselectVnicResponse struct {
}

type QueryNetConfigResponse struct {
	Returnval *VirtualNicManagerNetConfig `xml:"returnval,omitempty"`
}

type SelectVnicForNicTypeResponse struct {
}

type DeselectVnicForNicTypeResponse struct {
}

type QueryCmmdsResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type QueryPhysicalVsanDisksResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type QueryVsanObjectsResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type QueryObjectsOnPhysicalVsanDiskResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type QueryDisksForVsanResponse struct {
	Returnval []*VsanHostDiskResult `xml:"returnval,omitempty"`
}

type AddDisks_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type InitializeDisks_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RemoveDisk_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RemoveDiskMapping_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type UpdateVsan_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryHostStatusResponse struct {
	Returnval *VsanHostClusterStatus `xml:"returnval,omitempty"`
}

type QueryOptionsResponse struct {
	Returnval []*OptionValue `xml:"returnval,omitempty"`
}

type UpdateOptionsResponse struct {
}

type CheckCompliance_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryComplianceStatusResponse struct {
	Returnval []*ComplianceResult `xml:"returnval,omitempty"`
}

type ClearComplianceStatusResponse struct {
}

type QueryExpressionMetadataResponse struct {
	Returnval []*ProfileExpressionMetadata `xml:"returnval,omitempty"`
}

type RetrieveDescriptionResponse struct {
	Returnval *ProfileDescription `xml:"returnval,omitempty"`
}

type DestroyProfileResponse struct {
}

type AssociateProfileResponse struct {
}

type DissociateProfileResponse struct {
}

type CheckProfileCompliance_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ExportProfileResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type CreateProfileResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryPolicyMetadataResponse struct {
	Returnval []*ProfilePolicyMetadata `xml:"returnval,omitempty"`
}

type FindAssociatedProfileResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type UpdateClusterProfileResponse struct {
}

type UpdateReferenceHostResponse struct {
}

type UpdateHostProfileResponse struct {
}

type ExecuteHostProfileResponse struct {
	Returnval *ProfileExecuteResult `xml:"returnval,omitempty"`
}

type ApplyHostConfig_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type GenerateConfigTaskListResponse struct {
	Returnval *HostProfileManagerConfigTaskList `xml:"returnval,omitempty"`
}

type GenerateHostProfileTaskList_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryHostProfileMetadataResponse struct {
	Returnval []*ProfileMetadata `xml:"returnval,omitempty"`
}

type QueryProfileStructureResponse struct {
	Returnval *ProfileProfileStructure `xml:"returnval,omitempty"`
}

type CreateDefaultProfileResponse struct {
	Returnval *ApplyProfile `xml:"returnval,omitempty"`
}

type UpdateAnswerFile_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RetrieveAnswerFileResponse struct {
	Returnval *AnswerFile `xml:"returnval,omitempty"`
}

type RetrieveAnswerFileForProfileResponse struct {
	Returnval *AnswerFile `xml:"returnval,omitempty"`
}

type ExportAnswerFile_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CheckAnswerFileStatus_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryAnswerFileStatusResponse struct {
	Returnval []*AnswerFileStatusResult `xml:"returnval,omitempty"`
}

type RemoveScheduledTaskResponse struct {
}

type ReconfigureScheduledTaskResponse struct {
}

type RunScheduledTaskResponse struct {
}

type CreateScheduledTaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RetrieveEntityScheduledTaskResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateObjectScheduledTaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RetrieveObjectScheduledTaskResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type OpenInventoryViewFolderResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type CloseInventoryViewFolderResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type ModifyListViewResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type ResetListViewResponse struct {
	Returnval []*ManagedObjectReference `xml:"returnval,omitempty"`
}

type ResetListViewFromViewResponse struct {
}

type DestroyViewResponse struct {
}

type CreateInventoryViewResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateContainerViewResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateListViewResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CreateListViewFromViewResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RevertToSnapshot_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RemoveSnapshot_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RenameSnapshotResponse struct {
}

type ExportSnapshotResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CheckCompatibility_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type QueryVMotionCompatibilityEx_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CheckMigrate_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type CheckRelocate_TaskResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type ValidateCredentialsInGuestResponse struct {
}

type AcquireCredentialsInGuestResponse struct {
	Returnval *GuestAuthentication `xml:"returnval,omitempty"`
}

type ReleaseCredentialsInGuestResponse struct {
}

type MakeDirectoryInGuestResponse struct {
}

type DeleteFileInGuestResponse struct {
}

type DeleteDirectoryInGuestResponse struct {
}

type MoveDirectoryInGuestResponse struct {
}

type MoveFileInGuestResponse struct {
}

type CreateTemporaryFileInGuestResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type CreateTemporaryDirectoryInGuestResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type ListFilesInGuestResponse struct {
	Returnval *GuestListFileInfo `xml:"returnval,omitempty"`
}

type ChangeFileAttributesInGuestResponse struct {
}

type InitiateFileTransferFromGuestResponse struct {
	Returnval *FileTransferInformation `xml:"returnval,omitempty"`
}

type InitiateFileTransferToGuestResponse struct {
	Returnval string `xml:"returnval,omitempty"`
}

type StartProgramInGuestResponse struct {
	Returnval int64 `xml:"returnval,omitempty"`
}

type ListProcessesInGuestResponse struct {
	Returnval []*GuestProcessInfo `xml:"returnval,omitempty"`
}

type TerminateProcessInGuestResponse struct {
}

type ReadEnvironmentVariableInGuestResponse struct {
	Returnval []string `xml:"returnval,omitempty"`
}

type DestroyPropertyFilterResponse struct {
}

type CreateFilterResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type RetrievePropertiesResponse struct {
	Returnval []*ObjectContent `xml:"returnval,omitempty"`
}

type CheckForUpdatesResponse struct {
	Returnval *UpdateSet `xml:"returnval,omitempty"`
}

type WaitForUpdatesResponse struct {
	Returnval *UpdateSet `xml:"returnval,omitempty"`
}

type CancelWaitForUpdatesResponse struct {
}

type WaitForUpdatesExResponse struct {
	Returnval *UpdateSet `xml:"returnval,omitempty"`
}

type RetrievePropertiesExResponse struct {
	Returnval *RetrieveResult `xml:"returnval,omitempty"`
}

type ContinueRetrievePropertiesExResponse struct {
	Returnval *RetrieveResult `xml:"returnval,omitempty"`
}

type CancelRetrievePropertiesExResponse struct {
}

type CreatePropertyCollectorResponse struct {
	Returnval *ManagedObjectReference `xml:"returnval,omitempty"`
}

type DestroyPropertyCollectorResponse struct {
}

type DynamicArray struct {
	DynamicType string        `xml:"dynamicType,omitempty"`
	Val         []interface{} `xml:"val,omitempty"`
}

type DynamicData struct {
	DynamicType     string             `xml:"dynamicType,omitempty"`
	DynamicProperty []*DynamicProperty `xml:"dynamicProperty,omitempty"`
}

type DynamicProperty struct {
	Name string      `xml:"name,omitempty"`
	Val  interface{} `xml:"val,omitempty"`
}

type ArrayOfDynamicProperty struct {
	DynamicProperty []*DynamicProperty `xml:"DynamicProperty,omitempty"`
}

type KeyAnyValue struct {
	*DynamicData

	Key   string      `xml:"key,omitempty"`
	Value interface{} `xml:"value,omitempty"`
}

type ArrayOfKeyAnyValue struct {
	KeyAnyValue []*KeyAnyValue `xml:"KeyAnyValue,omitempty"`
}

type LocalizableMessage struct {
	*DynamicData

	Key     string         `xml:"key,omitempty"`
	Arg     []*KeyAnyValue `xml:"arg,omitempty"`
	Message string         `xml:"message,omitempty"`
}

type ArrayOfLocalizableMessage struct {
	LocalizableMessage []*LocalizableMessage `xml:"LocalizableMessage,omitempty"`
}

type LocalizedMethodFault struct {
	*DynamicData

	Fault            *MethodFault `xml:"fault,omitempty"`
	LocalizedMessage string       `xml:"localizedMessage,omitempty"`
}

type MethodFault struct {
	DynamicType     string                `xml:"dynamicType,omitempty"`
	DynamicProperty []*DynamicProperty    `xml:"dynamicProperty,omitempty"`
	FaultCause      *LocalizedMethodFault `xml:"faultCause,omitempty"`
	FaultMessage    []*LocalizableMessage `xml:"faultMessage,omitempty"`
}

type ArrayOfMethodFault struct {
	MethodFault []*MethodFault `xml:"MethodFault,omitempty"`
}

type RuntimeFault struct {
	*MethodFault
}

type HostCommunication struct {
	*RuntimeFault
}

type HostNotConnected struct {
	*HostCommunication
}

type HostNotReachable struct {
	*HostCommunication
}

type InvalidArgument struct {
	*RuntimeFault

	InvalidProperty string `xml:"invalidProperty,omitempty"`
}

type InvalidRequest struct {
	*RuntimeFault
}

type InvalidType struct {
	*InvalidRequest

	Argument string `xml:"argument,omitempty"`
}

type ManagedObjectNotFound struct {
	*RuntimeFault

	Obj *ManagedObjectReference `xml:"obj,omitempty"`
}

type MethodNotFound struct {
	*InvalidRequest

	Receiver *ManagedObjectReference `xml:"receiver,omitempty"`
	Method   string                  `xml:"method,omitempty"`
}

type NotEnoughLicenses struct {
	*RuntimeFault
}

type NotImplemented struct {
	*RuntimeFault
}

type NotSupported struct {
	*RuntimeFault
}

type RequestCanceled struct {
	*RuntimeFault
}

type SecurityError struct {
	*RuntimeFault
}

type SystemError struct {
	*RuntimeFault

	Reason string `xml:"reason,omitempty"`
}

type UnexpectedFault struct {
	*RuntimeFault

	FaultName string                `xml:"faultName,omitempty"`
	Fault     *LocalizedMethodFault `xml:"fault,omitempty"`
}

type ManagedObjectReference struct {
}

type ArrayOfString struct {
	String []string `xml:"string,omitempty"`
}

type ArrayOfAnyType struct {
	AnyType []interface{} `xml:"anyType,omitempty"`
}

type ArrayOfManagedObjectReference struct {
	ManagedObjectReference []*ManagedObjectReference `xml:"ManagedObjectReference,omitempty"`
}

type ArrayOfBoolean struct {
	Boolean []bool `xml:"boolean,omitempty"`
}

type ArrayOfByte struct {
	Byte []int8 `xml:"byte,omitempty"`
}

type ArrayOfDouble struct {
	Double []float64 `xml:"double,omitempty"`
}

type ArrayOfInt struct {
	Int []int32 `xml:"int,omitempty"`
}

type ArrayOfLong struct {
	Long []int64 `xml:"long,omitempty"`
}

type ArrayOfShort struct {
	Short []int16 `xml:"short,omitempty"`
}

type ObjectUpdateKind string

const (
	ObjectUpdateKind_Modify ObjectUpdateKind = "modify"
	ObjectUpdateKind_Enter  ObjectUpdateKind = "enter"
	ObjectUpdateKind_Leave  ObjectUpdateKind = "leave"
)

type PropertyChangeOp string

const (
	PropertyChangeOp_Add            PropertyChangeOp = "add"
	PropertyChangeOp_Remove         PropertyChangeOp = "remove"
	PropertyChangeOp_Assign         PropertyChangeOp = "assign"
	PropertyChangeOp_IndirectRemove PropertyChangeOp = "indirectRemove"
)

type InvalidCollectorVersion struct {
	*MethodFault
}

type InvalidProperty struct {
	*MethodFault

	Name string `xml:"name,omitempty"`
}

type PropertyFilterSpec struct {
	*DynamicData

	PropSet                       []*PropertySpec `xml:"propSet,omitempty"`
	ObjectSet                     []*ObjectSpec   `xml:"objectSet,omitempty"`
	ReportMissingObjectsInResults bool            `xml:"reportMissingObjectsInResults,omitempty"`
}

type ArrayOfPropertyFilterSpec struct {
	PropertyFilterSpec []*PropertyFilterSpec `xml:"PropertyFilterSpec,omitempty"`
}

type PropertySpec struct {
	*DynamicData

	Type_   string   `xml:"type,omitempty"`
	All     bool     `xml:"all,omitempty"`
	PathSet []string `xml:"pathSet,omitempty"`
}

type ArrayOfPropertySpec struct {
	PropertySpec []*PropertySpec `xml:"PropertySpec,omitempty"`
}

type ObjectSpec struct {
	*DynamicData

	Obj       *ManagedObjectReference `xml:"obj,omitempty"`
	Skip      bool                    `xml:"skip,omitempty"`
	SelectSet []*SelectionSpec        `xml:"selectSet,omitempty"`
}

type ArrayOfObjectSpec struct {
	ObjectSpec []*ObjectSpec `xml:"ObjectSpec,omitempty"`
}

type SelectionSpec struct {
	*DynamicData

	Name string `xml:"name,omitempty"`
}

type ArrayOfSelectionSpec struct {
	SelectionSpec []*SelectionSpec `xml:"SelectionSpec,omitempty"`
}

type TraversalSpec struct {
	*SelectionSpec

	Type_     string           `xml:"type,omitempty"`
	Path      string           `xml:"path,omitempty"`
	Skip      bool             `xml:"skip,omitempty"`
	SelectSet []*SelectionSpec `xml:"selectSet,omitempty"`
}

type ObjectContent struct {
	*DynamicData

	Obj        *ManagedObjectReference `xml:"obj,omitempty"`
	PropSet    []*DynamicProperty      `xml:"propSet,omitempty"`
	MissingSet []*MissingProperty      `xml:"missingSet,omitempty"`
}

type ArrayOfObjectContent struct {
	ObjectContent []*ObjectContent `xml:"ObjectContent,omitempty"`
}

type UpdateSet struct {
	*DynamicData

	Version   string                  `xml:"version,omitempty"`
	FilterSet []*PropertyFilterUpdate `xml:"filterSet,omitempty"`
	Truncated bool                    `xml:"truncated,omitempty"`
}

type PropertyFilterUpdate struct {
	*DynamicData

	Filter     *ManagedObjectReference `xml:"filter,omitempty"`
	ObjectSet  []*ObjectUpdate         `xml:"objectSet,omitempty"`
	MissingSet []*MissingObject        `xml:"missingSet,omitempty"`
}

type ArrayOfPropertyFilterUpdate struct {
	PropertyFilterUpdate []*PropertyFilterUpdate `xml:"PropertyFilterUpdate,omitempty"`
}

type ObjectUpdate struct {
	*DynamicData

	Kind       *ObjectUpdateKind       `xml:"kind,omitempty"`
	Obj        *ManagedObjectReference `xml:"obj,omitempty"`
	ChangeSet  []*PropertyChange       `xml:"changeSet,omitempty"`
	MissingSet []*MissingProperty      `xml:"missingSet,omitempty"`
}

type ArrayOfObjectUpdate struct {
	ObjectUpdate []*ObjectUpdate `xml:"ObjectUpdate,omitempty"`
}

type PropertyChange struct {
	*DynamicData

	Name string            `xml:"name,omitempty"`
	Op   *PropertyChangeOp `xml:"op,omitempty"`
	Val  interface{}       `xml:"val,omitempty"`
}

type ArrayOfPropertyChange struct {
	PropertyChange []*PropertyChange `xml:"PropertyChange,omitempty"`
}

type MissingProperty struct {
	*DynamicData

	Path  string                `xml:"path,omitempty"`
	Fault *LocalizedMethodFault `xml:"fault,omitempty"`
}

type ArrayOfMissingProperty struct {
	MissingProperty []*MissingProperty `xml:"MissingProperty,omitempty"`
}

type MissingObject struct {
	*DynamicData

	Obj   *ManagedObjectReference `xml:"obj,omitempty"`
	Fault *LocalizedMethodFault   `xml:"fault,omitempty"`
}

type ArrayOfMissingObject struct {
	MissingObject []*MissingObject `xml:"MissingObject,omitempty"`
}

type WaitOptions struct {
	*DynamicData

	MaxWaitSeconds   int32 `xml:"maxWaitSeconds,omitempty"`
	MaxObjectUpdates int32 `xml:"maxObjectUpdates,omitempty"`
}

type RetrieveOptions struct {
	*DynamicData

	MaxObjects int32 `xml:"maxObjects,omitempty"`
}

type RetrieveResult struct {
	*DynamicData

	Token   string           `xml:"token,omitempty"`
	Objects []*ObjectContent `xml:"objects,omitempty"`
}

type DestroyPropertyFilterRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateFilterRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	Spec           *PropertyFilterSpec     `xml:"spec,omitempty"`
	PartialUpdates bool                    `xml:"partialUpdates,omitempty"`
}

type RetrievePropertiesRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	SpecSet []*PropertyFilterSpec   `xml:"specSet,omitempty"`
}

type CheckForUpdatesRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Version string                  `xml:"version,omitempty"`
}

type WaitForUpdatesRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Version string                  `xml:"version,omitempty"`
}

type CancelWaitForUpdatesRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type WaitForUpdatesExRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Version string                  `xml:"version,omitempty"`
	Options *WaitOptions            `xml:"options,omitempty"`
}

type RetrievePropertiesExRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	SpecSet []*PropertyFilterSpec   `xml:"specSet,omitempty"`
	Options *RetrieveOptions        `xml:"options,omitempty"`
}

type ContinueRetrievePropertiesExRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Token string                  `xml:"token,omitempty"`
}

type CancelRetrievePropertiesExRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Token string                  `xml:"token,omitempty"`
}

type CreatePropertyCollectorRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type DestroyPropertyCollectorRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState string

const (
	ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState_Licensed   ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState = "licensed"
	ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState_Unlicensed ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState = "unlicensed"
	ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState_Unknown    ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState = "unknown"
)

type ConfigSpecOperation string

const (
	ConfigSpecOperation_Add    ConfigSpecOperation = "add"
	ConfigSpecOperation_Edit   ConfigSpecOperation = "edit"
	ConfigSpecOperation_Remove ConfigSpecOperation = "remove"
)

type DatastoreAccessible string

const (
	DatastoreAccessible_True  DatastoreAccessible = "True"
	DatastoreAccessible_False DatastoreAccessible = "False"
)

type DatastoreSummaryMaintenanceModeState string

const (
	DatastoreSummaryMaintenanceModeState_Normal              DatastoreSummaryMaintenanceModeState = "normal"
	DatastoreSummaryMaintenanceModeState_EnteringMaintenance DatastoreSummaryMaintenanceModeState = "enteringMaintenance"
	DatastoreSummaryMaintenanceModeState_InMaintenance       DatastoreSummaryMaintenanceModeState = "inMaintenance"
)

type DiagnosticManagerLogCreator string

const (
	DiagnosticManagerLogCreator_Vpxd      DiagnosticManagerLogCreator = "vpxd"
	DiagnosticManagerLogCreator_Vpxa      DiagnosticManagerLogCreator = "vpxa"
	DiagnosticManagerLogCreator_Hostd     DiagnosticManagerLogCreator = "hostd"
	DiagnosticManagerLogCreator_Serverd   DiagnosticManagerLogCreator = "serverd"
	DiagnosticManagerLogCreator_Install   DiagnosticManagerLogCreator = "install"
	DiagnosticManagerLogCreator_VpxClient DiagnosticManagerLogCreator = "vpxClient"
	DiagnosticManagerLogCreator_RecordLog DiagnosticManagerLogCreator = "recordLog"
)

type DiagnosticManagerLogFormat string

const (
	DiagnosticManagerLogFormat_Plain DiagnosticManagerLogFormat = "plain"
)

type DistributedVirtualSwitchProductSpecOperationType string

const (
	DistributedVirtualSwitchProductSpecOperationType_PreInstall             DistributedVirtualSwitchProductSpecOperationType = "preInstall"
	DistributedVirtualSwitchProductSpecOperationType_Upgrade                DistributedVirtualSwitchProductSpecOperationType = "upgrade"
	DistributedVirtualSwitchProductSpecOperationType_NotifyAvailableUpgrade DistributedVirtualSwitchProductSpecOperationType = "notifyAvailableUpgrade"
	DistributedVirtualSwitchProductSpecOperationType_ProceedWithUpgrade     DistributedVirtualSwitchProductSpecOperationType = "proceedWithUpgrade"
	DistributedVirtualSwitchProductSpecOperationType_UpdateBundleInfo       DistributedVirtualSwitchProductSpecOperationType = "updateBundleInfo"
)

type DistributedVirtualSwitchNicTeamingPolicyMode string

const (
	DistributedVirtualSwitchNicTeamingPolicyMode_Loadbalance_ip        DistributedVirtualSwitchNicTeamingPolicyMode = "loadbalance_ip"
	DistributedVirtualSwitchNicTeamingPolicyMode_Loadbalance_srcmac    DistributedVirtualSwitchNicTeamingPolicyMode = "loadbalance_srcmac"
	DistributedVirtualSwitchNicTeamingPolicyMode_Loadbalance_srcid     DistributedVirtualSwitchNicTeamingPolicyMode = "loadbalance_srcid"
	DistributedVirtualSwitchNicTeamingPolicyMode_Failover_explicit     DistributedVirtualSwitchNicTeamingPolicyMode = "failover_explicit"
	DistributedVirtualSwitchNicTeamingPolicyMode_Loadbalance_loadbased DistributedVirtualSwitchNicTeamingPolicyMode = "loadbalance_loadbased"
)

type DistributedVirtualSwitchHostInfrastructureTrafficClass string

const (
	DistributedVirtualSwitchHostInfrastructureTrafficClass_Management     DistributedVirtualSwitchHostInfrastructureTrafficClass = "management"
	DistributedVirtualSwitchHostInfrastructureTrafficClass_FaultTolerance DistributedVirtualSwitchHostInfrastructureTrafficClass = "faultTolerance"
	DistributedVirtualSwitchHostInfrastructureTrafficClass_Vmotion        DistributedVirtualSwitchHostInfrastructureTrafficClass = "vmotion"
	DistributedVirtualSwitchHostInfrastructureTrafficClass_VirtualMachine DistributedVirtualSwitchHostInfrastructureTrafficClass = "virtualMachine"
	DistributedVirtualSwitchHostInfrastructureTrafficClass_ISCSI          DistributedVirtualSwitchHostInfrastructureTrafficClass = "iSCSI"
	DistributedVirtualSwitchHostInfrastructureTrafficClass_Nfs            DistributedVirtualSwitchHostInfrastructureTrafficClass = "nfs"
	DistributedVirtualSwitchHostInfrastructureTrafficClass_Hbr            DistributedVirtualSwitchHostInfrastructureTrafficClass = "hbr"
	DistributedVirtualSwitchHostInfrastructureTrafficClass_Vsan           DistributedVirtualSwitchHostInfrastructureTrafficClass = "vsan"
)

type DrsInjectorWorkloadCorrelationState string

const (
	DrsInjectorWorkloadCorrelationState_Correlated   DrsInjectorWorkloadCorrelationState = "Correlated"
	DrsInjectorWorkloadCorrelationState_Uncorrelated DrsInjectorWorkloadCorrelationState = "Uncorrelated"
)

type ReplicationVmState string

const (
	ReplicationVmState_None    ReplicationVmState = "none"
	ReplicationVmState_Paused  ReplicationVmState = "paused"
	ReplicationVmState_Syncing ReplicationVmState = "syncing"
	ReplicationVmState_Idle    ReplicationVmState = "idle"
	ReplicationVmState_Active  ReplicationVmState = "active"
	ReplicationVmState_Error   ReplicationVmState = "error"
)

type HostSystemConnectionState string

const (
	HostSystemConnectionState_Connected     HostSystemConnectionState = "connected"
	HostSystemConnectionState_NotResponding HostSystemConnectionState = "notResponding"
	HostSystemConnectionState_Disconnected  HostSystemConnectionState = "disconnected"
)

type HostSystemPowerState string

const (
	HostSystemPowerState_PoweredOn  HostSystemPowerState = "poweredOn"
	HostSystemPowerState_PoweredOff HostSystemPowerState = "poweredOff"
	HostSystemPowerState_StandBy    HostSystemPowerState = "standBy"
	HostSystemPowerState_Unknown    HostSystemPowerState = "unknown"
)

type HostStandbyMode string

const (
	HostStandbyMode_Entering HostStandbyMode = "entering"
	HostStandbyMode_Exiting  HostStandbyMode = "exiting"
	HostStandbyMode_In       HostStandbyMode = "in"
	HostStandbyMode_None     HostStandbyMode = "none"
)

type HttpNfcLeaseState string

const (
	HttpNfcLeaseState_Initializing HttpNfcLeaseState = "initializing"
	HttpNfcLeaseState_Ready        HttpNfcLeaseState = "ready"
	HttpNfcLeaseState_Done         HttpNfcLeaseState = "done"
	HttpNfcLeaseState_Error        HttpNfcLeaseState = "error"
)

type LatencySensitivitySensitivityLevel string

const (
	LatencySensitivitySensitivityLevel_Low    LatencySensitivitySensitivityLevel = "low"
	LatencySensitivitySensitivityLevel_Normal LatencySensitivitySensitivityLevel = "normal"
	LatencySensitivitySensitivityLevel_Medium LatencySensitivitySensitivityLevel = "medium"
	LatencySensitivitySensitivityLevel_High   LatencySensitivitySensitivityLevel = "high"
	LatencySensitivitySensitivityLevel_Custom LatencySensitivitySensitivityLevel = "custom"
)

type LicenseManagerState string

const (
	LicenseManagerState_Initializing LicenseManagerState = "initializing"
	LicenseManagerState_Normal       LicenseManagerState = "normal"
	LicenseManagerState_Marginal     LicenseManagerState = "marginal"
	LicenseManagerState_Fault        LicenseManagerState = "fault"
)

type LicenseManagerLicenseKey string

const (
	LicenseManagerLicenseKey_EsxFull    LicenseManagerLicenseKey = "esxFull"
	LicenseManagerLicenseKey_EsxVmtn    LicenseManagerLicenseKey = "esxVmtn"
	LicenseManagerLicenseKey_EsxExpress LicenseManagerLicenseKey = "esxExpress"
	LicenseManagerLicenseKey_San        LicenseManagerLicenseKey = "san"
	LicenseManagerLicenseKey_Iscsi      LicenseManagerLicenseKey = "iscsi"
	LicenseManagerLicenseKey_Nas        LicenseManagerLicenseKey = "nas"
	LicenseManagerLicenseKey_Vsmp       LicenseManagerLicenseKey = "vsmp"
	LicenseManagerLicenseKey_Backup     LicenseManagerLicenseKey = "backup"
	LicenseManagerLicenseKey_Vc         LicenseManagerLicenseKey = "vc"
	LicenseManagerLicenseKey_VcExpress  LicenseManagerLicenseKey = "vcExpress"
	LicenseManagerLicenseKey_EsxHost    LicenseManagerLicenseKey = "esxHost"
	LicenseManagerLicenseKey_GsxHost    LicenseManagerLicenseKey = "gsxHost"
	LicenseManagerLicenseKey_ServerHost LicenseManagerLicenseKey = "serverHost"
	LicenseManagerLicenseKey_DrsPower   LicenseManagerLicenseKey = "drsPower"
	LicenseManagerLicenseKey_Vmotion    LicenseManagerLicenseKey = "vmotion"
	LicenseManagerLicenseKey_Drs        LicenseManagerLicenseKey = "drs"
	LicenseManagerLicenseKey_Das        LicenseManagerLicenseKey = "das"
)

type LicenseFeatureInfoUnit string

const (
	LicenseFeatureInfoUnit_Host       LicenseFeatureInfoUnit = "host"
	LicenseFeatureInfoUnit_CpuCore    LicenseFeatureInfoUnit = "cpuCore"
	LicenseFeatureInfoUnit_CpuPackage LicenseFeatureInfoUnit = "cpuPackage"
	LicenseFeatureInfoUnit_Server     LicenseFeatureInfoUnit = "server"
	LicenseFeatureInfoUnit_Vm         LicenseFeatureInfoUnit = "vm"
)

type LicenseFeatureInfoState string

const (
	LicenseFeatureInfoState_Enabled  LicenseFeatureInfoState = "enabled"
	LicenseFeatureInfoState_Disabled LicenseFeatureInfoState = "disabled"
	LicenseFeatureInfoState_Optional LicenseFeatureInfoState = "optional"
)

type LicenseFeatureInfoSourceRestriction string

const (
	LicenseFeatureInfoSourceRestriction_Unrestricted LicenseFeatureInfoSourceRestriction = "unrestricted"
	LicenseFeatureInfoSourceRestriction_Served       LicenseFeatureInfoSourceRestriction = "served"
	LicenseFeatureInfoSourceRestriction_File         LicenseFeatureInfoSourceRestriction = "file"
)

type LicenseReservationInfoState string

const (
	LicenseReservationInfoState_NotUsed       LicenseReservationInfoState = "notUsed"
	LicenseReservationInfoState_NoLicense     LicenseReservationInfoState = "noLicense"
	LicenseReservationInfoState_UnlicensedUse LicenseReservationInfoState = "unlicensedUse"
	LicenseReservationInfoState_Licensed      LicenseReservationInfoState = "licensed"
)

type HostLicensableResourceKey string

const (
	HostLicensableResourceKey_NumCpuPackages HostLicensableResourceKey = "numCpuPackages"
	HostLicensableResourceKey_NumCpuCores    HostLicensableResourceKey = "numCpuCores"
	HostLicensableResourceKey_MemorySize     HostLicensableResourceKey = "memorySize"
	HostLicensableResourceKey_MemoryForVms   HostLicensableResourceKey = "memoryForVms"
	HostLicensableResourceKey_NumVmsStarted  HostLicensableResourceKey = "numVmsStarted"
	HostLicensableResourceKey_NumVmsStarting HostLicensableResourceKey = "numVmsStarting"
)

type ManagedEntityStatus string

const (
	ManagedEntityStatus_Gray   ManagedEntityStatus = "gray"
	ManagedEntityStatus_Green  ManagedEntityStatus = "green"
	ManagedEntityStatus_Yellow ManagedEntityStatus = "yellow"
	ManagedEntityStatus_Red    ManagedEntityStatus = "red"
)

type OvfConsumerOstNodeType string

const (
	OvfConsumerOstNodeType_Envelope                OvfConsumerOstNodeType = "envelope"
	OvfConsumerOstNodeType_VirtualSystem           OvfConsumerOstNodeType = "virtualSystem"
	OvfConsumerOstNodeType_VirtualSystemCollection OvfConsumerOstNodeType = "virtualSystemCollection"
)

type OvfCreateImportSpecParamsDiskProvisioningType string

const (
	OvfCreateImportSpecParamsDiskProvisioningType_MonolithicSparse     OvfCreateImportSpecParamsDiskProvisioningType = "monolithicSparse"
	OvfCreateImportSpecParamsDiskProvisioningType_MonolithicFlat       OvfCreateImportSpecParamsDiskProvisioningType = "monolithicFlat"
	OvfCreateImportSpecParamsDiskProvisioningType_TwoGbMaxExtentSparse OvfCreateImportSpecParamsDiskProvisioningType = "twoGbMaxExtentSparse"
	OvfCreateImportSpecParamsDiskProvisioningType_TwoGbMaxExtentFlat   OvfCreateImportSpecParamsDiskProvisioningType = "twoGbMaxExtentFlat"
	OvfCreateImportSpecParamsDiskProvisioningType_Thin                 OvfCreateImportSpecParamsDiskProvisioningType = "thin"
	OvfCreateImportSpecParamsDiskProvisioningType_Thick                OvfCreateImportSpecParamsDiskProvisioningType = "thick"
	OvfCreateImportSpecParamsDiskProvisioningType_SeSparse             OvfCreateImportSpecParamsDiskProvisioningType = "seSparse"
	OvfCreateImportSpecParamsDiskProvisioningType_EagerZeroedThick     OvfCreateImportSpecParamsDiskProvisioningType = "eagerZeroedThick"
	OvfCreateImportSpecParamsDiskProvisioningType_Sparse               OvfCreateImportSpecParamsDiskProvisioningType = "sparse"
	OvfCreateImportSpecParamsDiskProvisioningType_Flat                 OvfCreateImportSpecParamsDiskProvisioningType = "flat"
)

type PerfFormat string

const (
	PerfFormat_Normal PerfFormat = "normal"
	PerfFormat_Csv    PerfFormat = "csv"
)

type PerfSummaryType string

const (
	PerfSummaryType_Average   PerfSummaryType = "average"
	PerfSummaryType_Maximum   PerfSummaryType = "maximum"
	PerfSummaryType_Minimum   PerfSummaryType = "minimum"
	PerfSummaryType_Latest    PerfSummaryType = "latest"
	PerfSummaryType_Summation PerfSummaryType = "summation"
	PerfSummaryType_None      PerfSummaryType = "none"
)

type PerfStatsType string

const (
	PerfStatsType_Absolute PerfStatsType = "absolute"
	PerfStatsType_Delta    PerfStatsType = "delta"
	PerfStatsType_Rate     PerfStatsType = "rate"
)

type PerformanceManagerUnit string

const (
	PerformanceManagerUnit_Percent            PerformanceManagerUnit = "percent"
	PerformanceManagerUnit_KiloBytes          PerformanceManagerUnit = "kiloBytes"
	PerformanceManagerUnit_MegaBytes          PerformanceManagerUnit = "megaBytes"
	PerformanceManagerUnit_MegaHertz          PerformanceManagerUnit = "megaHertz"
	PerformanceManagerUnit_Number             PerformanceManagerUnit = "number"
	PerformanceManagerUnit_Microsecond        PerformanceManagerUnit = "microsecond"
	PerformanceManagerUnit_Millisecond        PerformanceManagerUnit = "millisecond"
	PerformanceManagerUnit_Second             PerformanceManagerUnit = "second"
	PerformanceManagerUnit_KiloBytesPerSecond PerformanceManagerUnit = "kiloBytesPerSecond"
	PerformanceManagerUnit_MegaBytesPerSecond PerformanceManagerUnit = "megaBytesPerSecond"
	PerformanceManagerUnit_Watt               PerformanceManagerUnit = "watt"
	PerformanceManagerUnit_Joule              PerformanceManagerUnit = "joule"
)

type ValidateMigrationTestType string

const (
	ValidateMigrationTestType_SourceTests            ValidateMigrationTestType = "sourceTests"
	ValidateMigrationTestType_CompatibilityTests     ValidateMigrationTestType = "compatibilityTests"
	ValidateMigrationTestType_DiskAccessibilityTests ValidateMigrationTestType = "diskAccessibilityTests"
	ValidateMigrationTestType_ResourceTests          ValidateMigrationTestType = "resourceTests"
)

type VMotionCompatibilityType string

const (
	VMotionCompatibilityType_Cpu      VMotionCompatibilityType = "cpu"
	VMotionCompatibilityType_Software VMotionCompatibilityType = "software"
)

type SessionManagerHttpServiceRequestSpecMethod string

const (
	SessionManagerHttpServiceRequestSpecMethod_HttpOptions SessionManagerHttpServiceRequestSpecMethod = "httpOptions"
	SessionManagerHttpServiceRequestSpecMethod_HttpGet     SessionManagerHttpServiceRequestSpecMethod = "httpGet"
	SessionManagerHttpServiceRequestSpecMethod_HttpHead    SessionManagerHttpServiceRequestSpecMethod = "httpHead"
	SessionManagerHttpServiceRequestSpecMethod_HttpPost    SessionManagerHttpServiceRequestSpecMethod = "httpPost"
	SessionManagerHttpServiceRequestSpecMethod_HttpPut     SessionManagerHttpServiceRequestSpecMethod = "httpPut"
	SessionManagerHttpServiceRequestSpecMethod_HttpDelete  SessionManagerHttpServiceRequestSpecMethod = "httpDelete"
	SessionManagerHttpServiceRequestSpecMethod_HttpTrace   SessionManagerHttpServiceRequestSpecMethod = "httpTrace"
	SessionManagerHttpServiceRequestSpecMethod_HttpConnect SessionManagerHttpServiceRequestSpecMethod = "httpConnect"
)

type SharesLevel string

const (
	SharesLevel_Low    SharesLevel = "low"
	SharesLevel_Normal SharesLevel = "normal"
	SharesLevel_High   SharesLevel = "high"
	SharesLevel_Custom SharesLevel = "custom"
)

type SimpleCommandEncoding string

const (
	SimpleCommandEncoding_CSV    SimpleCommandEncoding = "CSV"
	SimpleCommandEncoding_HEX    SimpleCommandEncoding = "HEX"
	SimpleCommandEncoding_STRING SimpleCommandEncoding = "STRING"
)

type StorageIORMThresholdMode string

const (
	StorageIORMThresholdMode_Automatic StorageIORMThresholdMode = "automatic"
	StorageIORMThresholdMode_Manual    StorageIORMThresholdMode = "manual"
)

type TaskFilterSpecRecursionOption string

const (
	TaskFilterSpecRecursionOption_Self     TaskFilterSpecRecursionOption = "self"
	TaskFilterSpecRecursionOption_Children TaskFilterSpecRecursionOption = "children"
	TaskFilterSpecRecursionOption_All      TaskFilterSpecRecursionOption = "all"
)

type TaskFilterSpecTimeOption string

const (
	TaskFilterSpecTimeOption_QueuedTime    TaskFilterSpecTimeOption = "queuedTime"
	TaskFilterSpecTimeOption_StartedTime   TaskFilterSpecTimeOption = "startedTime"
	TaskFilterSpecTimeOption_CompletedTime TaskFilterSpecTimeOption = "completedTime"
)

type TaskInfoState string

const (
	TaskInfoState_Queued  TaskInfoState = "queued"
	TaskInfoState_Running TaskInfoState = "running"
	TaskInfoState_Success TaskInfoState = "success"
	TaskInfoState_Error   TaskInfoState = "error"
)

type VirtualAppVAppState string

const (
	VirtualAppVAppState_Started  VirtualAppVAppState = "started"
	VirtualAppVAppState_Stopped  VirtualAppVAppState = "stopped"
	VirtualAppVAppState_Starting VirtualAppVAppState = "starting"
	VirtualAppVAppState_Stopping VirtualAppVAppState = "stopping"
)

type VirtualDiskType string

const (
	VirtualDiskType_Preallocated     VirtualDiskType = "preallocated"
	VirtualDiskType_Thin             VirtualDiskType = "thin"
	VirtualDiskType_SeSparse         VirtualDiskType = "seSparse"
	VirtualDiskType_Rdm              VirtualDiskType = "rdm"
	VirtualDiskType_Rdmp             VirtualDiskType = "rdmp"
	VirtualDiskType_Raw              VirtualDiskType = "raw"
	VirtualDiskType_Delta            VirtualDiskType = "delta"
	VirtualDiskType_Sparse2Gb        VirtualDiskType = "sparse2Gb"
	VirtualDiskType_Thick2Gb         VirtualDiskType = "thick2Gb"
	VirtualDiskType_EagerZeroedThick VirtualDiskType = "eagerZeroedThick"
	VirtualDiskType_SparseMonolithic VirtualDiskType = "sparseMonolithic"
	VirtualDiskType_FlatMonolithic   VirtualDiskType = "flatMonolithic"
	VirtualDiskType_Thick            VirtualDiskType = "thick"
)

type VirtualDiskAdapterType string

const (
	VirtualDiskAdapterType_Ide      VirtualDiskAdapterType = "ide"
	VirtualDiskAdapterType_BusLogic VirtualDiskAdapterType = "busLogic"
	VirtualDiskAdapterType_LsiLogic VirtualDiskAdapterType = "lsiLogic"
)

type VirtualMachinePowerState string

const (
	VirtualMachinePowerState_PoweredOff VirtualMachinePowerState = "poweredOff"
	VirtualMachinePowerState_PoweredOn  VirtualMachinePowerState = "poweredOn"
	VirtualMachinePowerState_Suspended  VirtualMachinePowerState = "suspended"
)

type VirtualMachineAppHeartbeatStatusType string

const (
	VirtualMachineAppHeartbeatStatusType_AppStatusGray  VirtualMachineAppHeartbeatStatusType = "appStatusGray"
	VirtualMachineAppHeartbeatStatusType_AppStatusGreen VirtualMachineAppHeartbeatStatusType = "appStatusGreen"
	VirtualMachineAppHeartbeatStatusType_AppStatusRed   VirtualMachineAppHeartbeatStatusType = "appStatusRed"
)

type VirtualMachineConnectionState string

const (
	VirtualMachineConnectionState_Connected    VirtualMachineConnectionState = "connected"
	VirtualMachineConnectionState_Disconnected VirtualMachineConnectionState = "disconnected"
	VirtualMachineConnectionState_Orphaned     VirtualMachineConnectionState = "orphaned"
	VirtualMachineConnectionState_Inaccessible VirtualMachineConnectionState = "inaccessible"
	VirtualMachineConnectionState_Invalid      VirtualMachineConnectionState = "invalid"
)

type VirtualMachineMovePriority string

const (
	VirtualMachineMovePriority_LowPriority     VirtualMachineMovePriority = "lowPriority"
	VirtualMachineMovePriority_HighPriority    VirtualMachineMovePriority = "highPriority"
	VirtualMachineMovePriority_DefaultPriority VirtualMachineMovePriority = "defaultPriority"
)

type VirtualMachineFaultToleranceState string

const (
	VirtualMachineFaultToleranceState_NotConfigured VirtualMachineFaultToleranceState = "notConfigured"
	VirtualMachineFaultToleranceState_Disabled      VirtualMachineFaultToleranceState = "disabled"
	VirtualMachineFaultToleranceState_Enabled       VirtualMachineFaultToleranceState = "enabled"
	VirtualMachineFaultToleranceState_NeedSecondary VirtualMachineFaultToleranceState = "needSecondary"
	VirtualMachineFaultToleranceState_Starting      VirtualMachineFaultToleranceState = "starting"
	VirtualMachineFaultToleranceState_Running       VirtualMachineFaultToleranceState = "running"
)

type VirtualMachineRecordReplayState string

const (
	VirtualMachineRecordReplayState_Recording VirtualMachineRecordReplayState = "recording"
	VirtualMachineRecordReplayState_Replaying VirtualMachineRecordReplayState = "replaying"
	VirtualMachineRecordReplayState_Inactive  VirtualMachineRecordReplayState = "inactive"
)

type VirtualMachineNeedSecondaryReason string

const (
	VirtualMachineNeedSecondaryReason_Initializing           VirtualMachineNeedSecondaryReason = "initializing"
	VirtualMachineNeedSecondaryReason_Divergence             VirtualMachineNeedSecondaryReason = "divergence"
	VirtualMachineNeedSecondaryReason_LostConnection         VirtualMachineNeedSecondaryReason = "lostConnection"
	VirtualMachineNeedSecondaryReason_PartialHardwareFailure VirtualMachineNeedSecondaryReason = "partialHardwareFailure"
	VirtualMachineNeedSecondaryReason_UserAction             VirtualMachineNeedSecondaryReason = "userAction"
	VirtualMachineNeedSecondaryReason_Other                  VirtualMachineNeedSecondaryReason = "other"
)

type VirtualMachineTicketType string

const (
	VirtualMachineTicketType_Mks          VirtualMachineTicketType = "mks"
	VirtualMachineTicketType_Device       VirtualMachineTicketType = "device"
	VirtualMachineTicketType_GuestControl VirtualMachineTicketType = "guestControl"
)

type ActionParameter string

const (
	ActionParameter_TargetName        ActionParameter = "targetName"
	ActionParameter_AlarmName         ActionParameter = "alarmName"
	ActionParameter_OldStatus         ActionParameter = "oldStatus"
	ActionParameter_NewStatus         ActionParameter = "newStatus"
	ActionParameter_TriggeringSummary ActionParameter = "triggeringSummary"
	ActionParameter_DeclaringSummary  ActionParameter = "declaringSummary"
	ActionParameter_EventDescription  ActionParameter = "eventDescription"
	ActionParameter_Target            ActionParameter = "target"
	ActionParameter_Alarm             ActionParameter = "alarm"
)

type StateAlarmOperator string

const (
	StateAlarmOperator_IsEqual   StateAlarmOperator = "isEqual"
	StateAlarmOperator_IsUnequal StateAlarmOperator = "isUnequal"
)

type EventAlarmExpressionComparisonOperator string

const (
	EventAlarmExpressionComparisonOperator_Equals           EventAlarmExpressionComparisonOperator = "equals"
	EventAlarmExpressionComparisonOperator_NotEqualTo       EventAlarmExpressionComparisonOperator = "notEqualTo"
	EventAlarmExpressionComparisonOperator_StartsWith       EventAlarmExpressionComparisonOperator = "startsWith"
	EventAlarmExpressionComparisonOperator_DoesNotStartWith EventAlarmExpressionComparisonOperator = "doesNotStartWith"
	EventAlarmExpressionComparisonOperator_EndsWith         EventAlarmExpressionComparisonOperator = "endsWith"
	EventAlarmExpressionComparisonOperator_DoesNotEndWith   EventAlarmExpressionComparisonOperator = "doesNotEndWith"
)

type MetricAlarmOperator string

const (
	MetricAlarmOperator_IsAbove MetricAlarmOperator = "isAbove"
	MetricAlarmOperator_IsBelow MetricAlarmOperator = "isBelow"
)

type ActionType string

const (
	ActionType_MigrationV1        ActionType = "MigrationV1"
	ActionType_VmPowerV1          ActionType = "VmPowerV1"
	ActionType_HostPowerV1        ActionType = "HostPowerV1"
	ActionType_HostMaintenanceV1  ActionType = "HostMaintenanceV1"
	ActionType_StorageMigrationV1 ActionType = "StorageMigrationV1"
	ActionType_StoragePlacementV1 ActionType = "StoragePlacementV1"
)

type DrsBehavior string

const (
	DrsBehavior_Manual             DrsBehavior = "manual"
	DrsBehavior_PartiallyAutomated DrsBehavior = "partiallyAutomated"
	DrsBehavior_FullyAutomated     DrsBehavior = "fullyAutomated"
)

type DpmBehavior string

const (
	DpmBehavior_Manual    DpmBehavior = "manual"
	DpmBehavior_Automated DpmBehavior = "automated"
)

type ClusterDasAamNodeStateDasState string

const (
	ClusterDasAamNodeStateDasState_Uninitialized ClusterDasAamNodeStateDasState = "uninitialized"
	ClusterDasAamNodeStateDasState_Initialized   ClusterDasAamNodeStateDasState = "initialized"
	ClusterDasAamNodeStateDasState_Configuring   ClusterDasAamNodeStateDasState = "configuring"
	ClusterDasAamNodeStateDasState_Unconfiguring ClusterDasAamNodeStateDasState = "unconfiguring"
	ClusterDasAamNodeStateDasState_Running       ClusterDasAamNodeStateDasState = "running"
	ClusterDasAamNodeStateDasState_Error         ClusterDasAamNodeStateDasState = "error"
	ClusterDasAamNodeStateDasState_AgentShutdown ClusterDasAamNodeStateDasState = "agentShutdown"
	ClusterDasAamNodeStateDasState_NodeFailed    ClusterDasAamNodeStateDasState = "nodeFailed"
)

type ClusterDasConfigInfoServiceState string

const (
	ClusterDasConfigInfoServiceState_Disabled ClusterDasConfigInfoServiceState = "disabled"
	ClusterDasConfigInfoServiceState_Enabled  ClusterDasConfigInfoServiceState = "enabled"
)

type ClusterDasConfigInfoVmMonitoringState string

const (
	ClusterDasConfigInfoVmMonitoringState_VmMonitoringDisabled ClusterDasConfigInfoVmMonitoringState = "vmMonitoringDisabled"
	ClusterDasConfigInfoVmMonitoringState_VmMonitoringOnly     ClusterDasConfigInfoVmMonitoringState = "vmMonitoringOnly"
	ClusterDasConfigInfoVmMonitoringState_VmAndAppMonitoring   ClusterDasConfigInfoVmMonitoringState = "vmAndAppMonitoring"
)

type ClusterDasConfigInfoHBDatastoreCandidate string

const (
	ClusterDasConfigInfoHBDatastoreCandidate_UserSelectedDs                  ClusterDasConfigInfoHBDatastoreCandidate = "userSelectedDs"
	ClusterDasConfigInfoHBDatastoreCandidate_AllFeasibleDs                   ClusterDasConfigInfoHBDatastoreCandidate = "allFeasibleDs"
	ClusterDasConfigInfoHBDatastoreCandidate_AllFeasibleDsWithUserPreference ClusterDasConfigInfoHBDatastoreCandidate = "allFeasibleDsWithUserPreference"
)

type ClusterDasFdmAvailabilityState string

const (
	ClusterDasFdmAvailabilityState_Uninitialized                ClusterDasFdmAvailabilityState = "uninitialized"
	ClusterDasFdmAvailabilityState_Election                     ClusterDasFdmAvailabilityState = "election"
	ClusterDasFdmAvailabilityState_Master                       ClusterDasFdmAvailabilityState = "master"
	ClusterDasFdmAvailabilityState_ConnectedToMaster            ClusterDasFdmAvailabilityState = "connectedToMaster"
	ClusterDasFdmAvailabilityState_NetworkPartitionedFromMaster ClusterDasFdmAvailabilityState = "networkPartitionedFromMaster"
	ClusterDasFdmAvailabilityState_NetworkIsolated              ClusterDasFdmAvailabilityState = "networkIsolated"
	ClusterDasFdmAvailabilityState_HostDown                     ClusterDasFdmAvailabilityState = "hostDown"
	ClusterDasFdmAvailabilityState_InitializationError          ClusterDasFdmAvailabilityState = "initializationError"
	ClusterDasFdmAvailabilityState_UninitializationError        ClusterDasFdmAvailabilityState = "uninitializationError"
	ClusterDasFdmAvailabilityState_FdmUnreachable               ClusterDasFdmAvailabilityState = "fdmUnreachable"
)

type DasVmPriority string

const (
	DasVmPriority_Disabled DasVmPriority = "disabled"
	DasVmPriority_Low      DasVmPriority = "low"
	DasVmPriority_Medium   DasVmPriority = "medium"
	DasVmPriority_High     DasVmPriority = "high"
)

type ClusterDasVmSettingsRestartPriority string

const (
	ClusterDasVmSettingsRestartPriority_Disabled               ClusterDasVmSettingsRestartPriority = "disabled"
	ClusterDasVmSettingsRestartPriority_Low                    ClusterDasVmSettingsRestartPriority = "low"
	ClusterDasVmSettingsRestartPriority_Medium                 ClusterDasVmSettingsRestartPriority = "medium"
	ClusterDasVmSettingsRestartPriority_High                   ClusterDasVmSettingsRestartPriority = "high"
	ClusterDasVmSettingsRestartPriority_ClusterRestartPriority ClusterDasVmSettingsRestartPriority = "clusterRestartPriority"
)

type ClusterDasVmSettingsIsolationResponse string

const (
	ClusterDasVmSettingsIsolationResponse_None                     ClusterDasVmSettingsIsolationResponse = "none"
	ClusterDasVmSettingsIsolationResponse_PowerOff                 ClusterDasVmSettingsIsolationResponse = "powerOff"
	ClusterDasVmSettingsIsolationResponse_Shutdown                 ClusterDasVmSettingsIsolationResponse = "shutdown"
	ClusterDasVmSettingsIsolationResponse_ClusterIsolationResponse ClusterDasVmSettingsIsolationResponse = "clusterIsolationResponse"
)

type DrsRecommendationReasonCode string

const (
	DrsRecommendationReasonCode_FairnessCpuAvg DrsRecommendationReasonCode = "fairnessCpuAvg"
	DrsRecommendationReasonCode_FairnessMemAvg DrsRecommendationReasonCode = "fairnessMemAvg"
	DrsRecommendationReasonCode_JointAffin     DrsRecommendationReasonCode = "jointAffin"
	DrsRecommendationReasonCode_AntiAffin      DrsRecommendationReasonCode = "antiAffin"
	DrsRecommendationReasonCode_HostMaint      DrsRecommendationReasonCode = "hostMaint"
)

type HostPowerOperationType string

const (
	HostPowerOperationType_PowerOn  HostPowerOperationType = "powerOn"
	HostPowerOperationType_PowerOff HostPowerOperationType = "powerOff"
)

type ClusterPowerOnVmOption string

const (
	ClusterPowerOnVmOption_OverrideAutomationLevel ClusterPowerOnVmOption = "OverrideAutomationLevel"
	ClusterPowerOnVmOption_ReserveResources        ClusterPowerOnVmOption = "ReserveResources"
)

type RecommendationType string

const (
	RecommendationType_V1 RecommendationType = "V1"
)

type RecommendationReasonCode string

const (
	RecommendationReasonCode_FairnessCpuAvg             RecommendationReasonCode = "fairnessCpuAvg"
	RecommendationReasonCode_FairnessMemAvg             RecommendationReasonCode = "fairnessMemAvg"
	RecommendationReasonCode_JointAffin                 RecommendationReasonCode = "jointAffin"
	RecommendationReasonCode_AntiAffin                  RecommendationReasonCode = "antiAffin"
	RecommendationReasonCode_HostMaint                  RecommendationReasonCode = "hostMaint"
	RecommendationReasonCode_EnterStandby               RecommendationReasonCode = "enterStandby"
	RecommendationReasonCode_ReservationCpu             RecommendationReasonCode = "reservationCpu"
	RecommendationReasonCode_ReservationMem             RecommendationReasonCode = "reservationMem"
	RecommendationReasonCode_PowerOnVm                  RecommendationReasonCode = "powerOnVm"
	RecommendationReasonCode_PowerSaving                RecommendationReasonCode = "powerSaving"
	RecommendationReasonCode_IncreaseCapacity           RecommendationReasonCode = "increaseCapacity"
	RecommendationReasonCode_CheckResource              RecommendationReasonCode = "checkResource"
	RecommendationReasonCode_UnreservedCapacity         RecommendationReasonCode = "unreservedCapacity"
	RecommendationReasonCode_VmHostHardAffinity         RecommendationReasonCode = "vmHostHardAffinity"
	RecommendationReasonCode_VmHostSoftAffinity         RecommendationReasonCode = "vmHostSoftAffinity"
	RecommendationReasonCode_BalanceDatastoreSpaceUsage RecommendationReasonCode = "balanceDatastoreSpaceUsage"
	RecommendationReasonCode_BalanceDatastoreIOLoad     RecommendationReasonCode = "balanceDatastoreIOLoad"
	RecommendationReasonCode_DatastoreMaint             RecommendationReasonCode = "datastoreMaint"
	RecommendationReasonCode_VirtualDiskJointAffin      RecommendationReasonCode = "virtualDiskJointAffin"
	RecommendationReasonCode_VirtualDiskAntiAffin       RecommendationReasonCode = "virtualDiskAntiAffin"
	RecommendationReasonCode_DatastoreSpaceOutage       RecommendationReasonCode = "datastoreSpaceOutage"
	RecommendationReasonCode_StoragePlacement           RecommendationReasonCode = "storagePlacement"
	RecommendationReasonCode_IolbDisabledInternal       RecommendationReasonCode = "iolbDisabledInternal"
)

type DvsFilterOnFailure string

const (
	DvsFilterOnFailure_FailOpen   DvsFilterOnFailure = "failOpen"
	DvsFilterOnFailure_FailClosed DvsFilterOnFailure = "failClosed"
)

type DVPortStatusVmDirectPathGen2InactiveReasonNetwork string

const (
	DVPortStatusVmDirectPathGen2InactiveReasonNetwork_PortNptIncompatibleDvs             DVPortStatusVmDirectPathGen2InactiveReasonNetwork = "portNptIncompatibleDvs"
	DVPortStatusVmDirectPathGen2InactiveReasonNetwork_PortNptNoCompatibleNics            DVPortStatusVmDirectPathGen2InactiveReasonNetwork = "portNptNoCompatibleNics"
	DVPortStatusVmDirectPathGen2InactiveReasonNetwork_PortNptNoVirtualFunctionsAvailable DVPortStatusVmDirectPathGen2InactiveReasonNetwork = "portNptNoVirtualFunctionsAvailable"
	DVPortStatusVmDirectPathGen2InactiveReasonNetwork_PortNptDisabledForPort             DVPortStatusVmDirectPathGen2InactiveReasonNetwork = "portNptDisabledForPort"
)

type DVPortStatusVmDirectPathGen2InactiveReasonOther string

const (
	DVPortStatusVmDirectPathGen2InactiveReasonOther_PortNptIncompatibleHost      DVPortStatusVmDirectPathGen2InactiveReasonOther = "portNptIncompatibleHost"
	DVPortStatusVmDirectPathGen2InactiveReasonOther_PortNptIncompatibleConnectee DVPortStatusVmDirectPathGen2InactiveReasonOther = "portNptIncompatibleConnectee"
)

type DistributedVirtualPortgroupPortgroupType string

const (
	DistributedVirtualPortgroupPortgroupType_EarlyBinding DistributedVirtualPortgroupPortgroupType = "earlyBinding"
	DistributedVirtualPortgroupPortgroupType_LateBinding  DistributedVirtualPortgroupPortgroupType = "lateBinding"
	DistributedVirtualPortgroupPortgroupType_Ephemeral    DistributedVirtualPortgroupPortgroupType = "ephemeral"
)

type DistributedVirtualPortgroupMetaTagName string

const (
	DistributedVirtualPortgroupMetaTagName_DvsName       DistributedVirtualPortgroupMetaTagName = "dvsName"
	DistributedVirtualPortgroupMetaTagName_PortgroupName DistributedVirtualPortgroupMetaTagName = "portgroupName"
	DistributedVirtualPortgroupMetaTagName_PortIndex     DistributedVirtualPortgroupMetaTagName = "portIndex"
)

type EntityType string

const (
	EntityType_DistributedVirtualSwitch    EntityType = "distributedVirtualSwitch"
	EntityType_DistributedVirtualPortgroup EntityType = "distributedVirtualPortgroup"
)

type EntityImportType string

const (
	EntityImportType_CreateEntityWithNewIdentifier      EntityImportType = "createEntityWithNewIdentifier"
	EntityImportType_CreateEntityWithOriginalIdentifier EntityImportType = "createEntityWithOriginalIdentifier"
	EntityImportType_ApplyToEntitySpecified             EntityImportType = "applyToEntitySpecified"
)

type DistributedVirtualSwitchHostMemberHostComponentState string

const (
	DistributedVirtualSwitchHostMemberHostComponentState_Up           DistributedVirtualSwitchHostMemberHostComponentState = "up"
	DistributedVirtualSwitchHostMemberHostComponentState_Pending      DistributedVirtualSwitchHostMemberHostComponentState = "pending"
	DistributedVirtualSwitchHostMemberHostComponentState_OutOfSync    DistributedVirtualSwitchHostMemberHostComponentState = "outOfSync"
	DistributedVirtualSwitchHostMemberHostComponentState_Warning      DistributedVirtualSwitchHostMemberHostComponentState = "warning"
	DistributedVirtualSwitchHostMemberHostComponentState_Disconnected DistributedVirtualSwitchHostMemberHostComponentState = "disconnected"
	DistributedVirtualSwitchHostMemberHostComponentState_Down         DistributedVirtualSwitchHostMemberHostComponentState = "down"
)

type DistributedVirtualSwitchPortConnecteeConnecteeType string

const (
	DistributedVirtualSwitchPortConnecteeConnecteeType_Pnic            DistributedVirtualSwitchPortConnecteeConnecteeType = "pnic"
	DistributedVirtualSwitchPortConnecteeConnecteeType_VmVnic          DistributedVirtualSwitchPortConnecteeConnecteeType = "vmVnic"
	DistributedVirtualSwitchPortConnecteeConnecteeType_HostConsoleVnic DistributedVirtualSwitchPortConnecteeConnecteeType = "hostConsoleVnic"
	DistributedVirtualSwitchPortConnecteeConnecteeType_HostVmkVnic     DistributedVirtualSwitchPortConnecteeConnecteeType = "hostVmkVnic"
)

type DvsNetworkRuleDirectionType string

const (
	DvsNetworkRuleDirectionType_IncomingPackets DvsNetworkRuleDirectionType = "incomingPackets"
	DvsNetworkRuleDirectionType_OutgoingPackets DvsNetworkRuleDirectionType = "outgoingPackets"
	DvsNetworkRuleDirectionType_Both            DvsNetworkRuleDirectionType = "both"
)

type VmwareDistributedVirtualSwitchPvlanPortType string

const (
	VmwareDistributedVirtualSwitchPvlanPortType_Promiscuous VmwareDistributedVirtualSwitchPvlanPortType = "promiscuous"
	VmwareDistributedVirtualSwitchPvlanPortType_Isolated    VmwareDistributedVirtualSwitchPvlanPortType = "isolated"
	VmwareDistributedVirtualSwitchPvlanPortType_Community   VmwareDistributedVirtualSwitchPvlanPortType = "community"
)

type VMwareDVSVspanSessionType string

const (
	VMwareDVSVspanSessionType_MixedDestMirror                VMwareDVSVspanSessionType = "mixedDestMirror"
	VMwareDVSVspanSessionType_DvPortMirror                   VMwareDVSVspanSessionType = "dvPortMirror"
	VMwareDVSVspanSessionType_RemoteMirrorSource             VMwareDVSVspanSessionType = "remoteMirrorSource"
	VMwareDVSVspanSessionType_RemoteMirrorDest               VMwareDVSVspanSessionType = "remoteMirrorDest"
	VMwareDVSVspanSessionType_EncapsulatedRemoteMirrorSource VMwareDVSVspanSessionType = "encapsulatedRemoteMirrorSource"
)

type VMwareDVSTeamingMatchStatus string

const (
	VMwareDVSTeamingMatchStatus_IphashMatch       VMwareDVSTeamingMatchStatus = "iphashMatch"
	VMwareDVSTeamingMatchStatus_NonIphashMatch    VMwareDVSTeamingMatchStatus = "nonIphashMatch"
	VMwareDVSTeamingMatchStatus_IphashMismatch    VMwareDVSTeamingMatchStatus = "iphashMismatch"
	VMwareDVSTeamingMatchStatus_NonIphashMismatch VMwareDVSTeamingMatchStatus = "nonIphashMismatch"
)

type VMwareUplinkLacpMode string

const (
	VMwareUplinkLacpMode_Active  VMwareUplinkLacpMode = "active"
	VMwareUplinkLacpMode_Passive VMwareUplinkLacpMode = "passive"
)

type VMwareDvsLacpLoadBalanceAlgorithm string

const (
	VMwareDvsLacpLoadBalanceAlgorithm_SrcMac                  VMwareDvsLacpLoadBalanceAlgorithm = "srcMac"
	VMwareDvsLacpLoadBalanceAlgorithm_DestMac                 VMwareDvsLacpLoadBalanceAlgorithm = "destMac"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcDestMac              VMwareDvsLacpLoadBalanceAlgorithm = "srcDestMac"
	VMwareDvsLacpLoadBalanceAlgorithm_DestIpVlan              VMwareDvsLacpLoadBalanceAlgorithm = "destIpVlan"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcIpVlan               VMwareDvsLacpLoadBalanceAlgorithm = "srcIpVlan"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcDestIpVlan           VMwareDvsLacpLoadBalanceAlgorithm = "srcDestIpVlan"
	VMwareDvsLacpLoadBalanceAlgorithm_DestTcpUdpPort          VMwareDvsLacpLoadBalanceAlgorithm = "destTcpUdpPort"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcTcpUdpPort           VMwareDvsLacpLoadBalanceAlgorithm = "srcTcpUdpPort"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcDestTcpUdpPort       VMwareDvsLacpLoadBalanceAlgorithm = "srcDestTcpUdpPort"
	VMwareDvsLacpLoadBalanceAlgorithm_DestIpTcpUdpPort        VMwareDvsLacpLoadBalanceAlgorithm = "destIpTcpUdpPort"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcIpTcpUdpPort         VMwareDvsLacpLoadBalanceAlgorithm = "srcIpTcpUdpPort"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcDestIpTcpUdpPort     VMwareDvsLacpLoadBalanceAlgorithm = "srcDestIpTcpUdpPort"
	VMwareDvsLacpLoadBalanceAlgorithm_DestIpTcpUdpPortVlan    VMwareDvsLacpLoadBalanceAlgorithm = "destIpTcpUdpPortVlan"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcIpTcpUdpPortVlan     VMwareDvsLacpLoadBalanceAlgorithm = "srcIpTcpUdpPortVlan"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcDestIpTcpUdpPortVlan VMwareDvsLacpLoadBalanceAlgorithm = "srcDestIpTcpUdpPortVlan"
	VMwareDvsLacpLoadBalanceAlgorithm_DestIp                  VMwareDvsLacpLoadBalanceAlgorithm = "destIp"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcIp                   VMwareDvsLacpLoadBalanceAlgorithm = "srcIp"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcDestIp               VMwareDvsLacpLoadBalanceAlgorithm = "srcDestIp"
	VMwareDvsLacpLoadBalanceAlgorithm_Vlan                    VMwareDvsLacpLoadBalanceAlgorithm = "vlan"
	VMwareDvsLacpLoadBalanceAlgorithm_SrcPortId               VMwareDvsLacpLoadBalanceAlgorithm = "srcPortId"
)

type VMwareDvsLacpApiVersion string

const (
	VMwareDvsLacpApiVersion_SingleLag   VMwareDvsLacpApiVersion = "singleLag"
	VMwareDvsLacpApiVersion_MultipleLag VMwareDvsLacpApiVersion = "multipleLag"
)

type EventEventSeverity string

const (
	EventEventSeverity_Error   EventEventSeverity = "error"
	EventEventSeverity_Warning EventEventSeverity = "warning"
	EventEventSeverity_Info    EventEventSeverity = "info"
	EventEventSeverity_User    EventEventSeverity = "user"
)

type HostDisconnectedEventReasonCode string

const (
	HostDisconnectedEventReasonCode_SslThumbprintVerifyFailed HostDisconnectedEventReasonCode = "sslThumbprintVerifyFailed"
	HostDisconnectedEventReasonCode_LicenseExpired            HostDisconnectedEventReasonCode = "licenseExpired"
	HostDisconnectedEventReasonCode_AgentUpgrade              HostDisconnectedEventReasonCode = "agentUpgrade"
	HostDisconnectedEventReasonCode_UserRequest               HostDisconnectedEventReasonCode = "userRequest"
	HostDisconnectedEventReasonCode_InsufficientLicenses      HostDisconnectedEventReasonCode = "insufficientLicenses"
	HostDisconnectedEventReasonCode_AgentOutOfDate            HostDisconnectedEventReasonCode = "agentOutOfDate"
	HostDisconnectedEventReasonCode_PasswordDecryptFailure    HostDisconnectedEventReasonCode = "passwordDecryptFailure"
	HostDisconnectedEventReasonCode_Unknown                   HostDisconnectedEventReasonCode = "unknown"
	HostDisconnectedEventReasonCode_VcVRAMCapacityExceeded    HostDisconnectedEventReasonCode = "vcVRAMCapacityExceeded"
)

type HostDasErrorEventHostDasErrorReason string

const (
	HostDasErrorEventHostDasErrorReason_ConfigFailed               HostDasErrorEventHostDasErrorReason = "configFailed"
	HostDasErrorEventHostDasErrorReason_Timeout                    HostDasErrorEventHostDasErrorReason = "timeout"
	HostDasErrorEventHostDasErrorReason_CommunicationInitFailed    HostDasErrorEventHostDasErrorReason = "communicationInitFailed"
	HostDasErrorEventHostDasErrorReason_HealthCheckScriptFailed    HostDasErrorEventHostDasErrorReason = "healthCheckScriptFailed"
	HostDasErrorEventHostDasErrorReason_AgentFailed                HostDasErrorEventHostDasErrorReason = "agentFailed"
	HostDasErrorEventHostDasErrorReason_AgentShutdown              HostDasErrorEventHostDasErrorReason = "agentShutdown"
	HostDasErrorEventHostDasErrorReason_IsolationAddressUnpingable HostDasErrorEventHostDasErrorReason = "isolationAddressUnpingable"
	HostDasErrorEventHostDasErrorReason_Other                      HostDasErrorEventHostDasErrorReason = "other"
)

type VmShutdownOnIsolationEventOperation string

const (
	VmShutdownOnIsolationEventOperation_Shutdown   VmShutdownOnIsolationEventOperation = "shutdown"
	VmShutdownOnIsolationEventOperation_PoweredOff VmShutdownOnIsolationEventOperation = "poweredOff"
)

type VmDasBeingResetEventReasonCode string

const (
	VmDasBeingResetEventReasonCode_VmtoolsHeartbeatFailure  VmDasBeingResetEventReasonCode = "vmtoolsHeartbeatFailure"
	VmDasBeingResetEventReasonCode_AppHeartbeatFailure      VmDasBeingResetEventReasonCode = "appHeartbeatFailure"
	VmDasBeingResetEventReasonCode_AppImmediateResetRequest VmDasBeingResetEventReasonCode = "appImmediateResetRequest"
)

type VmFailedStartingSecondaryEventFailureReason string

const (
	VmFailedStartingSecondaryEventFailureReason_IncompatibleHost VmFailedStartingSecondaryEventFailureReason = "incompatibleHost"
	VmFailedStartingSecondaryEventFailureReason_LoginFailed      VmFailedStartingSecondaryEventFailureReason = "loginFailed"
	VmFailedStartingSecondaryEventFailureReason_RegisterVmFailed VmFailedStartingSecondaryEventFailureReason = "registerVmFailed"
	VmFailedStartingSecondaryEventFailureReason_MigrateFailed    VmFailedStartingSecondaryEventFailureReason = "migrateFailed"
)

type EventCategory string

const (
	EventCategory_Info    EventCategory = "info"
	EventCategory_Warning EventCategory = "warning"
	EventCategory_Error   EventCategory = "error"
	EventCategory_User    EventCategory = "user"
)

type EventFilterSpecRecursionOption string

const (
	EventFilterSpecRecursionOption_Self     EventFilterSpecRecursionOption = "self"
	EventFilterSpecRecursionOption_Children EventFilterSpecRecursionOption = "children"
	EventFilterSpecRecursionOption_All      EventFilterSpecRecursionOption = "all"
)

type AffinityType string

const (
	AffinityType_Memory AffinityType = "memory"
	AffinityType_Cpu    AffinityType = "cpu"
)

type AgentInstallFailedReason string

const (
	AgentInstallFailedReason_NotEnoughSpaceOnDevice      AgentInstallFailedReason = "NotEnoughSpaceOnDevice"
	AgentInstallFailedReason_PrepareToUpgradeFailed      AgentInstallFailedReason = "PrepareToUpgradeFailed"
	AgentInstallFailedReason_AgentNotRunning             AgentInstallFailedReason = "AgentNotRunning"
	AgentInstallFailedReason_AgentNotReachable           AgentInstallFailedReason = "AgentNotReachable"
	AgentInstallFailedReason_InstallTimedout             AgentInstallFailedReason = "InstallTimedout"
	AgentInstallFailedReason_SignatureVerificationFailed AgentInstallFailedReason = "SignatureVerificationFailed"
	AgentInstallFailedReason_AgentUploadFailed           AgentInstallFailedReason = "AgentUploadFailed"
	AgentInstallFailedReason_AgentUploadTimedout         AgentInstallFailedReason = "AgentUploadTimedout"
	AgentInstallFailedReason_UnknownInstallerError       AgentInstallFailedReason = "UnknownInstallerError"
)

type CannotMoveFaultToleranceVmMoveType string

const (
	CannotMoveFaultToleranceVmMoveType_ResourcePool CannotMoveFaultToleranceVmMoveType = "resourcePool"
	CannotMoveFaultToleranceVmMoveType_Cluster      CannotMoveFaultToleranceVmMoveType = "cluster"
)

type CannotPowerOffVmInClusterOperation string

const (
	CannotPowerOffVmInClusterOperation_Suspend       CannotPowerOffVmInClusterOperation = "suspend"
	CannotPowerOffVmInClusterOperation_PowerOff      CannotPowerOffVmInClusterOperation = "powerOff"
	CannotPowerOffVmInClusterOperation_GuestShutdown CannotPowerOffVmInClusterOperation = "guestShutdown"
	CannotPowerOffVmInClusterOperation_GuestSuspend  CannotPowerOffVmInClusterOperation = "guestSuspend"
)

type CannotUseNetworkReason string

const (
	CannotUseNetworkReason_NetworkReservationNotSupported  CannotUseNetworkReason = "NetworkReservationNotSupported"
	CannotUseNetworkReason_MismatchedNetworkPolicies       CannotUseNetworkReason = "MismatchedNetworkPolicies"
	CannotUseNetworkReason_MismatchedDvsVersionOrVendor    CannotUseNetworkReason = "MismatchedDvsVersionOrVendor"
	CannotUseNetworkReason_VMotionToUnsupportedNetworkType CannotUseNetworkReason = "VMotionToUnsupportedNetworkType"
)

type DasConfigFaultDasConfigFaultReason string

const (
	DasConfigFaultDasConfigFaultReason_HostNetworkMisconfiguration DasConfigFaultDasConfigFaultReason = "HostNetworkMisconfiguration"
	DasConfigFaultDasConfigFaultReason_HostMisconfiguration        DasConfigFaultDasConfigFaultReason = "HostMisconfiguration"
	DasConfigFaultDasConfigFaultReason_InsufficientPrivileges      DasConfigFaultDasConfigFaultReason = "InsufficientPrivileges"
	DasConfigFaultDasConfigFaultReason_NoPrimaryAgentAvailable     DasConfigFaultDasConfigFaultReason = "NoPrimaryAgentAvailable"
	DasConfigFaultDasConfigFaultReason_Other                       DasConfigFaultDasConfigFaultReason = "Other"
	DasConfigFaultDasConfigFaultReason_NoDatastoresConfigured      DasConfigFaultDasConfigFaultReason = "NoDatastoresConfigured"
	DasConfigFaultDasConfigFaultReason_VSanNotSupportedOnHost      DasConfigFaultDasConfigFaultReason = "VSanNotSupportedOnHost"
)

type DeviceNotSupportedReason string

const (
	DeviceNotSupportedReason_Host  DeviceNotSupportedReason = "host"
	DeviceNotSupportedReason_Guest DeviceNotSupportedReason = "guest"
)

type DisallowedChangeByServiceDisallowedChange string

const (
	DisallowedChangeByServiceDisallowedChange_HotExtendDisk DisallowedChangeByServiceDisallowedChange = "hotExtendDisk"
)

type FtIssuesOnHostHostSelectionType string

const (
	FtIssuesOnHostHostSelectionType_User FtIssuesOnHostHostSelectionType = "user"
	FtIssuesOnHostHostSelectionType_Vc   FtIssuesOnHostHostSelectionType = "vc"
	FtIssuesOnHostHostSelectionType_Drs  FtIssuesOnHostHostSelectionType = "drs"
)

type HostIncompatibleForFaultToleranceReason string

const (
	HostIncompatibleForFaultToleranceReason_Product   HostIncompatibleForFaultToleranceReason = "product"
	HostIncompatibleForFaultToleranceReason_Processor HostIncompatibleForFaultToleranceReason = "processor"
)

type HostIncompatibleForRecordReplayReason string

const (
	HostIncompatibleForRecordReplayReason_Product   HostIncompatibleForRecordReplayReason = "product"
	HostIncompatibleForRecordReplayReason_Processor HostIncompatibleForRecordReplayReason = "processor"
)

type InvalidDasConfigArgumentEntryForInvalidArgument string

const (
	InvalidDasConfigArgumentEntryForInvalidArgument_AdmissionControl InvalidDasConfigArgumentEntryForInvalidArgument = "admissionControl"
	InvalidDasConfigArgumentEntryForInvalidArgument_UserHeartbeatDs  InvalidDasConfigArgumentEntryForInvalidArgument = "userHeartbeatDs"
	InvalidDasConfigArgumentEntryForInvalidArgument_VmConfig         InvalidDasConfigArgumentEntryForInvalidArgument = "vmConfig"
)

type InvalidProfileReferenceHostReason string

const (
	InvalidProfileReferenceHostReason_IncompatibleVersion  InvalidProfileReferenceHostReason = "incompatibleVersion"
	InvalidProfileReferenceHostReason_MissingReferenceHost InvalidProfileReferenceHostReason = "missingReferenceHost"
)

type LicenseAssignmentFailedReason string

const (
	LicenseAssignmentFailedReason_KeyEntityMismatch                                    LicenseAssignmentFailedReason = "keyEntityMismatch"
	LicenseAssignmentFailedReason_DowngradeDisallowed                                  LicenseAssignmentFailedReason = "downgradeDisallowed"
	LicenseAssignmentFailedReason_InventoryNotManageableByVirtualCenter                LicenseAssignmentFailedReason = "inventoryNotManageableByVirtualCenter"
	LicenseAssignmentFailedReason_HostsUnmanageableByVirtualCenterWithoutLicenseServer LicenseAssignmentFailedReason = "hostsUnmanageableByVirtualCenterWithoutLicenseServer"
)

type NotSupportedDeviceForFTDeviceType string

const (
	NotSupportedDeviceForFTDeviceType_VirtualVmxnet3            NotSupportedDeviceForFTDeviceType = "virtualVmxnet3"
	NotSupportedDeviceForFTDeviceType_ParaVirtualSCSIController NotSupportedDeviceForFTDeviceType = "paraVirtualSCSIController"
)

type NumVirtualCpusIncompatibleReason string

const (
	NumVirtualCpusIncompatibleReason_RecordReplay   NumVirtualCpusIncompatibleReason = "recordReplay"
	NumVirtualCpusIncompatibleReason_FaultTolerance NumVirtualCpusIncompatibleReason = "faultTolerance"
)

type ReplicationDiskConfigFaultReasonForFault string

const (
	ReplicationDiskConfigFaultReasonForFault_DiskNotFound                           ReplicationDiskConfigFaultReasonForFault = "diskNotFound"
	ReplicationDiskConfigFaultReasonForFault_DiskTypeNotSupported                   ReplicationDiskConfigFaultReasonForFault = "diskTypeNotSupported"
	ReplicationDiskConfigFaultReasonForFault_InvalidDiskKey                         ReplicationDiskConfigFaultReasonForFault = "invalidDiskKey"
	ReplicationDiskConfigFaultReasonForFault_InvalidDiskReplicationId               ReplicationDiskConfigFaultReasonForFault = "invalidDiskReplicationId"
	ReplicationDiskConfigFaultReasonForFault_DuplicateDiskReplicationId             ReplicationDiskConfigFaultReasonForFault = "duplicateDiskReplicationId"
	ReplicationDiskConfigFaultReasonForFault_InvalidPersistentFilePath              ReplicationDiskConfigFaultReasonForFault = "invalidPersistentFilePath"
	ReplicationDiskConfigFaultReasonForFault_ReconfigureDiskReplicationIdNotAllowed ReplicationDiskConfigFaultReasonForFault = "reconfigureDiskReplicationIdNotAllowed"
)

type ReplicationVmConfigFaultReasonForFault string

const (
	ReplicationVmConfigFaultReasonForFault_IncompatibleHwVersion                    ReplicationVmConfigFaultReasonForFault = "incompatibleHwVersion"
	ReplicationVmConfigFaultReasonForFault_InvalidVmReplicationId                   ReplicationVmConfigFaultReasonForFault = "invalidVmReplicationId"
	ReplicationVmConfigFaultReasonForFault_InvalidGenerationNumber                  ReplicationVmConfigFaultReasonForFault = "invalidGenerationNumber"
	ReplicationVmConfigFaultReasonForFault_OutOfBoundsRpoValue                      ReplicationVmConfigFaultReasonForFault = "outOfBoundsRpoValue"
	ReplicationVmConfigFaultReasonForFault_InvalidDestinationIpAddress              ReplicationVmConfigFaultReasonForFault = "invalidDestinationIpAddress"
	ReplicationVmConfigFaultReasonForFault_InvalidDestinationPort                   ReplicationVmConfigFaultReasonForFault = "invalidDestinationPort"
	ReplicationVmConfigFaultReasonForFault_InvalidExtraVmOptions                    ReplicationVmConfigFaultReasonForFault = "invalidExtraVmOptions"
	ReplicationVmConfigFaultReasonForFault_StaleGenerationNumber                    ReplicationVmConfigFaultReasonForFault = "staleGenerationNumber"
	ReplicationVmConfigFaultReasonForFault_ReconfigureVmReplicationIdNotAllowed     ReplicationVmConfigFaultReasonForFault = "reconfigureVmReplicationIdNotAllowed"
	ReplicationVmConfigFaultReasonForFault_CannotRetrieveVmReplicationConfiguration ReplicationVmConfigFaultReasonForFault = "cannotRetrieveVmReplicationConfiguration"
	ReplicationVmConfigFaultReasonForFault_ReplicationAlreadyEnabled                ReplicationVmConfigFaultReasonForFault = "replicationAlreadyEnabled"
	ReplicationVmConfigFaultReasonForFault_InvalidPriorConfiguration                ReplicationVmConfigFaultReasonForFault = "invalidPriorConfiguration"
	ReplicationVmConfigFaultReasonForFault_ReplicationNotEnabled                    ReplicationVmConfigFaultReasonForFault = "replicationNotEnabled"
	ReplicationVmConfigFaultReasonForFault_ReplicationConfigurationFailed           ReplicationVmConfigFaultReasonForFault = "replicationConfigurationFailed"
)

type ReplicationVmFaultReasonForFault string

const (
	ReplicationVmFaultReasonForFault_NotConfigured      ReplicationVmFaultReasonForFault = "notConfigured"
	ReplicationVmFaultReasonForFault_PoweredOff         ReplicationVmFaultReasonForFault = "poweredOff"
	ReplicationVmFaultReasonForFault_Suspended          ReplicationVmFaultReasonForFault = "suspended"
	ReplicationVmFaultReasonForFault_PoweredOn          ReplicationVmFaultReasonForFault = "poweredOn"
	ReplicationVmFaultReasonForFault_OfflineReplicating ReplicationVmFaultReasonForFault = "offlineReplicating"
	ReplicationVmFaultReasonForFault_InvalidState       ReplicationVmFaultReasonForFault = "invalidState"
	ReplicationVmFaultReasonForFault_InvalidInstanceId  ReplicationVmFaultReasonForFault = "invalidInstanceId"
)

type ThirdPartyLicenseAssignmentFailedReason string

const (
	ThirdPartyLicenseAssignmentFailedReason_LicenseAssignmentFailed ThirdPartyLicenseAssignmentFailedReason = "licenseAssignmentFailed"
	ThirdPartyLicenseAssignmentFailedReason_ModuleNotInstalled      ThirdPartyLicenseAssignmentFailedReason = "moduleNotInstalled"
)

type VFlashModuleNotSupportedReason string

const (
	VFlashModuleNotSupportedReason_CacheModeNotSupported            VFlashModuleNotSupportedReason = "CacheModeNotSupported"
	VFlashModuleNotSupportedReason_CacheConsistencyTypeNotSupported VFlashModuleNotSupportedReason = "CacheConsistencyTypeNotSupported"
	VFlashModuleNotSupportedReason_CacheBlockSizeNotSupported       VFlashModuleNotSupportedReason = "CacheBlockSizeNotSupported"
	VFlashModuleNotSupportedReason_CacheReservationNotSupported     VFlashModuleNotSupportedReason = "CacheReservationNotSupported"
	VFlashModuleNotSupportedReason_DiskSizeNotSupported             VFlashModuleNotSupportedReason = "DiskSizeNotSupported"
)

type VmFaultToleranceConfigIssueReasonForIssue string

const (
	VmFaultToleranceConfigIssueReasonForIssue_HaNotEnabled                   VmFaultToleranceConfigIssueReasonForIssue = "haNotEnabled"
	VmFaultToleranceConfigIssueReasonForIssue_MoreThanOneSecondary           VmFaultToleranceConfigIssueReasonForIssue = "moreThanOneSecondary"
	VmFaultToleranceConfigIssueReasonForIssue_RecordReplayNotSupported       VmFaultToleranceConfigIssueReasonForIssue = "recordReplayNotSupported"
	VmFaultToleranceConfigIssueReasonForIssue_ReplayNotSupported             VmFaultToleranceConfigIssueReasonForIssue = "replayNotSupported"
	VmFaultToleranceConfigIssueReasonForIssue_TemplateVm                     VmFaultToleranceConfigIssueReasonForIssue = "templateVm"
	VmFaultToleranceConfigIssueReasonForIssue_MultipleVCPU                   VmFaultToleranceConfigIssueReasonForIssue = "multipleVCPU"
	VmFaultToleranceConfigIssueReasonForIssue_HostInactive                   VmFaultToleranceConfigIssueReasonForIssue = "hostInactive"
	VmFaultToleranceConfigIssueReasonForIssue_FtUnsupportedHardware          VmFaultToleranceConfigIssueReasonForIssue = "ftUnsupportedHardware"
	VmFaultToleranceConfigIssueReasonForIssue_FtUnsupportedProduct           VmFaultToleranceConfigIssueReasonForIssue = "ftUnsupportedProduct"
	VmFaultToleranceConfigIssueReasonForIssue_MissingVMotionNic              VmFaultToleranceConfigIssueReasonForIssue = "missingVMotionNic"
	VmFaultToleranceConfigIssueReasonForIssue_MissingFTLoggingNic            VmFaultToleranceConfigIssueReasonForIssue = "missingFTLoggingNic"
	VmFaultToleranceConfigIssueReasonForIssue_ThinDisk                       VmFaultToleranceConfigIssueReasonForIssue = "thinDisk"
	VmFaultToleranceConfigIssueReasonForIssue_VerifySSLCertificateFlagNotSet VmFaultToleranceConfigIssueReasonForIssue = "verifySSLCertificateFlagNotSet"
	VmFaultToleranceConfigIssueReasonForIssue_HasSnapshots                   VmFaultToleranceConfigIssueReasonForIssue = "hasSnapshots"
	VmFaultToleranceConfigIssueReasonForIssue_NoConfig                       VmFaultToleranceConfigIssueReasonForIssue = "noConfig"
	VmFaultToleranceConfigIssueReasonForIssue_FtSecondaryVm                  VmFaultToleranceConfigIssueReasonForIssue = "ftSecondaryVm"
	VmFaultToleranceConfigIssueReasonForIssue_HasLocalDisk                   VmFaultToleranceConfigIssueReasonForIssue = "hasLocalDisk"
	VmFaultToleranceConfigIssueReasonForIssue_EsxAgentVm                     VmFaultToleranceConfigIssueReasonForIssue = "esxAgentVm"
	VmFaultToleranceConfigIssueReasonForIssue_Video3dEnabled                 VmFaultToleranceConfigIssueReasonForIssue = "video3dEnabled"
	VmFaultToleranceConfigIssueReasonForIssue_HasUnsupportedDisk             VmFaultToleranceConfigIssueReasonForIssue = "hasUnsupportedDisk"
	VmFaultToleranceConfigIssueReasonForIssue_HasNestedHVConfiguration       VmFaultToleranceConfigIssueReasonForIssue = "hasNestedHVConfiguration"
	VmFaultToleranceConfigIssueReasonForIssue_HasVFlashConfiguration         VmFaultToleranceConfigIssueReasonForIssue = "hasVFlashConfiguration"
)

type VmFaultToleranceInvalidFileBackingDeviceType string

const (
	VmFaultToleranceInvalidFileBackingDeviceType_VirtualFloppy       VmFaultToleranceInvalidFileBackingDeviceType = "virtualFloppy"
	VmFaultToleranceInvalidFileBackingDeviceType_VirtualCdrom        VmFaultToleranceInvalidFileBackingDeviceType = "virtualCdrom"
	VmFaultToleranceInvalidFileBackingDeviceType_VirtualSerialPort   VmFaultToleranceInvalidFileBackingDeviceType = "virtualSerialPort"
	VmFaultToleranceInvalidFileBackingDeviceType_VirtualParallelPort VmFaultToleranceInvalidFileBackingDeviceType = "virtualParallelPort"
	VmFaultToleranceInvalidFileBackingDeviceType_VirtualDisk         VmFaultToleranceInvalidFileBackingDeviceType = "virtualDisk"
)

type WillLoseHAProtectionResolution string

const (
	WillLoseHAProtectionResolution_Svmotion WillLoseHAProtectionResolution = "svmotion"
	WillLoseHAProtectionResolution_Relocate WillLoseHAProtectionResolution = "relocate"
)

type HostActiveDirectoryInfoDomainMembershipStatus string

const (
	HostActiveDirectoryInfoDomainMembershipStatus_Unknown           HostActiveDirectoryInfoDomainMembershipStatus = "unknown"
	HostActiveDirectoryInfoDomainMembershipStatus_Ok                HostActiveDirectoryInfoDomainMembershipStatus = "ok"
	HostActiveDirectoryInfoDomainMembershipStatus_NoServers         HostActiveDirectoryInfoDomainMembershipStatus = "noServers"
	HostActiveDirectoryInfoDomainMembershipStatus_ClientTrustBroken HostActiveDirectoryInfoDomainMembershipStatus = "clientTrustBroken"
	HostActiveDirectoryInfoDomainMembershipStatus_ServerTrustBroken HostActiveDirectoryInfoDomainMembershipStatus = "serverTrustBroken"
	HostActiveDirectoryInfoDomainMembershipStatus_InconsistentTrust HostActiveDirectoryInfoDomainMembershipStatus = "inconsistentTrust"
	HostActiveDirectoryInfoDomainMembershipStatus_OtherProblem      HostActiveDirectoryInfoDomainMembershipStatus = "otherProblem"
)

type AutoStartAction string

const (
	AutoStartAction_None          AutoStartAction = "none"
	AutoStartAction_SystemDefault AutoStartAction = "systemDefault"
	AutoStartAction_PowerOn       AutoStartAction = "powerOn"
	AutoStartAction_PowerOff      AutoStartAction = "powerOff"
	AutoStartAction_GuestShutdown AutoStartAction = "guestShutdown"
	AutoStartAction_Suspend       AutoStartAction = "suspend"
)

type AutoStartWaitHeartbeatSetting string

const (
	AutoStartWaitHeartbeatSetting_Yes           AutoStartWaitHeartbeatSetting = "yes"
	AutoStartWaitHeartbeatSetting_No            AutoStartWaitHeartbeatSetting = "no"
	AutoStartWaitHeartbeatSetting_SystemDefault AutoStartWaitHeartbeatSetting = "systemDefault"
)

type HostReplayUnsupportedReason string

const (
	HostReplayUnsupportedReason_IncompatibleProduct HostReplayUnsupportedReason = "incompatibleProduct"
	HostReplayUnsupportedReason_IncompatibleCpu     HostReplayUnsupportedReason = "incompatibleCpu"
	HostReplayUnsupportedReason_HvDisabled          HostReplayUnsupportedReason = "hvDisabled"
	HostReplayUnsupportedReason_CpuidLimitSet       HostReplayUnsupportedReason = "cpuidLimitSet"
	HostReplayUnsupportedReason_OldBIOS             HostReplayUnsupportedReason = "oldBIOS"
	HostReplayUnsupportedReason_Unknown             HostReplayUnsupportedReason = "unknown"
)

type HostCapabilityFtUnsupportedReason string

const (
	HostCapabilityFtUnsupportedReason_VMotionNotLicensed  HostCapabilityFtUnsupportedReason = "vMotionNotLicensed"
	HostCapabilityFtUnsupportedReason_MissingVMotionNic   HostCapabilityFtUnsupportedReason = "missingVMotionNic"
	HostCapabilityFtUnsupportedReason_MissingFTLoggingNic HostCapabilityFtUnsupportedReason = "missingFTLoggingNic"
	HostCapabilityFtUnsupportedReason_FtNotLicensed       HostCapabilityFtUnsupportedReason = "ftNotLicensed"
	HostCapabilityFtUnsupportedReason_HaAgentIssue        HostCapabilityFtUnsupportedReason = "haAgentIssue"
)

type HostCapabilityVmDirectPathGen2UnsupportedReason string

const (
	HostCapabilityVmDirectPathGen2UnsupportedReason_HostNptIncompatibleProduct  HostCapabilityVmDirectPathGen2UnsupportedReason = "hostNptIncompatibleProduct"
	HostCapabilityVmDirectPathGen2UnsupportedReason_HostNptIncompatibleHardware HostCapabilityVmDirectPathGen2UnsupportedReason = "hostNptIncompatibleHardware"
	HostCapabilityVmDirectPathGen2UnsupportedReason_HostNptDisabled             HostCapabilityVmDirectPathGen2UnsupportedReason = "hostNptDisabled"
)

type HostConfigChangeMode string

const (
	HostConfigChangeMode_Modify  HostConfigChangeMode = "modify"
	HostConfigChangeMode_Replace HostConfigChangeMode = "replace"
)

type HostConfigChangeOperation string

const (
	HostConfigChangeOperation_Add    HostConfigChangeOperation = "add"
	HostConfigChangeOperation_Remove HostConfigChangeOperation = "remove"
	HostConfigChangeOperation_Edit   HostConfigChangeOperation = "edit"
)

type DiagnosticPartitionStorageType string

const (
	DiagnosticPartitionStorageType_DirectAttached  DiagnosticPartitionStorageType = "directAttached"
	DiagnosticPartitionStorageType_NetworkAttached DiagnosticPartitionStorageType = "networkAttached"
)

type DiagnosticPartitionType string

const (
	DiagnosticPartitionType_SingleHost DiagnosticPartitionType = "singleHost"
	DiagnosticPartitionType_MultiHost  DiagnosticPartitionType = "multiHost"
)

type HostDiskPartitionInfoPartitionFormat string

const (
	HostDiskPartitionInfoPartitionFormat_Gpt     HostDiskPartitionInfoPartitionFormat = "gpt"
	HostDiskPartitionInfoPartitionFormat_Mbr     HostDiskPartitionInfoPartitionFormat = "mbr"
	HostDiskPartitionInfoPartitionFormat_Unknown HostDiskPartitionInfoPartitionFormat = "unknown"
)

type HostDiskPartitionInfoType string

const (
	HostDiskPartitionInfoType_None          HostDiskPartitionInfoType = "none"
	HostDiskPartitionInfoType_Vmfs          HostDiskPartitionInfoType = "vmfs"
	HostDiskPartitionInfoType_LinuxNative   HostDiskPartitionInfoType = "linuxNative"
	HostDiskPartitionInfoType_LinuxSwap     HostDiskPartitionInfoType = "linuxSwap"
	HostDiskPartitionInfoType_Extended      HostDiskPartitionInfoType = "extended"
	HostDiskPartitionInfoType_Ntfs          HostDiskPartitionInfoType = "ntfs"
	HostDiskPartitionInfoType_VmkDiagnostic HostDiskPartitionInfoType = "vmkDiagnostic"
	HostDiskPartitionInfoType_Vffs          HostDiskPartitionInfoType = "vffs"
)

type HostFeatureVersionKey string

const (
	HostFeatureVersionKey_FaultTolerance HostFeatureVersionKey = "faultTolerance"
)

type FileSystemMountInfoVStorageSupportStatus string

const (
	FileSystemMountInfoVStorageSupportStatus_VStorageSupported   FileSystemMountInfoVStorageSupportStatus = "vStorageSupported"
	FileSystemMountInfoVStorageSupportStatus_VStorageUnsupported FileSystemMountInfoVStorageSupportStatus = "vStorageUnsupported"
	FileSystemMountInfoVStorageSupportStatus_VStorageUnknown     FileSystemMountInfoVStorageSupportStatus = "vStorageUnknown"
)

type HostGraphicsInfoGraphicsType string

const (
	HostGraphicsInfoGraphicsType_Basic  HostGraphicsInfoGraphicsType = "basic"
	HostGraphicsInfoGraphicsType_Shared HostGraphicsInfoGraphicsType = "shared"
	HostGraphicsInfoGraphicsType_Direct HostGraphicsInfoGraphicsType = "direct"
)

type HostCpuPowerManagementInfoPolicyType string

const (
	HostCpuPowerManagementInfoPolicyType_Off           HostCpuPowerManagementInfoPolicyType = "off"
	HostCpuPowerManagementInfoPolicyType_StaticPolicy  HostCpuPowerManagementInfoPolicyType = "staticPolicy"
	HostCpuPowerManagementInfoPolicyType_DynamicPolicy HostCpuPowerManagementInfoPolicyType = "dynamicPolicy"
)

type HostCpuPackageVendor string

const (
	HostCpuPackageVendor_Unknown HostCpuPackageVendor = "unknown"
	HostCpuPackageVendor_Intel   HostCpuPackageVendor = "intel"
	HostCpuPackageVendor_Amd     HostCpuPackageVendor = "amd"
)

type HostHardwareElementStatus string

const (
	HostHardwareElementStatus_Unknown HostHardwareElementStatus = "Unknown"
	HostHardwareElementStatus_Green   HostHardwareElementStatus = "Green"
	HostHardwareElementStatus_Yellow  HostHardwareElementStatus = "Yellow"
	HostHardwareElementStatus_Red     HostHardwareElementStatus = "Red"
)

type FibreChannelPortType string

const (
	FibreChannelPortType_Fabric       FibreChannelPortType = "fabric"
	FibreChannelPortType_Loop         FibreChannelPortType = "loop"
	FibreChannelPortType_PointToPoint FibreChannelPortType = "pointToPoint"
	FibreChannelPortType_Unknown      FibreChannelPortType = "unknown"
)

type InternetScsiSnsDiscoveryMethod string

const (
	InternetScsiSnsDiscoveryMethod_IsnsStatic InternetScsiSnsDiscoveryMethod = "isnsStatic"
	InternetScsiSnsDiscoveryMethod_IsnsDhcp   InternetScsiSnsDiscoveryMethod = "isnsDhcp"
	InternetScsiSnsDiscoveryMethod_IsnsSlp    InternetScsiSnsDiscoveryMethod = "isnsSlp"
)

type SlpDiscoveryMethod string

const (
	SlpDiscoveryMethod_SlpDhcp          SlpDiscoveryMethod = "slpDhcp"
	SlpDiscoveryMethod_SlpAutoUnicast   SlpDiscoveryMethod = "slpAutoUnicast"
	SlpDiscoveryMethod_SlpAutoMulticast SlpDiscoveryMethod = "slpAutoMulticast"
	SlpDiscoveryMethod_SlpManual        SlpDiscoveryMethod = "slpManual"
)

type HostInternetScsiHbaChapAuthenticationType string

const (
	HostInternetScsiHbaChapAuthenticationType_ChapProhibited  HostInternetScsiHbaChapAuthenticationType = "chapProhibited"
	HostInternetScsiHbaChapAuthenticationType_ChapDiscouraged HostInternetScsiHbaChapAuthenticationType = "chapDiscouraged"
	HostInternetScsiHbaChapAuthenticationType_ChapPreferred   HostInternetScsiHbaChapAuthenticationType = "chapPreferred"
	HostInternetScsiHbaChapAuthenticationType_ChapRequired    HostInternetScsiHbaChapAuthenticationType = "chapRequired"
)

type HostInternetScsiHbaDigestType string

const (
	HostInternetScsiHbaDigestType_DigestProhibited  HostInternetScsiHbaDigestType = "digestProhibited"
	HostInternetScsiHbaDigestType_DigestDiscouraged HostInternetScsiHbaDigestType = "digestDiscouraged"
	HostInternetScsiHbaDigestType_DigestPreferred   HostInternetScsiHbaDigestType = "digestPreferred"
	HostInternetScsiHbaDigestType_DigestRequired    HostInternetScsiHbaDigestType = "digestRequired"
)

type HostInternetScsiHbaStaticTargetTargetDiscoveryMethod string

const (
	HostInternetScsiHbaStaticTargetTargetDiscoveryMethod_StaticMethod     HostInternetScsiHbaStaticTargetTargetDiscoveryMethod = "staticMethod"
	HostInternetScsiHbaStaticTargetTargetDiscoveryMethod_SendTargetMethod HostInternetScsiHbaStaticTargetTargetDiscoveryMethod = "sendTargetMethod"
	HostInternetScsiHbaStaticTargetTargetDiscoveryMethod_SlpMethod        HostInternetScsiHbaStaticTargetTargetDiscoveryMethod = "slpMethod"
	HostInternetScsiHbaStaticTargetTargetDiscoveryMethod_IsnsMethod       HostInternetScsiHbaStaticTargetTargetDiscoveryMethod = "isnsMethod"
	HostInternetScsiHbaStaticTargetTargetDiscoveryMethod_UnknownMethod    HostInternetScsiHbaStaticTargetTargetDiscoveryMethod = "unknownMethod"
)

type HostInternetScsiHbaNetworkBindingSupportType string

const (
	HostInternetScsiHbaNetworkBindingSupportType_Notsupported HostInternetScsiHbaNetworkBindingSupportType = "notsupported"
	HostInternetScsiHbaNetworkBindingSupportType_Optional     HostInternetScsiHbaNetworkBindingSupportType = "optional"
	HostInternetScsiHbaNetworkBindingSupportType_Required     HostInternetScsiHbaNetworkBindingSupportType = "required"
)

type HostImageAcceptanceLevel string

const (
	HostImageAcceptanceLevel_Vmware_certified HostImageAcceptanceLevel = "vmware_certified"
	HostImageAcceptanceLevel_Vmware_accepted  HostImageAcceptanceLevel = "vmware_accepted"
	HostImageAcceptanceLevel_Partner          HostImageAcceptanceLevel = "partner"
	HostImageAcceptanceLevel_Community        HostImageAcceptanceLevel = "community"
)

type HostIpConfigIpV6AddressConfigType string

const (
	HostIpConfigIpV6AddressConfigType_Other     HostIpConfigIpV6AddressConfigType = "other"
	HostIpConfigIpV6AddressConfigType_Manual    HostIpConfigIpV6AddressConfigType = "manual"
	HostIpConfigIpV6AddressConfigType_Dhcp      HostIpConfigIpV6AddressConfigType = "dhcp"
	HostIpConfigIpV6AddressConfigType_Linklayer HostIpConfigIpV6AddressConfigType = "linklayer"
	HostIpConfigIpV6AddressConfigType_Random    HostIpConfigIpV6AddressConfigType = "random"
)

type HostIpConfigIpV6AddressStatus string

const (
	HostIpConfigIpV6AddressStatus_Preferred    HostIpConfigIpV6AddressStatus = "preferred"
	HostIpConfigIpV6AddressStatus_Deprecated   HostIpConfigIpV6AddressStatus = "deprecated"
	HostIpConfigIpV6AddressStatus_Invalid      HostIpConfigIpV6AddressStatus = "invalid"
	HostIpConfigIpV6AddressStatus_Inaccessible HostIpConfigIpV6AddressStatus = "inaccessible"
	HostIpConfigIpV6AddressStatus_Unknown      HostIpConfigIpV6AddressStatus = "unknown"
	HostIpConfigIpV6AddressStatus_Tentative    HostIpConfigIpV6AddressStatus = "tentative"
	HostIpConfigIpV6AddressStatus_Duplicate    HostIpConfigIpV6AddressStatus = "duplicate"
)

type IscsiPortInfoPathStatus string

const (
	IscsiPortInfoPathStatus_NotUsed    IscsiPortInfoPathStatus = "notUsed"
	IscsiPortInfoPathStatus_Active     IscsiPortInfoPathStatus = "active"
	IscsiPortInfoPathStatus_StandBy    IscsiPortInfoPathStatus = "standBy"
	IscsiPortInfoPathStatus_LastActive IscsiPortInfoPathStatus = "lastActive"
)

type LinkDiscoveryProtocolConfigProtocolType string

const (
	LinkDiscoveryProtocolConfigProtocolType_Cdp  LinkDiscoveryProtocolConfigProtocolType = "cdp"
	LinkDiscoveryProtocolConfigProtocolType_Lldp LinkDiscoveryProtocolConfigProtocolType = "lldp"
)

type LinkDiscoveryProtocolConfigOperationType string

const (
	LinkDiscoveryProtocolConfigOperationType_None      LinkDiscoveryProtocolConfigOperationType = "none"
	LinkDiscoveryProtocolConfigOperationType_Listen    LinkDiscoveryProtocolConfigOperationType = "listen"
	LinkDiscoveryProtocolConfigOperationType_Advertise LinkDiscoveryProtocolConfigOperationType = "advertise"
	LinkDiscoveryProtocolConfigOperationType_Both      LinkDiscoveryProtocolConfigOperationType = "both"
)

type HostLowLevelProvisioningManagerReloadTarget string

const (
	HostLowLevelProvisioningManagerReloadTarget_CurrentConfig  HostLowLevelProvisioningManagerReloadTarget = "currentConfig"
	HostLowLevelProvisioningManagerReloadTarget_SnapshotConfig HostLowLevelProvisioningManagerReloadTarget = "snapshotConfig"
)

type VirtualMachineMemoryAllocationPolicy string

const (
	VirtualMachineMemoryAllocationPolicy_SwapNone VirtualMachineMemoryAllocationPolicy = "swapNone"
	VirtualMachineMemoryAllocationPolicy_SwapSome VirtualMachineMemoryAllocationPolicy = "swapSome"
	VirtualMachineMemoryAllocationPolicy_SwapMost VirtualMachineMemoryAllocationPolicy = "swapMost"
)

type HostMountMode string

const (
	HostMountMode_ReadWrite HostMountMode = "readWrite"
	HostMountMode_ReadOnly  HostMountMode = "readOnly"
)

type HostMountInfoInaccessibleReason string

const (
	HostMountInfoInaccessibleReason_AllPathsDown_Start   HostMountInfoInaccessibleReason = "AllPathsDown_Start"
	HostMountInfoInaccessibleReason_AllPathsDown_Timeout HostMountInfoInaccessibleReason = "AllPathsDown_Timeout"
	HostMountInfoInaccessibleReason_PermanentDeviceLoss  HostMountInfoInaccessibleReason = "PermanentDeviceLoss"
)

type MultipathState string

const (
	MultipathState_Standby  MultipathState = "standby"
	MultipathState_Active   MultipathState = "active"
	MultipathState_Disabled MultipathState = "disabled"
	MultipathState_Dead     MultipathState = "dead"
	MultipathState_Unknown  MultipathState = "unknown"
)

type HostNetStackInstanceSystemStackKey string

const (
	HostNetStackInstanceSystemStackKey_DefaultTcpipStack HostNetStackInstanceSystemStackKey = "defaultTcpipStack"
)

type HostNetStackInstanceCongestionControlAlgorithmType string

const (
	HostNetStackInstanceCongestionControlAlgorithmType_Newreno HostNetStackInstanceCongestionControlAlgorithmType = "newreno"
	HostNetStackInstanceCongestionControlAlgorithmType_Cubic   HostNetStackInstanceCongestionControlAlgorithmType = "cubic"
)

type HostNumericSensorHealthState string

const (
	HostNumericSensorHealthState_Unknown HostNumericSensorHealthState = "unknown"
	HostNumericSensorHealthState_Green   HostNumericSensorHealthState = "green"
	HostNumericSensorHealthState_Yellow  HostNumericSensorHealthState = "yellow"
	HostNumericSensorHealthState_Red     HostNumericSensorHealthState = "red"
)

type HostNumericSensorType string

const (
	HostNumericSensorType_Fan         HostNumericSensorType = "fan"
	HostNumericSensorType_Power       HostNumericSensorType = "power"
	HostNumericSensorType_Temperature HostNumericSensorType = "temperature"
	HostNumericSensorType_Voltage     HostNumericSensorType = "voltage"
	HostNumericSensorType_Other       HostNumericSensorType = "other"
)

type HostPatchManagerReason string

const (
	HostPatchManagerReason_Obsoleted         HostPatchManagerReason = "obsoleted"
	HostPatchManagerReason_MissingPatch      HostPatchManagerReason = "missingPatch"
	HostPatchManagerReason_MissingLib        HostPatchManagerReason = "missingLib"
	HostPatchManagerReason_HasDependentPatch HostPatchManagerReason = "hasDependentPatch"
	HostPatchManagerReason_ConflictPatch     HostPatchManagerReason = "conflictPatch"
	HostPatchManagerReason_ConflictLib       HostPatchManagerReason = "conflictLib"
)

type HostPatchManagerIntegrityStatus string

const (
	HostPatchManagerIntegrityStatus_Validated           HostPatchManagerIntegrityStatus = "validated"
	HostPatchManagerIntegrityStatus_KeyNotFound         HostPatchManagerIntegrityStatus = "keyNotFound"
	HostPatchManagerIntegrityStatus_KeyRevoked          HostPatchManagerIntegrityStatus = "keyRevoked"
	HostPatchManagerIntegrityStatus_KeyExpired          HostPatchManagerIntegrityStatus = "keyExpired"
	HostPatchManagerIntegrityStatus_DigestMismatch      HostPatchManagerIntegrityStatus = "digestMismatch"
	HostPatchManagerIntegrityStatus_NotEnoughSignatures HostPatchManagerIntegrityStatus = "notEnoughSignatures"
	HostPatchManagerIntegrityStatus_ValidationError     HostPatchManagerIntegrityStatus = "validationError"
)

type HostPatchManagerInstallState string

const (
	HostPatchManagerInstallState_HostRestarted HostPatchManagerInstallState = "hostRestarted"
	HostPatchManagerInstallState_ImageActive   HostPatchManagerInstallState = "imageActive"
)

type PhysicalNicVmDirectPathGen2SupportedMode string

const (
	PhysicalNicVmDirectPathGen2SupportedMode_Upt PhysicalNicVmDirectPathGen2SupportedMode = "upt"
)

type PhysicalNicResourcePoolSchedulerDisallowedReason string

const (
	PhysicalNicResourcePoolSchedulerDisallowedReason_UserOptOut          PhysicalNicResourcePoolSchedulerDisallowedReason = "userOptOut"
	PhysicalNicResourcePoolSchedulerDisallowedReason_HardwareUnsupported PhysicalNicResourcePoolSchedulerDisallowedReason = "hardwareUnsupported"
)

type PortGroupConnecteeType string

const (
	PortGroupConnecteeType_VirtualMachine   PortGroupConnecteeType = "virtualMachine"
	PortGroupConnecteeType_SystemManagement PortGroupConnecteeType = "systemManagement"
	PortGroupConnecteeType_Host             PortGroupConnecteeType = "host"
	PortGroupConnecteeType_Unknown          PortGroupConnecteeType = "unknown"
)

type HostFirewallRuleDirection string

const (
	HostFirewallRuleDirection_Inbound  HostFirewallRuleDirection = "inbound"
	HostFirewallRuleDirection_Outbound HostFirewallRuleDirection = "outbound"
)

type HostFirewallRulePortType string

const (
	HostFirewallRulePortType_Src HostFirewallRulePortType = "src"
	HostFirewallRulePortType_Dst HostFirewallRulePortType = "dst"
)

type HostFirewallRuleProtocol string

const (
	HostFirewallRuleProtocol_Tcp HostFirewallRuleProtocol = "tcp"
	HostFirewallRuleProtocol_Udp HostFirewallRuleProtocol = "udp"
)

type HostRuntimeInfoNetStackInstanceRuntimeInfoState string

const (
	HostRuntimeInfoNetStackInstanceRuntimeInfoState_Inactive     HostRuntimeInfoNetStackInstanceRuntimeInfoState = "inactive"
	HostRuntimeInfoNetStackInstanceRuntimeInfoState_Active       HostRuntimeInfoNetStackInstanceRuntimeInfoState = "active"
	HostRuntimeInfoNetStackInstanceRuntimeInfoState_Deactivating HostRuntimeInfoNetStackInstanceRuntimeInfoState = "deactivating"
	HostRuntimeInfoNetStackInstanceRuntimeInfoState_Activating   HostRuntimeInfoNetStackInstanceRuntimeInfoState = "activating"
)

type ScsiLunType string

const (
	ScsiLunType_Disk                   ScsiLunType = "disk"
	ScsiLunType_Tape                   ScsiLunType = "tape"
	ScsiLunType_Printer                ScsiLunType = "printer"
	ScsiLunType_Processor              ScsiLunType = "processor"
	ScsiLunType_Worm                   ScsiLunType = "worm"
	ScsiLunType_Cdrom                  ScsiLunType = "cdrom"
	ScsiLunType_Scanner                ScsiLunType = "scanner"
	ScsiLunType_OpticalDevice          ScsiLunType = "opticalDevice"
	ScsiLunType_MediaChanger           ScsiLunType = "mediaChanger"
	ScsiLunType_Communications         ScsiLunType = "communications"
	ScsiLunType_StorageArrayController ScsiLunType = "storageArrayController"
	ScsiLunType_Enclosure              ScsiLunType = "enclosure"
	ScsiLunType_Unknown                ScsiLunType = "unknown"
)

type ScsiLunState string

const (
	ScsiLunState_UnknownState      ScsiLunState = "unknownState"
	ScsiLunState_Ok                ScsiLunState = "ok"
	ScsiLunState_Error             ScsiLunState = "error"
	ScsiLunState_Off               ScsiLunState = "off"
	ScsiLunState_Quiesced          ScsiLunState = "quiesced"
	ScsiLunState_Degraded          ScsiLunState = "degraded"
	ScsiLunState_LostCommunication ScsiLunState = "lostCommunication"
	ScsiLunState_Timeout           ScsiLunState = "timeout"
)

type ScsiLunDescriptorQuality string

const (
	ScsiLunDescriptorQuality_HighQuality    ScsiLunDescriptorQuality = "highQuality"
	ScsiLunDescriptorQuality_MediumQuality  ScsiLunDescriptorQuality = "mediumQuality"
	ScsiLunDescriptorQuality_LowQuality     ScsiLunDescriptorQuality = "lowQuality"
	ScsiLunDescriptorQuality_UnknownQuality ScsiLunDescriptorQuality = "unknownQuality"
)

type ScsiLunVStorageSupportStatus string

const (
	ScsiLunVStorageSupportStatus_VStorageSupported   ScsiLunVStorageSupportStatus = "vStorageSupported"
	ScsiLunVStorageSupportStatus_VStorageUnsupported ScsiLunVStorageSupportStatus = "vStorageUnsupported"
	ScsiLunVStorageSupportStatus_VStorageUnknown     ScsiLunVStorageSupportStatus = "vStorageUnknown"
)

type HostServicePolicy string

const (
	HostServicePolicy_On        HostServicePolicy = "on"
	HostServicePolicy_Automatic HostServicePolicy = "automatic"
	HostServicePolicy_Off       HostServicePolicy = "off"
)

type HostSnmpAgentCapability string

const (
	HostSnmpAgentCapability_COMPLETE      HostSnmpAgentCapability = "COMPLETE"
	HostSnmpAgentCapability_DIAGNOSTICS   HostSnmpAgentCapability = "DIAGNOSTICS"
	HostSnmpAgentCapability_CONFIGURATION HostSnmpAgentCapability = "CONFIGURATION"
)

type HostSystemIdentificationInfoIdentifier string

const (
	HostSystemIdentificationInfoIdentifier_AssetTag          HostSystemIdentificationInfoIdentifier = "AssetTag"
	HostSystemIdentificationInfoIdentifier_ServiceTag        HostSystemIdentificationInfoIdentifier = "ServiceTag"
	HostSystemIdentificationInfoIdentifier_OemSpecificString HostSystemIdentificationInfoIdentifier = "OemSpecificString"
)

type HostDigestInfoDigestMethodType string

const (
	HostDigestInfoDigestMethodType_SHA1 HostDigestInfoDigestMethodType = "SHA1"
	HostDigestInfoDigestMethodType_MD5  HostDigestInfoDigestMethodType = "MD5"
)

type HostUnresolvedVmfsExtentUnresolvedReason string

const (
	HostUnresolvedVmfsExtentUnresolvedReason_DiskIdMismatch HostUnresolvedVmfsExtentUnresolvedReason = "diskIdMismatch"
	HostUnresolvedVmfsExtentUnresolvedReason_UuidConflict   HostUnresolvedVmfsExtentUnresolvedReason = "uuidConflict"
)

type HostUnresolvedVmfsResolutionSpecVmfsUuidResolution string

const (
	HostUnresolvedVmfsResolutionSpecVmfsUuidResolution_Resignature HostUnresolvedVmfsResolutionSpecVmfsUuidResolution = "resignature"
	HostUnresolvedVmfsResolutionSpecVmfsUuidResolution_ForceMount  HostUnresolvedVmfsResolutionSpecVmfsUuidResolution = "forceMount"
)

type HostVirtualNicManagerNicType string

const (
	HostVirtualNicManagerNicType_Vmotion               HostVirtualNicManagerNicType = "vmotion"
	HostVirtualNicManagerNicType_FaultToleranceLogging HostVirtualNicManagerNicType = "faultToleranceLogging"
	HostVirtualNicManagerNicType_VSphereReplication    HostVirtualNicManagerNicType = "vSphereReplication"
	HostVirtualNicManagerNicType_Management            HostVirtualNicManagerNicType = "management"
	HostVirtualNicManagerNicType_Vsan                  HostVirtualNicManagerNicType = "vsan"
)

type HostVmciAccessManagerMode string

const (
	HostVmciAccessManagerMode_Grant   HostVmciAccessManagerMode = "grant"
	HostVmciAccessManagerMode_Replace HostVmciAccessManagerMode = "replace"
	HostVmciAccessManagerMode_Revoke  HostVmciAccessManagerMode = "revoke"
)

type NetIpConfigInfoIpAddressOrigin string

const (
	NetIpConfigInfoIpAddressOrigin_Other     NetIpConfigInfoIpAddressOrigin = "other"
	NetIpConfigInfoIpAddressOrigin_Manual    NetIpConfigInfoIpAddressOrigin = "manual"
	NetIpConfigInfoIpAddressOrigin_Dhcp      NetIpConfigInfoIpAddressOrigin = "dhcp"
	NetIpConfigInfoIpAddressOrigin_Linklayer NetIpConfigInfoIpAddressOrigin = "linklayer"
	NetIpConfigInfoIpAddressOrigin_Random    NetIpConfigInfoIpAddressOrigin = "random"
)

type NetIpConfigInfoIpAddressStatus string

const (
	NetIpConfigInfoIpAddressStatus_Preferred    NetIpConfigInfoIpAddressStatus = "preferred"
	NetIpConfigInfoIpAddressStatus_Deprecated   NetIpConfigInfoIpAddressStatus = "deprecated"
	NetIpConfigInfoIpAddressStatus_Invalid      NetIpConfigInfoIpAddressStatus = "invalid"
	NetIpConfigInfoIpAddressStatus_Inaccessible NetIpConfigInfoIpAddressStatus = "inaccessible"
	NetIpConfigInfoIpAddressStatus_Unknown      NetIpConfigInfoIpAddressStatus = "unknown"
	NetIpConfigInfoIpAddressStatus_Tentative    NetIpConfigInfoIpAddressStatus = "tentative"
	NetIpConfigInfoIpAddressStatus_Duplicate    NetIpConfigInfoIpAddressStatus = "duplicate"
)

type NetIpStackInfoEntryType string

const (
	NetIpStackInfoEntryType_Other   NetIpStackInfoEntryType = "other"
	NetIpStackInfoEntryType_Invalid NetIpStackInfoEntryType = "invalid"
	NetIpStackInfoEntryType_Dynamic NetIpStackInfoEntryType = "dynamic"
	NetIpStackInfoEntryType_Manual  NetIpStackInfoEntryType = "manual"
)

type NetIpStackInfoPreference string

const (
	NetIpStackInfoPreference_Reserved NetIpStackInfoPreference = "reserved"
	NetIpStackInfoPreference_Low      NetIpStackInfoPreference = "low"
	NetIpStackInfoPreference_Medium   NetIpStackInfoPreference = "medium"
	NetIpStackInfoPreference_High     NetIpStackInfoPreference = "high"
)

type NetBIOSConfigInfoMode string

const (
	NetBIOSConfigInfoMode_Unknown        NetBIOSConfigInfoMode = "unknown"
	NetBIOSConfigInfoMode_Enabled        NetBIOSConfigInfoMode = "enabled"
	NetBIOSConfigInfoMode_Disabled       NetBIOSConfigInfoMode = "disabled"
	NetBIOSConfigInfoMode_EnabledViaDHCP NetBIOSConfigInfoMode = "enabledViaDHCP"
)

type ArrayUpdateOperation string

const (
	ArrayUpdateOperation_Add    ArrayUpdateOperation = "add"
	ArrayUpdateOperation_Remove ArrayUpdateOperation = "remove"
	ArrayUpdateOperation_Edit   ArrayUpdateOperation = "edit"
)

type ComplianceResultStatus string

const (
	ComplianceResultStatus_Compliant    ComplianceResultStatus = "compliant"
	ComplianceResultStatus_NonCompliant ComplianceResultStatus = "nonCompliant"
	ComplianceResultStatus_Unknown      ComplianceResultStatus = "unknown"
)

type ProfileNumericComparator string

const (
	ProfileNumericComparator_LessThan         ProfileNumericComparator = "lessThan"
	ProfileNumericComparator_LessThanEqual    ProfileNumericComparator = "lessThanEqual"
	ProfileNumericComparator_Equal            ProfileNumericComparator = "equal"
	ProfileNumericComparator_NotEqual         ProfileNumericComparator = "notEqual"
	ProfileNumericComparator_GreaterThanEqual ProfileNumericComparator = "greaterThanEqual"
	ProfileNumericComparator_GreaterThan      ProfileNumericComparator = "greaterThan"
)

type ClusterProfileServiceType string

const (
	ClusterProfileServiceType_DRS ClusterProfileServiceType = "DRS"
	ClusterProfileServiceType_HA  ClusterProfileServiceType = "HA"
	ClusterProfileServiceType_DPM ClusterProfileServiceType = "DPM"
	ClusterProfileServiceType_FT  ClusterProfileServiceType = "FT"
)

type ProfileExecuteResultStatus string

const (
	ProfileExecuteResultStatus_Success   ProfileExecuteResultStatus = "success"
	ProfileExecuteResultStatus_NeedInput ProfileExecuteResultStatus = "needInput"
	ProfileExecuteResultStatus_Error     ProfileExecuteResultStatus = "error"
)

type HostProfileManagerAnswerFileStatus string

const (
	HostProfileManagerAnswerFileStatus_Valid   HostProfileManagerAnswerFileStatus = "valid"
	HostProfileManagerAnswerFileStatus_Invalid HostProfileManagerAnswerFileStatus = "invalid"
	HostProfileManagerAnswerFileStatus_Unknown HostProfileManagerAnswerFileStatus = "unknown"
)

type DayOfWeek string

const (
	DayOfWeek_Sunday    DayOfWeek = "sunday"
	DayOfWeek_Monday    DayOfWeek = "monday"
	DayOfWeek_Tuesday   DayOfWeek = "tuesday"
	DayOfWeek_Wednesday DayOfWeek = "wednesday"
	DayOfWeek_Thursday  DayOfWeek = "thursday"
	DayOfWeek_Friday    DayOfWeek = "friday"
	DayOfWeek_Saturday  DayOfWeek = "saturday"
)

type WeekOfMonth string

const (
	WeekOfMonth_First  WeekOfMonth = "first"
	WeekOfMonth_Second WeekOfMonth = "second"
	WeekOfMonth_Third  WeekOfMonth = "third"
	WeekOfMonth_Fourth WeekOfMonth = "fourth"
	WeekOfMonth_Last   WeekOfMonth = "last"
)

type StorageDrsPodConfigInfoBehavior string

const (
	StorageDrsPodConfigInfoBehavior_Manual    StorageDrsPodConfigInfoBehavior = "manual"
	StorageDrsPodConfigInfoBehavior_Automated StorageDrsPodConfigInfoBehavior = "automated"
)

type StoragePlacementSpecPlacementType string

const (
	StoragePlacementSpecPlacementType_Create      StoragePlacementSpecPlacementType = "create"
	StoragePlacementSpecPlacementType_Reconfigure StoragePlacementSpecPlacementType = "reconfigure"
	StoragePlacementSpecPlacementType_Relocate    StoragePlacementSpecPlacementType = "relocate"
	StoragePlacementSpecPlacementType_Clone       StoragePlacementSpecPlacementType = "clone"
)

type VAppCloneSpecProvisioningType string

const (
	VAppCloneSpecProvisioningType_SameAsSource VAppCloneSpecProvisioningType = "sameAsSource"
	VAppCloneSpecProvisioningType_Thin         VAppCloneSpecProvisioningType = "thin"
	VAppCloneSpecProvisioningType_Thick        VAppCloneSpecProvisioningType = "thick"
)

type VAppAutoStartAction string

const (
	VAppAutoStartAction_None          VAppAutoStartAction = "none"
	VAppAutoStartAction_PowerOn       VAppAutoStartAction = "powerOn"
	VAppAutoStartAction_PowerOff      VAppAutoStartAction = "powerOff"
	VAppAutoStartAction_GuestShutdown VAppAutoStartAction = "guestShutdown"
	VAppAutoStartAction_Suspend       VAppAutoStartAction = "suspend"
)

type VAppIPAssignmentInfoIpAllocationPolicy string

const (
	VAppIPAssignmentInfoIpAllocationPolicy_DhcpPolicy           VAppIPAssignmentInfoIpAllocationPolicy = "dhcpPolicy"
	VAppIPAssignmentInfoIpAllocationPolicy_TransientPolicy      VAppIPAssignmentInfoIpAllocationPolicy = "transientPolicy"
	VAppIPAssignmentInfoIpAllocationPolicy_FixedPolicy          VAppIPAssignmentInfoIpAllocationPolicy = "fixedPolicy"
	VAppIPAssignmentInfoIpAllocationPolicy_FixedAllocatedPolicy VAppIPAssignmentInfoIpAllocationPolicy = "fixedAllocatedPolicy"
)

type VAppIPAssignmentInfoAllocationSchemes string

const (
	VAppIPAssignmentInfoAllocationSchemes_Dhcp   VAppIPAssignmentInfoAllocationSchemes = "dhcp"
	VAppIPAssignmentInfoAllocationSchemes_Ovfenv VAppIPAssignmentInfoAllocationSchemes = "ovfenv"
)

type VAppIPAssignmentInfoProtocols string

const (
	VAppIPAssignmentInfoProtocols_IPv4 VAppIPAssignmentInfoProtocols = "IPv4"
	VAppIPAssignmentInfoProtocols_IPv6 VAppIPAssignmentInfoProtocols = "IPv6"
)

type VirtualMachineConfigInfoNpivWwnType string

const (
	VirtualMachineConfigInfoNpivWwnType_Vc       VirtualMachineConfigInfoNpivWwnType = "vc"
	VirtualMachineConfigInfoNpivWwnType_Host     VirtualMachineConfigInfoNpivWwnType = "host"
	VirtualMachineConfigInfoNpivWwnType_External VirtualMachineConfigInfoNpivWwnType = "external"
)

type VirtualMachineConfigInfoSwapPlacementType string

const (
	VirtualMachineConfigInfoSwapPlacementType_Inherit     VirtualMachineConfigInfoSwapPlacementType = "inherit"
	VirtualMachineConfigInfoSwapPlacementType_VmDirectory VirtualMachineConfigInfoSwapPlacementType = "vmDirectory"
	VirtualMachineConfigInfoSwapPlacementType_HostLocal   VirtualMachineConfigInfoSwapPlacementType = "hostLocal"
)

type VirtualMachineConfigSpecNpivWwnOp string

const (
	VirtualMachineConfigSpecNpivWwnOp_Generate VirtualMachineConfigSpecNpivWwnOp = "generate"
	VirtualMachineConfigSpecNpivWwnOp_Set      VirtualMachineConfigSpecNpivWwnOp = "set"
	VirtualMachineConfigSpecNpivWwnOp_Remove   VirtualMachineConfigSpecNpivWwnOp = "remove"
	VirtualMachineConfigSpecNpivWwnOp_Extend   VirtualMachineConfigSpecNpivWwnOp = "extend"
)

type VirtualMachinePowerOpType string

const (
	VirtualMachinePowerOpType_Soft   VirtualMachinePowerOpType = "soft"
	VirtualMachinePowerOpType_Hard   VirtualMachinePowerOpType = "hard"
	VirtualMachinePowerOpType_Preset VirtualMachinePowerOpType = "preset"
)

type VirtualMachineStandbyActionType string

const (
	VirtualMachineStandbyActionType_Checkpoint     VirtualMachineStandbyActionType = "checkpoint"
	VirtualMachineStandbyActionType_PowerOnSuspend VirtualMachineStandbyActionType = "powerOnSuspend"
)

type VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm string

const (
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptIncompatibleGuest                      VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptIncompatibleGuest"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptIncompatibleGuestDriver                VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptIncompatibleGuestDriver"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptIncompatibleAdapterType                VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptIncompatibleAdapterType"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptDisabledOrDisconnectedAdapter          VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptDisabledOrDisconnectedAdapter"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptIncompatibleAdapterFeatures            VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptIncompatibleAdapterFeatures"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptIncompatibleBackingType                VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptIncompatibleBackingType"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptInsufficientMemoryReservation          VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptInsufficientMemoryReservation"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptFaultToleranceOrRecordReplayConfigured VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptFaultToleranceOrRecordReplayConfigured"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptConflictingIOChainConfigured           VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptConflictingIOChainConfigured"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptMonitorBlocks                          VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptMonitorBlocks"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptConflictingOperationInProgress         VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptConflictingOperationInProgress"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptRuntimeError                           VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptRuntimeError"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptOutOfIntrVector                        VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptOutOfIntrVector"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_VmNptVMCIActive                             VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm = "vmNptVMCIActive"
)

type VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther string

const (
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther_VmNptIncompatibleHost    VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther = "vmNptIncompatibleHost"
	VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther_VmNptIncompatibleNetwork VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther = "vmNptIncompatibleNetwork"
)

type VirtualMachineFileLayoutExFileType string

const (
	VirtualMachineFileLayoutExFileType_Config               VirtualMachineFileLayoutExFileType = "config"
	VirtualMachineFileLayoutExFileType_ExtendedConfig       VirtualMachineFileLayoutExFileType = "extendedConfig"
	VirtualMachineFileLayoutExFileType_DiskDescriptor       VirtualMachineFileLayoutExFileType = "diskDescriptor"
	VirtualMachineFileLayoutExFileType_DiskExtent           VirtualMachineFileLayoutExFileType = "diskExtent"
	VirtualMachineFileLayoutExFileType_DigestDescriptor     VirtualMachineFileLayoutExFileType = "digestDescriptor"
	VirtualMachineFileLayoutExFileType_DigestExtent         VirtualMachineFileLayoutExFileType = "digestExtent"
	VirtualMachineFileLayoutExFileType_DiskReplicationState VirtualMachineFileLayoutExFileType = "diskReplicationState"
	VirtualMachineFileLayoutExFileType_Log                  VirtualMachineFileLayoutExFileType = "log"
	VirtualMachineFileLayoutExFileType_Stat                 VirtualMachineFileLayoutExFileType = "stat"
	VirtualMachineFileLayoutExFileType_NamespaceData        VirtualMachineFileLayoutExFileType = "namespaceData"
	VirtualMachineFileLayoutExFileType_Nvram                VirtualMachineFileLayoutExFileType = "nvram"
	VirtualMachineFileLayoutExFileType_SnapshotData         VirtualMachineFileLayoutExFileType = "snapshotData"
	VirtualMachineFileLayoutExFileType_SnapshotList         VirtualMachineFileLayoutExFileType = "snapshotList"
	VirtualMachineFileLayoutExFileType_SnapshotManifestList VirtualMachineFileLayoutExFileType = "snapshotManifestList"
	VirtualMachineFileLayoutExFileType_Suspend              VirtualMachineFileLayoutExFileType = "suspend"
	VirtualMachineFileLayoutExFileType_Swap                 VirtualMachineFileLayoutExFileType = "swap"
	VirtualMachineFileLayoutExFileType_Uwswap               VirtualMachineFileLayoutExFileType = "uwswap"
	VirtualMachineFileLayoutExFileType_Core                 VirtualMachineFileLayoutExFileType = "core"
	VirtualMachineFileLayoutExFileType_Screenshot           VirtualMachineFileLayoutExFileType = "screenshot"
)

type VirtualMachineHtSharing string

const (
	VirtualMachineHtSharing_Any      VirtualMachineHtSharing = "any"
	VirtualMachineHtSharing_None     VirtualMachineHtSharing = "none"
	VirtualMachineHtSharing_Internal VirtualMachineHtSharing = "internal"
)

type VirtualMachinePowerOffBehavior string

const (
	VirtualMachinePowerOffBehavior_PowerOff VirtualMachinePowerOffBehavior = "powerOff"
	VirtualMachinePowerOffBehavior_Revert   VirtualMachinePowerOffBehavior = "revert"
	VirtualMachinePowerOffBehavior_Prompt   VirtualMachinePowerOffBehavior = "prompt"
)

type VirtualMachineFlagInfoMonitorType string

const (
	VirtualMachineFlagInfoMonitorType_Release VirtualMachineFlagInfoMonitorType = "release"
	VirtualMachineFlagInfoMonitorType_Debug   VirtualMachineFlagInfoMonitorType = "debug"
	VirtualMachineFlagInfoMonitorType_Stats   VirtualMachineFlagInfoMonitorType = "stats"
)

type VirtualMachineFlagInfoVirtualMmuUsage string

const (
	VirtualMachineFlagInfoVirtualMmuUsage_Automatic VirtualMachineFlagInfoVirtualMmuUsage = "automatic"
	VirtualMachineFlagInfoVirtualMmuUsage_On        VirtualMachineFlagInfoVirtualMmuUsage = "on"
	VirtualMachineFlagInfoVirtualMmuUsage_Off       VirtualMachineFlagInfoVirtualMmuUsage = "off"
)

type VirtualMachineFlagInfoVirtualExecUsage string

const (
	VirtualMachineFlagInfoVirtualExecUsage_HvAuto VirtualMachineFlagInfoVirtualExecUsage = "hvAuto"
	VirtualMachineFlagInfoVirtualExecUsage_HvOn   VirtualMachineFlagInfoVirtualExecUsage = "hvOn"
	VirtualMachineFlagInfoVirtualExecUsage_HvOff  VirtualMachineFlagInfoVirtualExecUsage = "hvOff"
)

type VirtualMachineToolsStatus string

const (
	VirtualMachineToolsStatus_ToolsNotInstalled VirtualMachineToolsStatus = "toolsNotInstalled"
	VirtualMachineToolsStatus_ToolsNotRunning   VirtualMachineToolsStatus = "toolsNotRunning"
	VirtualMachineToolsStatus_ToolsOld          VirtualMachineToolsStatus = "toolsOld"
	VirtualMachineToolsStatus_ToolsOk           VirtualMachineToolsStatus = "toolsOk"
)

type VirtualMachineToolsVersionStatus string

const (
	VirtualMachineToolsVersionStatus_GuestToolsNotInstalled VirtualMachineToolsVersionStatus = "guestToolsNotInstalled"
	VirtualMachineToolsVersionStatus_GuestToolsNeedUpgrade  VirtualMachineToolsVersionStatus = "guestToolsNeedUpgrade"
	VirtualMachineToolsVersionStatus_GuestToolsCurrent      VirtualMachineToolsVersionStatus = "guestToolsCurrent"
	VirtualMachineToolsVersionStatus_GuestToolsUnmanaged    VirtualMachineToolsVersionStatus = "guestToolsUnmanaged"
	VirtualMachineToolsVersionStatus_GuestToolsTooOld       VirtualMachineToolsVersionStatus = "guestToolsTooOld"
	VirtualMachineToolsVersionStatus_GuestToolsSupportedOld VirtualMachineToolsVersionStatus = "guestToolsSupportedOld"
	VirtualMachineToolsVersionStatus_GuestToolsSupportedNew VirtualMachineToolsVersionStatus = "guestToolsSupportedNew"
	VirtualMachineToolsVersionStatus_GuestToolsTooNew       VirtualMachineToolsVersionStatus = "guestToolsTooNew"
	VirtualMachineToolsVersionStatus_GuestToolsBlacklisted  VirtualMachineToolsVersionStatus = "guestToolsBlacklisted"
)

type VirtualMachineToolsRunningStatus string

const (
	VirtualMachineToolsRunningStatus_GuestToolsNotRunning       VirtualMachineToolsRunningStatus = "guestToolsNotRunning"
	VirtualMachineToolsRunningStatus_GuestToolsRunning          VirtualMachineToolsRunningStatus = "guestToolsRunning"
	VirtualMachineToolsRunningStatus_GuestToolsExecutingScripts VirtualMachineToolsRunningStatus = "guestToolsExecutingScripts"
)

type VirtualMachineGuestState string

const (
	VirtualMachineGuestState_Running      VirtualMachineGuestState = "running"
	VirtualMachineGuestState_ShuttingDown VirtualMachineGuestState = "shuttingDown"
	VirtualMachineGuestState_Resetting    VirtualMachineGuestState = "resetting"
	VirtualMachineGuestState_Standby      VirtualMachineGuestState = "standby"
	VirtualMachineGuestState_NotRunning   VirtualMachineGuestState = "notRunning"
	VirtualMachineGuestState_Unknown      VirtualMachineGuestState = "unknown"
)

type GuestInfoAppStateType string

const (
	GuestInfoAppStateType_None              GuestInfoAppStateType = "none"
	GuestInfoAppStateType_AppStateOk        GuestInfoAppStateType = "appStateOk"
	GuestInfoAppStateType_AppStateNeedReset GuestInfoAppStateType = "appStateNeedReset"
)

type VirtualMachineGuestOsFamily string

const (
	VirtualMachineGuestOsFamily_WindowsGuest      VirtualMachineGuestOsFamily = "windowsGuest"
	VirtualMachineGuestOsFamily_LinuxGuest        VirtualMachineGuestOsFamily = "linuxGuest"
	VirtualMachineGuestOsFamily_NetwareGuest      VirtualMachineGuestOsFamily = "netwareGuest"
	VirtualMachineGuestOsFamily_SolarisGuest      VirtualMachineGuestOsFamily = "solarisGuest"
	VirtualMachineGuestOsFamily_DarwinGuestFamily VirtualMachineGuestOsFamily = "darwinGuestFamily"
	VirtualMachineGuestOsFamily_OtherGuestFamily  VirtualMachineGuestOsFamily = "otherGuestFamily"
)

type VirtualMachineGuestOsIdentifier string

const (
	VirtualMachineGuestOsIdentifier_DosGuest                VirtualMachineGuestOsIdentifier = "dosGuest"
	VirtualMachineGuestOsIdentifier_Win31Guest              VirtualMachineGuestOsIdentifier = "win31Guest"
	VirtualMachineGuestOsIdentifier_Win95Guest              VirtualMachineGuestOsIdentifier = "win95Guest"
	VirtualMachineGuestOsIdentifier_Win98Guest              VirtualMachineGuestOsIdentifier = "win98Guest"
	VirtualMachineGuestOsIdentifier_WinMeGuest              VirtualMachineGuestOsIdentifier = "winMeGuest"
	VirtualMachineGuestOsIdentifier_WinNTGuest              VirtualMachineGuestOsIdentifier = "winNTGuest"
	VirtualMachineGuestOsIdentifier_Win2000ProGuest         VirtualMachineGuestOsIdentifier = "win2000ProGuest"
	VirtualMachineGuestOsIdentifier_Win2000ServGuest        VirtualMachineGuestOsIdentifier = "win2000ServGuest"
	VirtualMachineGuestOsIdentifier_Win2000AdvServGuest     VirtualMachineGuestOsIdentifier = "win2000AdvServGuest"
	VirtualMachineGuestOsIdentifier_WinXPHomeGuest          VirtualMachineGuestOsIdentifier = "winXPHomeGuest"
	VirtualMachineGuestOsIdentifier_WinXPProGuest           VirtualMachineGuestOsIdentifier = "winXPProGuest"
	VirtualMachineGuestOsIdentifier_WinXPPro64Guest         VirtualMachineGuestOsIdentifier = "winXPPro64Guest"
	VirtualMachineGuestOsIdentifier_WinNetWebGuest          VirtualMachineGuestOsIdentifier = "winNetWebGuest"
	VirtualMachineGuestOsIdentifier_WinNetStandardGuest     VirtualMachineGuestOsIdentifier = "winNetStandardGuest"
	VirtualMachineGuestOsIdentifier_WinNetEnterpriseGuest   VirtualMachineGuestOsIdentifier = "winNetEnterpriseGuest"
	VirtualMachineGuestOsIdentifier_WinNetDatacenterGuest   VirtualMachineGuestOsIdentifier = "winNetDatacenterGuest"
	VirtualMachineGuestOsIdentifier_WinNetBusinessGuest     VirtualMachineGuestOsIdentifier = "winNetBusinessGuest"
	VirtualMachineGuestOsIdentifier_WinNetStandard64Guest   VirtualMachineGuestOsIdentifier = "winNetStandard64Guest"
	VirtualMachineGuestOsIdentifier_WinNetEnterprise64Guest VirtualMachineGuestOsIdentifier = "winNetEnterprise64Guest"
	VirtualMachineGuestOsIdentifier_WinLonghornGuest        VirtualMachineGuestOsIdentifier = "winLonghornGuest"
	VirtualMachineGuestOsIdentifier_WinLonghorn64Guest      VirtualMachineGuestOsIdentifier = "winLonghorn64Guest"
	VirtualMachineGuestOsIdentifier_WinNetDatacenter64Guest VirtualMachineGuestOsIdentifier = "winNetDatacenter64Guest"
	VirtualMachineGuestOsIdentifier_WinVistaGuest           VirtualMachineGuestOsIdentifier = "winVistaGuest"
	VirtualMachineGuestOsIdentifier_WinVista64Guest         VirtualMachineGuestOsIdentifier = "winVista64Guest"
	VirtualMachineGuestOsIdentifier_Windows7Guest           VirtualMachineGuestOsIdentifier = "windows7Guest"
	VirtualMachineGuestOsIdentifier_Windows7_64Guest        VirtualMachineGuestOsIdentifier = "windows7_64Guest"
	VirtualMachineGuestOsIdentifier_Windows7Server64Guest   VirtualMachineGuestOsIdentifier = "windows7Server64Guest"
	VirtualMachineGuestOsIdentifier_Windows8Guest           VirtualMachineGuestOsIdentifier = "windows8Guest"
	VirtualMachineGuestOsIdentifier_Windows8_64Guest        VirtualMachineGuestOsIdentifier = "windows8_64Guest"
	VirtualMachineGuestOsIdentifier_Windows8Server64Guest   VirtualMachineGuestOsIdentifier = "windows8Server64Guest"
	VirtualMachineGuestOsIdentifier_WindowsHyperVGuest      VirtualMachineGuestOsIdentifier = "windowsHyperVGuest"
	VirtualMachineGuestOsIdentifier_FreebsdGuest            VirtualMachineGuestOsIdentifier = "freebsdGuest"
	VirtualMachineGuestOsIdentifier_Freebsd64Guest          VirtualMachineGuestOsIdentifier = "freebsd64Guest"
	VirtualMachineGuestOsIdentifier_RedhatGuest             VirtualMachineGuestOsIdentifier = "redhatGuest"
	VirtualMachineGuestOsIdentifier_Rhel2Guest              VirtualMachineGuestOsIdentifier = "rhel2Guest"
	VirtualMachineGuestOsIdentifier_Rhel3Guest              VirtualMachineGuestOsIdentifier = "rhel3Guest"
	VirtualMachineGuestOsIdentifier_Rhel3_64Guest           VirtualMachineGuestOsIdentifier = "rhel3_64Guest"
	VirtualMachineGuestOsIdentifier_Rhel4Guest              VirtualMachineGuestOsIdentifier = "rhel4Guest"
	VirtualMachineGuestOsIdentifier_Rhel4_64Guest           VirtualMachineGuestOsIdentifier = "rhel4_64Guest"
	VirtualMachineGuestOsIdentifier_Rhel5Guest              VirtualMachineGuestOsIdentifier = "rhel5Guest"
	VirtualMachineGuestOsIdentifier_Rhel5_64Guest           VirtualMachineGuestOsIdentifier = "rhel5_64Guest"
	VirtualMachineGuestOsIdentifier_Rhel6Guest              VirtualMachineGuestOsIdentifier = "rhel6Guest"
	VirtualMachineGuestOsIdentifier_Rhel6_64Guest           VirtualMachineGuestOsIdentifier = "rhel6_64Guest"
	VirtualMachineGuestOsIdentifier_Rhel7Guest              VirtualMachineGuestOsIdentifier = "rhel7Guest"
	VirtualMachineGuestOsIdentifier_Rhel7_64Guest           VirtualMachineGuestOsIdentifier = "rhel7_64Guest"
	VirtualMachineGuestOsIdentifier_CentosGuest             VirtualMachineGuestOsIdentifier = "centosGuest"
	VirtualMachineGuestOsIdentifier_Centos64Guest           VirtualMachineGuestOsIdentifier = "centos64Guest"
	VirtualMachineGuestOsIdentifier_OracleLinuxGuest        VirtualMachineGuestOsIdentifier = "oracleLinuxGuest"
	VirtualMachineGuestOsIdentifier_OracleLinux64Guest      VirtualMachineGuestOsIdentifier = "oracleLinux64Guest"
	VirtualMachineGuestOsIdentifier_SuseGuest               VirtualMachineGuestOsIdentifier = "suseGuest"
	VirtualMachineGuestOsIdentifier_Suse64Guest             VirtualMachineGuestOsIdentifier = "suse64Guest"
	VirtualMachineGuestOsIdentifier_SlesGuest               VirtualMachineGuestOsIdentifier = "slesGuest"
	VirtualMachineGuestOsIdentifier_Sles64Guest             VirtualMachineGuestOsIdentifier = "sles64Guest"
	VirtualMachineGuestOsIdentifier_Sles10Guest             VirtualMachineGuestOsIdentifier = "sles10Guest"
	VirtualMachineGuestOsIdentifier_Sles10_64Guest          VirtualMachineGuestOsIdentifier = "sles10_64Guest"
	VirtualMachineGuestOsIdentifier_Sles11Guest             VirtualMachineGuestOsIdentifier = "sles11Guest"
	VirtualMachineGuestOsIdentifier_Sles11_64Guest          VirtualMachineGuestOsIdentifier = "sles11_64Guest"
	VirtualMachineGuestOsIdentifier_Sles12Guest             VirtualMachineGuestOsIdentifier = "sles12Guest"
	VirtualMachineGuestOsIdentifier_Sles12_64Guest          VirtualMachineGuestOsIdentifier = "sles12_64Guest"
	VirtualMachineGuestOsIdentifier_Nld9Guest               VirtualMachineGuestOsIdentifier = "nld9Guest"
	VirtualMachineGuestOsIdentifier_OesGuest                VirtualMachineGuestOsIdentifier = "oesGuest"
	VirtualMachineGuestOsIdentifier_SjdsGuest               VirtualMachineGuestOsIdentifier = "sjdsGuest"
	VirtualMachineGuestOsIdentifier_MandrakeGuest           VirtualMachineGuestOsIdentifier = "mandrakeGuest"
	VirtualMachineGuestOsIdentifier_MandrivaGuest           VirtualMachineGuestOsIdentifier = "mandrivaGuest"
	VirtualMachineGuestOsIdentifier_Mandriva64Guest         VirtualMachineGuestOsIdentifier = "mandriva64Guest"
	VirtualMachineGuestOsIdentifier_TurboLinuxGuest         VirtualMachineGuestOsIdentifier = "turboLinuxGuest"
	VirtualMachineGuestOsIdentifier_TurboLinux64Guest       VirtualMachineGuestOsIdentifier = "turboLinux64Guest"
	VirtualMachineGuestOsIdentifier_UbuntuGuest             VirtualMachineGuestOsIdentifier = "ubuntuGuest"
	VirtualMachineGuestOsIdentifier_Ubuntu64Guest           VirtualMachineGuestOsIdentifier = "ubuntu64Guest"
	VirtualMachineGuestOsIdentifier_Debian4Guest            VirtualMachineGuestOsIdentifier = "debian4Guest"
	VirtualMachineGuestOsIdentifier_Debian4_64Guest         VirtualMachineGuestOsIdentifier = "debian4_64Guest"
	VirtualMachineGuestOsIdentifier_Debian5Guest            VirtualMachineGuestOsIdentifier = "debian5Guest"
	VirtualMachineGuestOsIdentifier_Debian5_64Guest         VirtualMachineGuestOsIdentifier = "debian5_64Guest"
	VirtualMachineGuestOsIdentifier_Debian6Guest            VirtualMachineGuestOsIdentifier = "debian6Guest"
	VirtualMachineGuestOsIdentifier_Debian6_64Guest         VirtualMachineGuestOsIdentifier = "debian6_64Guest"
	VirtualMachineGuestOsIdentifier_Debian7Guest            VirtualMachineGuestOsIdentifier = "debian7Guest"
	VirtualMachineGuestOsIdentifier_Debian7_64Guest         VirtualMachineGuestOsIdentifier = "debian7_64Guest"
	VirtualMachineGuestOsIdentifier_Asianux3Guest           VirtualMachineGuestOsIdentifier = "asianux3Guest"
	VirtualMachineGuestOsIdentifier_Asianux3_64Guest        VirtualMachineGuestOsIdentifier = "asianux3_64Guest"
	VirtualMachineGuestOsIdentifier_Asianux4Guest           VirtualMachineGuestOsIdentifier = "asianux4Guest"
	VirtualMachineGuestOsIdentifier_Asianux4_64Guest        VirtualMachineGuestOsIdentifier = "asianux4_64Guest"
	VirtualMachineGuestOsIdentifier_OpensuseGuest           VirtualMachineGuestOsIdentifier = "opensuseGuest"
	VirtualMachineGuestOsIdentifier_Opensuse64Guest         VirtualMachineGuestOsIdentifier = "opensuse64Guest"
	VirtualMachineGuestOsIdentifier_FedoraGuest             VirtualMachineGuestOsIdentifier = "fedoraGuest"
	VirtualMachineGuestOsIdentifier_Fedora64Guest           VirtualMachineGuestOsIdentifier = "fedora64Guest"
	VirtualMachineGuestOsIdentifier_Other24xLinuxGuest      VirtualMachineGuestOsIdentifier = "other24xLinuxGuest"
	VirtualMachineGuestOsIdentifier_Other26xLinuxGuest      VirtualMachineGuestOsIdentifier = "other26xLinuxGuest"
	VirtualMachineGuestOsIdentifier_OtherLinuxGuest         VirtualMachineGuestOsIdentifier = "otherLinuxGuest"
	VirtualMachineGuestOsIdentifier_Other3xLinuxGuest       VirtualMachineGuestOsIdentifier = "other3xLinuxGuest"
	VirtualMachineGuestOsIdentifier_GenericLinuxGuest       VirtualMachineGuestOsIdentifier = "genericLinuxGuest"
	VirtualMachineGuestOsIdentifier_Other24xLinux64Guest    VirtualMachineGuestOsIdentifier = "other24xLinux64Guest"
	VirtualMachineGuestOsIdentifier_Other26xLinux64Guest    VirtualMachineGuestOsIdentifier = "other26xLinux64Guest"
	VirtualMachineGuestOsIdentifier_Other3xLinux64Guest     VirtualMachineGuestOsIdentifier = "other3xLinux64Guest"
	VirtualMachineGuestOsIdentifier_OtherLinux64Guest       VirtualMachineGuestOsIdentifier = "otherLinux64Guest"
	VirtualMachineGuestOsIdentifier_Solaris6Guest           VirtualMachineGuestOsIdentifier = "solaris6Guest"
	VirtualMachineGuestOsIdentifier_Solaris7Guest           VirtualMachineGuestOsIdentifier = "solaris7Guest"
	VirtualMachineGuestOsIdentifier_Solaris8Guest           VirtualMachineGuestOsIdentifier = "solaris8Guest"
	VirtualMachineGuestOsIdentifier_Solaris9Guest           VirtualMachineGuestOsIdentifier = "solaris9Guest"
	VirtualMachineGuestOsIdentifier_Solaris10Guest          VirtualMachineGuestOsIdentifier = "solaris10Guest"
	VirtualMachineGuestOsIdentifier_Solaris10_64Guest       VirtualMachineGuestOsIdentifier = "solaris10_64Guest"
	VirtualMachineGuestOsIdentifier_Solaris11_64Guest       VirtualMachineGuestOsIdentifier = "solaris11_64Guest"
	VirtualMachineGuestOsIdentifier_Os2Guest                VirtualMachineGuestOsIdentifier = "os2Guest"
	VirtualMachineGuestOsIdentifier_EComStationGuest        VirtualMachineGuestOsIdentifier = "eComStationGuest"
	VirtualMachineGuestOsIdentifier_EComStation2Guest       VirtualMachineGuestOsIdentifier = "eComStation2Guest"
	VirtualMachineGuestOsIdentifier_Netware4Guest           VirtualMachineGuestOsIdentifier = "netware4Guest"
	VirtualMachineGuestOsIdentifier_Netware5Guest           VirtualMachineGuestOsIdentifier = "netware5Guest"
	VirtualMachineGuestOsIdentifier_Netware6Guest           VirtualMachineGuestOsIdentifier = "netware6Guest"
	VirtualMachineGuestOsIdentifier_OpenServer5Guest        VirtualMachineGuestOsIdentifier = "openServer5Guest"
	VirtualMachineGuestOsIdentifier_OpenServer6Guest        VirtualMachineGuestOsIdentifier = "openServer6Guest"
	VirtualMachineGuestOsIdentifier_UnixWare7Guest          VirtualMachineGuestOsIdentifier = "unixWare7Guest"
	VirtualMachineGuestOsIdentifier_DarwinGuest             VirtualMachineGuestOsIdentifier = "darwinGuest"
	VirtualMachineGuestOsIdentifier_Darwin64Guest           VirtualMachineGuestOsIdentifier = "darwin64Guest"
	VirtualMachineGuestOsIdentifier_Darwin10Guest           VirtualMachineGuestOsIdentifier = "darwin10Guest"
	VirtualMachineGuestOsIdentifier_Darwin10_64Guest        VirtualMachineGuestOsIdentifier = "darwin10_64Guest"
	VirtualMachineGuestOsIdentifier_Darwin11Guest           VirtualMachineGuestOsIdentifier = "darwin11Guest"
	VirtualMachineGuestOsIdentifier_Darwin11_64Guest        VirtualMachineGuestOsIdentifier = "darwin11_64Guest"
	VirtualMachineGuestOsIdentifier_Darwin12_64Guest        VirtualMachineGuestOsIdentifier = "darwin12_64Guest"
	VirtualMachineGuestOsIdentifier_Darwin13_64Guest        VirtualMachineGuestOsIdentifier = "darwin13_64Guest"
	VirtualMachineGuestOsIdentifier_VmkernelGuest           VirtualMachineGuestOsIdentifier = "vmkernelGuest"
	VirtualMachineGuestOsIdentifier_Vmkernel5Guest          VirtualMachineGuestOsIdentifier = "vmkernel5Guest"
	VirtualMachineGuestOsIdentifier_OtherGuest              VirtualMachineGuestOsIdentifier = "otherGuest"
	VirtualMachineGuestOsIdentifier_OtherGuest64            VirtualMachineGuestOsIdentifier = "otherGuest64"
)

type GuestOsDescriptorFirmwareType string

const (
	GuestOsDescriptorFirmwareType_Bios GuestOsDescriptorFirmwareType = "bios"
	GuestOsDescriptorFirmwareType_Efi  GuestOsDescriptorFirmwareType = "efi"
)

type GuestOsDescriptorSupportLevel string

const (
	GuestOsDescriptorSupportLevel_Experimental GuestOsDescriptorSupportLevel = "experimental"
	GuestOsDescriptorSupportLevel_Legacy       GuestOsDescriptorSupportLevel = "legacy"
	GuestOsDescriptorSupportLevel_Terminated   GuestOsDescriptorSupportLevel = "terminated"
	GuestOsDescriptorSupportLevel_Supported    GuestOsDescriptorSupportLevel = "supported"
	GuestOsDescriptorSupportLevel_Unsupported  GuestOsDescriptorSupportLevel = "unsupported"
	GuestOsDescriptorSupportLevel_Deprecated   GuestOsDescriptorSupportLevel = "deprecated"
	GuestOsDescriptorSupportLevel_TechPreview  GuestOsDescriptorSupportLevel = "techPreview"
)

type VirtualMachineMetadataManagerVmMetadataOwnerOwner string

const (
	VirtualMachineMetadataManagerVmMetadataOwnerOwner_ComVmwareVsphereHA VirtualMachineMetadataManagerVmMetadataOwnerOwner = "ComVmwareVsphereHA"
)

type VirtualMachineMetadataManagerVmMetadataOp string

const (
	VirtualMachineMetadataManagerVmMetadataOp_Update VirtualMachineMetadataManagerVmMetadataOp = "Update"
	VirtualMachineMetadataManagerVmMetadataOp_Remove VirtualMachineMetadataManagerVmMetadataOp = "Remove"
)

type VirtualMachineRelocateTransformation string

const (
	VirtualMachineRelocateTransformation_Flat   VirtualMachineRelocateTransformation = "flat"
	VirtualMachineRelocateTransformation_Sparse VirtualMachineRelocateTransformation = "sparse"
)

type VirtualMachineRelocateDiskMoveOptions string

const (
	VirtualMachineRelocateDiskMoveOptions_MoveAllDiskBackingsAndAllowSharing    VirtualMachineRelocateDiskMoveOptions = "moveAllDiskBackingsAndAllowSharing"
	VirtualMachineRelocateDiskMoveOptions_MoveAllDiskBackingsAndDisallowSharing VirtualMachineRelocateDiskMoveOptions = "moveAllDiskBackingsAndDisallowSharing"
	VirtualMachineRelocateDiskMoveOptions_MoveChildMostDiskBacking              VirtualMachineRelocateDiskMoveOptions = "moveChildMostDiskBacking"
	VirtualMachineRelocateDiskMoveOptions_CreateNewChildDiskBacking             VirtualMachineRelocateDiskMoveOptions = "createNewChildDiskBacking"
	VirtualMachineRelocateDiskMoveOptions_MoveAllDiskBackingsAndConsolidate     VirtualMachineRelocateDiskMoveOptions = "moveAllDiskBackingsAndConsolidate"
)

type ScheduledHardwareUpgradeInfoHardwareUpgradePolicy string

const (
	ScheduledHardwareUpgradeInfoHardwareUpgradePolicy_Never          ScheduledHardwareUpgradeInfoHardwareUpgradePolicy = "never"
	ScheduledHardwareUpgradeInfoHardwareUpgradePolicy_OnSoftPowerOff ScheduledHardwareUpgradeInfoHardwareUpgradePolicy = "onSoftPowerOff"
	ScheduledHardwareUpgradeInfoHardwareUpgradePolicy_Always         ScheduledHardwareUpgradeInfoHardwareUpgradePolicy = "always"
)

type ScheduledHardwareUpgradeInfoHardwareUpgradeStatus string

const (
	ScheduledHardwareUpgradeInfoHardwareUpgradeStatus_None    ScheduledHardwareUpgradeInfoHardwareUpgradeStatus = "none"
	ScheduledHardwareUpgradeInfoHardwareUpgradeStatus_Pending ScheduledHardwareUpgradeInfoHardwareUpgradeStatus = "pending"
	ScheduledHardwareUpgradeInfoHardwareUpgradeStatus_Success ScheduledHardwareUpgradeInfoHardwareUpgradeStatus = "success"
	ScheduledHardwareUpgradeInfoHardwareUpgradeStatus_Failed  ScheduledHardwareUpgradeInfoHardwareUpgradeStatus = "failed"
)

type VirtualMachineScsiPassthroughType string

const (
	VirtualMachineScsiPassthroughType_Disk      VirtualMachineScsiPassthroughType = "disk"
	VirtualMachineScsiPassthroughType_Tape      VirtualMachineScsiPassthroughType = "tape"
	VirtualMachineScsiPassthroughType_Printer   VirtualMachineScsiPassthroughType = "printer"
	VirtualMachineScsiPassthroughType_Processor VirtualMachineScsiPassthroughType = "processor"
	VirtualMachineScsiPassthroughType_Worm      VirtualMachineScsiPassthroughType = "worm"
	VirtualMachineScsiPassthroughType_Cdrom     VirtualMachineScsiPassthroughType = "cdrom"
	VirtualMachineScsiPassthroughType_Scanner   VirtualMachineScsiPassthroughType = "scanner"
	VirtualMachineScsiPassthroughType_Optical   VirtualMachineScsiPassthroughType = "optical"
	VirtualMachineScsiPassthroughType_Media     VirtualMachineScsiPassthroughType = "media"
	VirtualMachineScsiPassthroughType_Com       VirtualMachineScsiPassthroughType = "com"
	VirtualMachineScsiPassthroughType_Raid      VirtualMachineScsiPassthroughType = "raid"
	VirtualMachineScsiPassthroughType_Unknown   VirtualMachineScsiPassthroughType = "unknown"
)

type VirtualMachineTargetInfoConfigurationTag string

const (
	VirtualMachineTargetInfoConfigurationTag_Compliant   VirtualMachineTargetInfoConfigurationTag = "compliant"
	VirtualMachineTargetInfoConfigurationTag_ClusterWide VirtualMachineTargetInfoConfigurationTag = "clusterWide"
)

type UpgradePolicy string

const (
	UpgradePolicy_Manual              UpgradePolicy = "manual"
	UpgradePolicy_UpgradeAtPowerCycle UpgradePolicy = "upgradeAtPowerCycle"
)

type VirtualMachineUsbInfoSpeed string

const (
	VirtualMachineUsbInfoSpeed_Low          VirtualMachineUsbInfoSpeed = "low"
	VirtualMachineUsbInfoSpeed_Full         VirtualMachineUsbInfoSpeed = "full"
	VirtualMachineUsbInfoSpeed_High         VirtualMachineUsbInfoSpeed = "high"
	VirtualMachineUsbInfoSpeed_SuperSpeed   VirtualMachineUsbInfoSpeed = "superSpeed"
	VirtualMachineUsbInfoSpeed_UnknownSpeed VirtualMachineUsbInfoSpeed = "unknownSpeed"
)

type VirtualMachineUsbInfoFamily string

const (
	VirtualMachineUsbInfoFamily_Audio           VirtualMachineUsbInfoFamily = "audio"
	VirtualMachineUsbInfoFamily_Hid             VirtualMachineUsbInfoFamily = "hid"
	VirtualMachineUsbInfoFamily_Hid_bootable    VirtualMachineUsbInfoFamily = "hid_bootable"
	VirtualMachineUsbInfoFamily_Physical        VirtualMachineUsbInfoFamily = "physical"
	VirtualMachineUsbInfoFamily_Communication   VirtualMachineUsbInfoFamily = "communication"
	VirtualMachineUsbInfoFamily_Imaging         VirtualMachineUsbInfoFamily = "imaging"
	VirtualMachineUsbInfoFamily_Printer         VirtualMachineUsbInfoFamily = "printer"
	VirtualMachineUsbInfoFamily_Storage         VirtualMachineUsbInfoFamily = "storage"
	VirtualMachineUsbInfoFamily_Hub             VirtualMachineUsbInfoFamily = "hub"
	VirtualMachineUsbInfoFamily_Smart_card      VirtualMachineUsbInfoFamily = "smart_card"
	VirtualMachineUsbInfoFamily_Security        VirtualMachineUsbInfoFamily = "security"
	VirtualMachineUsbInfoFamily_Video           VirtualMachineUsbInfoFamily = "video"
	VirtualMachineUsbInfoFamily_Wireless        VirtualMachineUsbInfoFamily = "wireless"
	VirtualMachineUsbInfoFamily_Bluetooth       VirtualMachineUsbInfoFamily = "bluetooth"
	VirtualMachineUsbInfoFamily_Wusb            VirtualMachineUsbInfoFamily = "wusb"
	VirtualMachineUsbInfoFamily_Pda             VirtualMachineUsbInfoFamily = "pda"
	VirtualMachineUsbInfoFamily_Vendor_specific VirtualMachineUsbInfoFamily = "vendor_specific"
	VirtualMachineUsbInfoFamily_Other           VirtualMachineUsbInfoFamily = "other"
	VirtualMachineUsbInfoFamily_UnknownFamily   VirtualMachineUsbInfoFamily = "unknownFamily"
)

type CheckTestType string

const (
	CheckTestType_SourceTests       CheckTestType = "sourceTests"
	CheckTestType_HostTests         CheckTestType = "hostTests"
	CheckTestType_ResourcePoolTests CheckTestType = "resourcePoolTests"
	CheckTestType_DatastoreTests    CheckTestType = "datastoreTests"
	CheckTestType_NetworkTests      CheckTestType = "networkTests"
)

type CustomizationNetBIOSMode string

const (
	CustomizationNetBIOSMode_EnableNetBIOSViaDhcp CustomizationNetBIOSMode = "enableNetBIOSViaDhcp"
	CustomizationNetBIOSMode_EnableNetBIOS        CustomizationNetBIOSMode = "enableNetBIOS"
	CustomizationNetBIOSMode_DisableNetBIOS       CustomizationNetBIOSMode = "disableNetBIOS"
)

type CustomizationSysprepRebootOption string

const (
	CustomizationSysprepRebootOption_Reboot   CustomizationSysprepRebootOption = "reboot"
	CustomizationSysprepRebootOption_Noreboot CustomizationSysprepRebootOption = "noreboot"
	CustomizationSysprepRebootOption_Shutdown CustomizationSysprepRebootOption = "shutdown"
)

type CustomizationLicenseDataMode string

const (
	CustomizationLicenseDataMode_PerServer CustomizationLicenseDataMode = "perServer"
	CustomizationLicenseDataMode_PerSeat   CustomizationLicenseDataMode = "perSeat"
)

type VirtualDeviceConnectInfoStatus string

const (
	VirtualDeviceConnectInfoStatus_Ok                 VirtualDeviceConnectInfoStatus = "ok"
	VirtualDeviceConnectInfoStatus_RecoverableError   VirtualDeviceConnectInfoStatus = "recoverableError"
	VirtualDeviceConnectInfoStatus_UnrecoverableError VirtualDeviceConnectInfoStatus = "unrecoverableError"
	VirtualDeviceConnectInfoStatus_Untried            VirtualDeviceConnectInfoStatus = "untried"
)

type VirtualDeviceFileExtension string

const (
	VirtualDeviceFileExtension_Iso  VirtualDeviceFileExtension = "iso"
	VirtualDeviceFileExtension_Flp  VirtualDeviceFileExtension = "flp"
	VirtualDeviceFileExtension_Vmdk VirtualDeviceFileExtension = "vmdk"
	VirtualDeviceFileExtension_Dsk  VirtualDeviceFileExtension = "dsk"
	VirtualDeviceFileExtension_Rdm  VirtualDeviceFileExtension = "rdm"
)

type VirtualDeviceURIBackingOptionDirection string

const (
	VirtualDeviceURIBackingOptionDirection_Server VirtualDeviceURIBackingOptionDirection = "server"
	VirtualDeviceURIBackingOptionDirection_Client VirtualDeviceURIBackingOptionDirection = "client"
)

type VirtualDeviceConfigSpecOperation string

const (
	VirtualDeviceConfigSpecOperation_Add    VirtualDeviceConfigSpecOperation = "add"
	VirtualDeviceConfigSpecOperation_Remove VirtualDeviceConfigSpecOperation = "remove"
	VirtualDeviceConfigSpecOperation_Edit   VirtualDeviceConfigSpecOperation = "edit"
)

type VirtualDeviceConfigSpecFileOperation string

const (
	VirtualDeviceConfigSpecFileOperation_Create  VirtualDeviceConfigSpecFileOperation = "create"
	VirtualDeviceConfigSpecFileOperation_Destroy VirtualDeviceConfigSpecFileOperation = "destroy"
	VirtualDeviceConfigSpecFileOperation_Replace VirtualDeviceConfigSpecFileOperation = "replace"
)

type VirtualDiskDeltaDiskFormat string

const (
	VirtualDiskDeltaDiskFormat_RedoLogFormat  VirtualDiskDeltaDiskFormat = "redoLogFormat"
	VirtualDiskDeltaDiskFormat_NativeFormat   VirtualDiskDeltaDiskFormat = "nativeFormat"
	VirtualDiskDeltaDiskFormat_SeSparseFormat VirtualDiskDeltaDiskFormat = "seSparseFormat"
)

type VirtualDiskVFlashCacheConfigInfoCacheConsistencyType string

const (
	VirtualDiskVFlashCacheConfigInfoCacheConsistencyType_Strong VirtualDiskVFlashCacheConfigInfoCacheConsistencyType = "strong"
	VirtualDiskVFlashCacheConfigInfoCacheConsistencyType_Weak   VirtualDiskVFlashCacheConfigInfoCacheConsistencyType = "weak"
)

type VirtualDiskVFlashCacheConfigInfoCacheMode string

const (
	VirtualDiskVFlashCacheConfigInfoCacheMode_Write_thru VirtualDiskVFlashCacheConfigInfoCacheMode = "write_thru"
	VirtualDiskVFlashCacheConfigInfoCacheMode_Write_back VirtualDiskVFlashCacheConfigInfoCacheMode = "write_back"
)

type VirtualDiskMode string

const (
	VirtualDiskMode_Persistent                VirtualDiskMode = "persistent"
	VirtualDiskMode_Nonpersistent             VirtualDiskMode = "nonpersistent"
	VirtualDiskMode_Undoable                  VirtualDiskMode = "undoable"
	VirtualDiskMode_Independent_persistent    VirtualDiskMode = "independent_persistent"
	VirtualDiskMode_Independent_nonpersistent VirtualDiskMode = "independent_nonpersistent"
	VirtualDiskMode_Append                    VirtualDiskMode = "append"
)

type VirtualDiskCompatibilityMode string

const (
	VirtualDiskCompatibilityMode_VirtualMode  VirtualDiskCompatibilityMode = "virtualMode"
	VirtualDiskCompatibilityMode_PhysicalMode VirtualDiskCompatibilityMode = "physicalMode"
)

type VirtualEthernetCardLegacyNetworkDeviceName string

const (
	VirtualEthernetCardLegacyNetworkDeviceName_Bridged  VirtualEthernetCardLegacyNetworkDeviceName = "bridged"
	VirtualEthernetCardLegacyNetworkDeviceName_Nat      VirtualEthernetCardLegacyNetworkDeviceName = "nat"
	VirtualEthernetCardLegacyNetworkDeviceName_Hostonly VirtualEthernetCardLegacyNetworkDeviceName = "hostonly"
)

type VirtualEthernetCardMacType string

const (
	VirtualEthernetCardMacType_Manual    VirtualEthernetCardMacType = "manual"
	VirtualEthernetCardMacType_Generated VirtualEthernetCardMacType = "generated"
	VirtualEthernetCardMacType_Assigned  VirtualEthernetCardMacType = "assigned"
)

type VirtualPointingDeviceHostChoice string

const (
	VirtualPointingDeviceHostChoice_Autodetect           VirtualPointingDeviceHostChoice = "autodetect"
	VirtualPointingDeviceHostChoice_IntellimouseExplorer VirtualPointingDeviceHostChoice = "intellimouseExplorer"
	VirtualPointingDeviceHostChoice_IntellimousePs2      VirtualPointingDeviceHostChoice = "intellimousePs2"
	VirtualPointingDeviceHostChoice_LogitechMouseman     VirtualPointingDeviceHostChoice = "logitechMouseman"
	VirtualPointingDeviceHostChoice_Microsoft_serial     VirtualPointingDeviceHostChoice = "microsoft_serial"
	VirtualPointingDeviceHostChoice_MouseSystems         VirtualPointingDeviceHostChoice = "mouseSystems"
	VirtualPointingDeviceHostChoice_MousemanSerial       VirtualPointingDeviceHostChoice = "mousemanSerial"
	VirtualPointingDeviceHostChoice_Ps2                  VirtualPointingDeviceHostChoice = "ps2"
)

type VirtualSCSISharing string

const (
	VirtualSCSISharing_NoSharing       VirtualSCSISharing = "noSharing"
	VirtualSCSISharing_VirtualSharing  VirtualSCSISharing = "virtualSharing"
	VirtualSCSISharing_PhysicalSharing VirtualSCSISharing = "physicalSharing"
)

type VirtualSerialPortEndPoint string

const (
	VirtualSerialPortEndPoint_Client VirtualSerialPortEndPoint = "client"
	VirtualSerialPortEndPoint_Server VirtualSerialPortEndPoint = "server"
)

type VirtualMachineVideoCardUse3dRenderer string

const (
	VirtualMachineVideoCardUse3dRenderer_Automatic VirtualMachineVideoCardUse3dRenderer = "automatic"
	VirtualMachineVideoCardUse3dRenderer_Software  VirtualMachineVideoCardUse3dRenderer = "software"
	VirtualMachineVideoCardUse3dRenderer_Hardware  VirtualMachineVideoCardUse3dRenderer = "hardware"
)

type GuestFileType string

const (
	GuestFileType_File      GuestFileType = "file"
	GuestFileType_Directory GuestFileType = "directory"
	GuestFileType_Symlink   GuestFileType = "symlink"
)

type VsanHostDecommissionModeObjectAction string

const (
	VsanHostDecommissionModeObjectAction_NoAction                  VsanHostDecommissionModeObjectAction = "noAction"
	VsanHostDecommissionModeObjectAction_EnsureObjectAccessibility VsanHostDecommissionModeObjectAction = "ensureObjectAccessibility"
	VsanHostDecommissionModeObjectAction_EvacuateAllData           VsanHostDecommissionModeObjectAction = "evacuateAllData"
)

type VsanHostDiskResultState string

const (
	VsanHostDiskResultState_InUse      VsanHostDiskResultState = "inUse"
	VsanHostDiskResultState_Eligible   VsanHostDiskResultState = "eligible"
	VsanHostDiskResultState_Ineligible VsanHostDiskResultState = "ineligible"
)

type VsanHostHealthState string

const (
	VsanHostHealthState_Unknown   VsanHostHealthState = "unknown"
	VsanHostHealthState_Healthy   VsanHostHealthState = "healthy"
	VsanHostHealthState_Unhealthy VsanHostHealthState = "unhealthy"
)

type VsanHostNodeState string

const (
	VsanHostNodeState_Error                   VsanHostNodeState = "error"
	VsanHostNodeState_Disabled                VsanHostNodeState = "disabled"
	VsanHostNodeState_Agent                   VsanHostNodeState = "agent"
	VsanHostNodeState_Master                  VsanHostNodeState = "master"
	VsanHostNodeState_Backup                  VsanHostNodeState = "backup"
	VsanHostNodeState_Starting                VsanHostNodeState = "starting"
	VsanHostNodeState_Stopping                VsanHostNodeState = "stopping"
	VsanHostNodeState_EnteringMaintenanceMode VsanHostNodeState = "enteringMaintenanceMode"
	VsanHostNodeState_ExitingMaintenanceMode  VsanHostNodeState = "exitingMaintenanceMode"
	VsanHostNodeState_Decommissioning         VsanHostNodeState = "decommissioning"
)

type VsanDiskIssueType string

const (
	VsanDiskIssueType_NonExist      VsanDiskIssueType = "nonExist"
	VsanDiskIssueType_StampMismatch VsanDiskIssueType = "stampMismatch"
	VsanDiskIssueType_Unknown       VsanDiskIssueType = "unknown"
)

type AboutInfo struct {
	*DynamicData

	Name                  string `xml:"name,omitempty"`
	FullName              string `xml:"fullName,omitempty"`
	Vendor                string `xml:"vendor,omitempty"`
	Version               string `xml:"version,omitempty"`
	Build                 string `xml:"build,omitempty"`
	LocaleVersion         string `xml:"localeVersion,omitempty"`
	LocaleBuild           string `xml:"localeBuild,omitempty"`
	OsType                string `xml:"osType,omitempty"`
	ProductLineId         string `xml:"productLineId,omitempty"`
	ApiType               string `xml:"apiType,omitempty"`
	ApiVersion            string `xml:"apiVersion,omitempty"`
	InstanceUuid          string `xml:"instanceUuid,omitempty"`
	LicenseProductName    string `xml:"licenseProductName,omitempty"`
	LicenseProductVersion string `xml:"licenseProductVersion,omitempty"`
}

type AuthorizationDescription struct {
	*DynamicData

	Privilege      []*ElementDescription `xml:"privilege,omitempty"`
	PrivilegeGroup []*ElementDescription `xml:"privilegeGroup,omitempty"`
}

type Permission struct {
	*DynamicData

	Entity    *ManagedObjectReference `xml:"entity,omitempty"`
	Principal string                  `xml:"principal,omitempty"`
	Group     bool                    `xml:"group,omitempty"`
	RoleId    int32                   `xml:"roleId,omitempty"`
	Propagate bool                    `xml:"propagate,omitempty"`
}

type ArrayOfPermission struct {
	Permission []*Permission `xml:"Permission,omitempty"`
}

type AuthorizationRole struct {
	*DynamicData

	RoleId    int32        `xml:"roleId,omitempty"`
	System    bool         `xml:"system,omitempty"`
	Name      string       `xml:"name,omitempty"`
	Info      *Description `xml:"info,omitempty"`
	Privilege []string     `xml:"privilege,omitempty"`
}

type ArrayOfAuthorizationRole struct {
	AuthorizationRole []*AuthorizationRole `xml:"AuthorizationRole,omitempty"`
}

type AuthorizationPrivilege struct {
	*DynamicData

	PrivId        string `xml:"privId,omitempty"`
	OnParent      bool   `xml:"onParent,omitempty"`
	Name          string `xml:"name,omitempty"`
	PrivGroupName string `xml:"privGroupName,omitempty"`
}

type ArrayOfAuthorizationPrivilege struct {
	AuthorizationPrivilege []*AuthorizationPrivilege `xml:"AuthorizationPrivilege,omitempty"`
}

type PrivilegeAvailability struct {
	*DynamicData

	PrivId    string `xml:"privId,omitempty"`
	IsGranted bool   `xml:"isGranted,omitempty"`
}

type ArrayOfPrivilegeAvailability struct {
	PrivilegeAvailability []*PrivilegeAvailability `xml:"PrivilegeAvailability,omitempty"`
}

type EntityPrivilege struct {
	*DynamicData

	Entity           *ManagedObjectReference  `xml:"entity,omitempty"`
	PrivAvailability []*PrivilegeAvailability `xml:"privAvailability,omitempty"`
}

type ArrayOfEntityPrivilege struct {
	EntityPrivilege []*EntityPrivilege `xml:"EntityPrivilege,omitempty"`
}

type BoolPolicy struct {
	*InheritablePolicy

	Value bool `xml:"value,omitempty"`
}

type Capability struct {
	*DynamicData

	ProvisioningSupported            bool       `xml:"provisioningSupported,omitempty"`
	MultiHostSupported               bool       `xml:"multiHostSupported,omitempty"`
	UserShellAccessSupported         bool       `xml:"userShellAccessSupported,omitempty"`
	SupportedEVCMode                 []*EVCMode `xml:"supportedEVCMode,omitempty"`
	NetworkBackupAndRestoreSupported bool       `xml:"networkBackupAndRestoreSupported,omitempty"`
}

type ClusterComputeResourceSummary struct {
	*ComputeResourceSummary

	CurrentFailoverLevel int32                           `xml:"currentFailoverLevel,omitempty"`
	AdmissionControlInfo *ClusterDasAdmissionControlInfo `xml:"admissionControlInfo,omitempty"`
	NumVmotions          int32                           `xml:"numVmotions,omitempty"`
	TargetBalance        int32                           `xml:"targetBalance,omitempty"`
	CurrentBalance       int32                           `xml:"currentBalance,omitempty"`
	CurrentEVCModeKey    string                          `xml:"currentEVCModeKey,omitempty"`
	DasData              *ClusterDasData                 `xml:"dasData,omitempty"`
}

type ComputeResourceSummary struct {
	*DynamicData

	TotalCpu          int32                `xml:"totalCpu,omitempty"`
	TotalMemory       int64                `xml:"totalMemory,omitempty"`
	NumCpuCores       int16                `xml:"numCpuCores,omitempty"`
	NumCpuThreads     int16                `xml:"numCpuThreads,omitempty"`
	EffectiveCpu      int32                `xml:"effectiveCpu,omitempty"`
	EffectiveMemory   int64                `xml:"effectiveMemory,omitempty"`
	NumHosts          int32                `xml:"numHosts,omitempty"`
	NumEffectiveHosts int32                `xml:"numEffectiveHosts,omitempty"`
	OverallStatus     *ManagedEntityStatus `xml:"overallStatus,omitempty"`
}

type ComputeResourceConfigInfo struct {
	*DynamicData

	VmSwapPlacement           string `xml:"vmSwapPlacement,omitempty"`
	SpbmEnabled               bool   `xml:"spbmEnabled,omitempty"`
	DefaultHardwareVersionKey string `xml:"defaultHardwareVersionKey,omitempty"`
}

type ComputeResourceHostSPBMLicenseInfo struct {
	*DynamicData

	Host         *ManagedObjectReference                                 `xml:"host,omitempty"`
	LicenseState *ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState `xml:"licenseState,omitempty"`
}

type ArrayOfComputeResourceHostSPBMLicenseInfo struct {
	ComputeResourceHostSPBMLicenseInfo []*ComputeResourceHostSPBMLicenseInfo `xml:"ComputeResourceHostSPBMLicenseInfo,omitempty"`
}

type ComputeResourceConfigSpec struct {
	*DynamicData

	VmSwapPlacement           string `xml:"vmSwapPlacement,omitempty"`
	SpbmEnabled               bool   `xml:"spbmEnabled,omitempty"`
	DefaultHardwareVersionKey string `xml:"defaultHardwareVersionKey,omitempty"`
}

type CustomFieldDef struct {
	*DynamicData

	Key                     int32               `xml:"key,omitempty"`
	Name                    string              `xml:"name,omitempty"`
	Type_                   string              `xml:"type,omitempty"`
	ManagedObjectType       string              `xml:"managedObjectType,omitempty"`
	FieldDefPrivileges      *PrivilegePolicyDef `xml:"fieldDefPrivileges,omitempty"`
	FieldInstancePrivileges *PrivilegePolicyDef `xml:"fieldInstancePrivileges,omitempty"`
}

type ArrayOfCustomFieldDef struct {
	CustomFieldDef []*CustomFieldDef `xml:"CustomFieldDef,omitempty"`
}

type CustomFieldValue struct {
	*DynamicData

	Key int32 `xml:"key,omitempty"`
}

type ArrayOfCustomFieldValue struct {
	CustomFieldValue []*CustomFieldValue `xml:"CustomFieldValue,omitempty"`
}

type CustomFieldStringValue struct {
	*CustomFieldValue

	Value string `xml:"value,omitempty"`
}

type CustomizationSpecInfo struct {
	*DynamicData

	Name           string    `xml:"name,omitempty"`
	Description    string    `xml:"description,omitempty"`
	Type_          string    `xml:"type,omitempty"`
	ChangeVersion  string    `xml:"changeVersion,omitempty"`
	LastUpdateTime time.Time `xml:"lastUpdateTime,omitempty"`
}

type ArrayOfCustomizationSpecInfo struct {
	CustomizationSpecInfo []*CustomizationSpecInfo `xml:"CustomizationSpecInfo,omitempty"`
}

type CustomizationSpecItem struct {
	*DynamicData

	Info *CustomizationSpecInfo `xml:"info,omitempty"`
	Spec *CustomizationSpec     `xml:"spec,omitempty"`
}

type DatacenterConfigInfo struct {
	*DynamicData

	DefaultHardwareVersionKey string `xml:"defaultHardwareVersionKey,omitempty"`
}

type DatacenterConfigSpec struct {
	*DynamicData

	DefaultHardwareVersionKey string `xml:"defaultHardwareVersionKey,omitempty"`
}

type DatastoreSummary struct {
	*DynamicData

	Datastore          *ManagedObjectReference `xml:"datastore,omitempty"`
	Name               string                  `xml:"name,omitempty"`
	Url                string                  `xml:"url,omitempty"`
	Capacity           int64                   `xml:"capacity,omitempty"`
	FreeSpace          int64                   `xml:"freeSpace,omitempty"`
	Uncommitted        int64                   `xml:"uncommitted,omitempty"`
	Accessible         bool                    `xml:"accessible,omitempty"`
	MultipleHostAccess bool                    `xml:"multipleHostAccess,omitempty"`
	Type_              string                  `xml:"type,omitempty"`
	MaintenanceMode    string                  `xml:"maintenanceMode,omitempty"`
}

type DatastoreInfo struct {
	*DynamicData

	Name                   string    `xml:"name,omitempty"`
	Url                    string    `xml:"url,omitempty"`
	FreeSpace              int64     `xml:"freeSpace,omitempty"`
	MaxFileSize            int64     `xml:"maxFileSize,omitempty"`
	MaxVirtualDiskCapacity int64     `xml:"maxVirtualDiskCapacity,omitempty"`
	Timestamp              time.Time `xml:"timestamp,omitempty"`
	ContainerId            string    `xml:"containerId,omitempty"`
}

type DatastoreCapability struct {
	*DynamicData

	DirectoryHierarchySupported      bool `xml:"directoryHierarchySupported,omitempty"`
	RawDiskMappingsSupported         bool `xml:"rawDiskMappingsSupported,omitempty"`
	PerFileThinProvisioningSupported bool `xml:"perFileThinProvisioningSupported,omitempty"`
	StorageIORMSupported             bool `xml:"storageIORMSupported,omitempty"`
	NativeSnapshotSupported          bool `xml:"nativeSnapshotSupported,omitempty"`
	TopLevelDirectoryCreateSupported bool `xml:"topLevelDirectoryCreateSupported,omitempty"`
	SeSparseSupported                bool `xml:"seSparseSupported,omitempty"`
}

type DatastoreHostMount struct {
	*DynamicData

	Key       *ManagedObjectReference `xml:"key,omitempty"`
	MountInfo *HostMountInfo          `xml:"mountInfo,omitempty"`
}

type ArrayOfDatastoreHostMount struct {
	DatastoreHostMount []*DatastoreHostMount `xml:"DatastoreHostMount,omitempty"`
}

type DatastoreMountPathDatastorePair struct {
	*DynamicData

	OldMountPath string                  `xml:"oldMountPath,omitempty"`
	Datastore    *ManagedObjectReference `xml:"datastore,omitempty"`
}

type ArrayOfDatastoreMountPathDatastorePair struct {
	DatastoreMountPathDatastorePair []*DatastoreMountPathDatastorePair `xml:"DatastoreMountPathDatastorePair,omitempty"`
}

type Description struct {
	*DynamicData

	Label   string `xml:"label,omitempty"`
	Summary string `xml:"summary,omitempty"`
}

type DiagnosticManagerLogDescriptor struct {
	*DynamicData

	Key      string       `xml:"key,omitempty"`
	FileName string       `xml:"fileName,omitempty"`
	Creator  string       `xml:"creator,omitempty"`
	Format   string       `xml:"format,omitempty"`
	MimeType string       `xml:"mimeType,omitempty"`
	Info     *Description `xml:"info,omitempty"`
}

type ArrayOfDiagnosticManagerLogDescriptor struct {
	DiagnosticManagerLogDescriptor []*DiagnosticManagerLogDescriptor `xml:"DiagnosticManagerLogDescriptor,omitempty"`
}

type DiagnosticManagerLogHeader struct {
	*DynamicData

	LineStart int32    `xml:"lineStart,omitempty"`
	LineEnd   int32    `xml:"lineEnd,omitempty"`
	LineText  []string `xml:"lineText,omitempty"`
}

type DiagnosticManagerBundleInfo struct {
	*DynamicData

	System *ManagedObjectReference `xml:"system,omitempty"`
	Url    string                  `xml:"url,omitempty"`
}

type ArrayOfDiagnosticManagerBundleInfo struct {
	DiagnosticManagerBundleInfo []*DiagnosticManagerBundleInfo `xml:"DiagnosticManagerBundleInfo,omitempty"`
}

type DVSContactInfo struct {
	*DynamicData

	Name    string `xml:"name,omitempty"`
	Contact string `xml:"contact,omitempty"`
}

type DVSNetworkResourceManagementCapability struct {
	*DynamicData

	NetworkResourceManagementSupported       bool  `xml:"networkResourceManagementSupported,omitempty"`
	NetworkResourcePoolHighShareValue        int32 `xml:"networkResourcePoolHighShareValue,omitempty"`
	QosSupported                             bool  `xml:"qosSupported,omitempty"`
	UserDefinedNetworkResourcePoolsSupported bool  `xml:"userDefinedNetworkResourcePoolsSupported,omitempty"`
}

type DVSRollbackCapability struct {
	*DynamicData

	RollbackSupported bool `xml:"rollbackSupported,omitempty"`
}

type DVSBackupRestoreCapability struct {
	*DynamicData

	BackupRestoreSupported bool `xml:"backupRestoreSupported,omitempty"`
}

type DVSFeatureCapability struct {
	*DynamicData

	NetworkResourceManagementSupported  bool                                    `xml:"networkResourceManagementSupported,omitempty"`
	VmDirectPathGen2Supported           bool                                    `xml:"vmDirectPathGen2Supported,omitempty"`
	NicTeamingPolicy                    []string                                `xml:"nicTeamingPolicy,omitempty"`
	NetworkResourcePoolHighShareValue   int32                                   `xml:"networkResourcePoolHighShareValue,omitempty"`
	NetworkResourceManagementCapability *DVSNetworkResourceManagementCapability `xml:"networkResourceManagementCapability,omitempty"`
	HealthCheckCapability               *DVSHealthCheckCapability               `xml:"healthCheckCapability,omitempty"`
	RollbackCapability                  *DVSRollbackCapability                  `xml:"rollbackCapability,omitempty"`
	BackupRestoreCapability             *DVSBackupRestoreCapability             `xml:"backupRestoreCapability,omitempty"`
	NetworkFilterSupported              bool                                    `xml:"networkFilterSupported,omitempty"`
}

type DVSHealthCheckCapability struct {
	*DynamicData
}

type DVSCapability struct {
	*DynamicData

	DvsOperationSupported              bool                                       `xml:"dvsOperationSupported,omitempty"`
	DvPortGroupOperationSupported      bool                                       `xml:"dvPortGroupOperationSupported,omitempty"`
	DvPortOperationSupported           bool                                       `xml:"dvPortOperationSupported,omitempty"`
	CompatibleHostComponentProductInfo []*DistributedVirtualSwitchHostProductSpec `xml:"compatibleHostComponentProductInfo,omitempty"`
	FeaturesSupported                  *DVSFeatureCapability                      `xml:"featuresSupported,omitempty"`
}

type DVSSummary struct {
	*DynamicData

	Name          string                               `xml:"name,omitempty"`
	Uuid          string                               `xml:"uuid,omitempty"`
	NumPorts      int32                                `xml:"numPorts,omitempty"`
	ProductInfo   *DistributedVirtualSwitchProductSpec `xml:"productInfo,omitempty"`
	HostMember    []*ManagedObjectReference            `xml:"hostMember,omitempty"`
	Vm            []*ManagedObjectReference            `xml:"vm,omitempty"`
	Host          []*ManagedObjectReference            `xml:"host,omitempty"`
	PortgroupName []string                             `xml:"portgroupName,omitempty"`
	Description   string                               `xml:"description,omitempty"`
	Contact       *DVSContactInfo                      `xml:"contact,omitempty"`
	NumHosts      int32                                `xml:"numHosts,omitempty"`
}

type DVSPolicy struct {
	*DynamicData

	AutoPreInstallAllowed bool `xml:"autoPreInstallAllowed,omitempty"`
	AutoUpgradeAllowed    bool `xml:"autoUpgradeAllowed,omitempty"`
	PartialUpgradeAllowed bool `xml:"partialUpgradeAllowed,omitempty"`
}

type DVSUplinkPortPolicy struct {
	*DynamicData
}

type DVSNameArrayUplinkPortPolicy struct {
	*DVSUplinkPortPolicy

	UplinkPortName []string `xml:"uplinkPortName,omitempty"`
}

type DVSConfigSpec struct {
	*DynamicData

	ConfigVersion                 string                                          `xml:"configVersion,omitempty"`
	Name                          string                                          `xml:"name,omitempty"`
	NumStandalonePorts            int32                                           `xml:"numStandalonePorts,omitempty"`
	MaxPorts                      int32                                           `xml:"maxPorts,omitempty"`
	UplinkPortPolicy              *DVSUplinkPortPolicy                            `xml:"uplinkPortPolicy,omitempty"`
	UplinkPortgroup               []*ManagedObjectReference                       `xml:"uplinkPortgroup,omitempty"`
	DefaultPortConfig             *DVPortSetting                                  `xml:"defaultPortConfig,omitempty"`
	Host                          []*DistributedVirtualSwitchHostMemberConfigSpec `xml:"host,omitempty"`
	ExtensionKey                  string                                          `xml:"extensionKey,omitempty"`
	Description                   string                                          `xml:"description,omitempty"`
	Policy                        *DVSPolicy                                      `xml:"policy,omitempty"`
	VendorSpecificConfig          []*DistributedVirtualSwitchKeyedOpaqueBlob      `xml:"vendorSpecificConfig,omitempty"`
	Contact                       *DVSContactInfo                                 `xml:"contact,omitempty"`
	SwitchIpAddress               string                                          `xml:"switchIpAddress,omitempty"`
	DefaultProxySwitchMaxNumPorts int32                                           `xml:"defaultProxySwitchMaxNumPorts,omitempty"`
}

type DVSCreateSpec struct {
	*DynamicData

	ConfigSpec  *DVSConfigSpec                       `xml:"configSpec,omitempty"`
	ProductInfo *DistributedVirtualSwitchProductSpec `xml:"productInfo,omitempty"`
	Capability  *DVSCapability                       `xml:"capability,omitempty"`
}

type DVSConfigInfo struct {
	*DynamicData

	Uuid                             string                                     `xml:"uuid,omitempty"`
	Name                             string                                     `xml:"name,omitempty"`
	NumStandalonePorts               int32                                      `xml:"numStandalonePorts,omitempty"`
	NumPorts                         int32                                      `xml:"numPorts,omitempty"`
	MaxPorts                         int32                                      `xml:"maxPorts,omitempty"`
	UplinkPortPolicy                 *DVSUplinkPortPolicy                       `xml:"uplinkPortPolicy,omitempty"`
	UplinkPortgroup                  []*ManagedObjectReference                  `xml:"uplinkPortgroup,omitempty"`
	DefaultPortConfig                *DVPortSetting                             `xml:"defaultPortConfig,omitempty"`
	Host                             []*DistributedVirtualSwitchHostMember      `xml:"host,omitempty"`
	ProductInfo                      *DistributedVirtualSwitchProductSpec       `xml:"productInfo,omitempty"`
	TargetInfo                       *DistributedVirtualSwitchProductSpec       `xml:"targetInfo,omitempty"`
	ExtensionKey                     string                                     `xml:"extensionKey,omitempty"`
	VendorSpecificConfig             []*DistributedVirtualSwitchKeyedOpaqueBlob `xml:"vendorSpecificConfig,omitempty"`
	Policy                           *DVSPolicy                                 `xml:"policy,omitempty"`
	Description                      string                                     `xml:"description,omitempty"`
	ConfigVersion                    string                                     `xml:"configVersion,omitempty"`
	Contact                          *DVSContactInfo                            `xml:"contact,omitempty"`
	SwitchIpAddress                  string                                     `xml:"switchIpAddress,omitempty"`
	CreateTime                       time.Time                                  `xml:"createTime,omitempty"`
	NetworkResourceManagementEnabled bool                                       `xml:"networkResourceManagementEnabled,omitempty"`
	DefaultProxySwitchMaxNumPorts    int32                                      `xml:"defaultProxySwitchMaxNumPorts,omitempty"`
	HealthCheckConfig                []*DVSHealthCheckConfig                    `xml:"healthCheckConfig,omitempty"`
}

type DVSHealthCheckConfig struct {
	*DynamicData

	Enable   bool  `xml:"enable,omitempty"`
	Interval int32 `xml:"interval,omitempty"`
}

type ArrayOfDVSHealthCheckConfig struct {
	DVSHealthCheckConfig []*DVSHealthCheckConfig `xml:"DVSHealthCheckConfig,omitempty"`
}

type DVSRuntimeInfo struct {
	*DynamicData

	HostMemberRuntime []*HostMemberRuntimeInfo `xml:"hostMemberRuntime,omitempty"`
}

type EVCMode struct {
	*ElementDescription

	GuaranteedCPUFeatures []*HostCpuIdInfo                    `xml:"guaranteedCPUFeatures,omitempty"`
	FeatureCapability     []*HostFeatureCapability            `xml:"featureCapability,omitempty"`
	FeatureMask           []*HostFeatureMask                  `xml:"featureMask,omitempty"`
	FeatureRequirement    []*VirtualMachineFeatureRequirement `xml:"featureRequirement,omitempty"`
	Vendor                string                              `xml:"vendor,omitempty"`
	Track                 []string                            `xml:"track,omitempty"`
	VendorTier            int32                               `xml:"vendorTier,omitempty"`
}

type ArrayOfEVCMode struct {
	EVCMode []*EVCMode `xml:"EVCMode,omitempty"`
}

type ElementDescription struct {
	*Description

	Key string `xml:"key,omitempty"`
}

type ArrayOfElementDescription struct {
	ElementDescription []*ElementDescription `xml:"ElementDescription,omitempty"`
}

type EnumDescription struct {
	*DynamicData

	Key  string                `xml:"key,omitempty"`
	Tags []*ElementDescription `xml:"tags,omitempty"`
}

type ArrayOfEnumDescription struct {
	EnumDescription []*EnumDescription `xml:"EnumDescription,omitempty"`
}

type ExtendedDescription struct {
	*Description

	MessageCatalogKeyPrefix string         `xml:"messageCatalogKeyPrefix,omitempty"`
	MessageArg              []*KeyAnyValue `xml:"messageArg,omitempty"`
}

type ExtendedElementDescription struct {
	*ElementDescription

	MessageCatalogKeyPrefix string         `xml:"messageCatalogKeyPrefix,omitempty"`
	MessageArg              []*KeyAnyValue `xml:"messageArg,omitempty"`
}

type ExtensionServerInfo struct {
	*DynamicData

	Url              string       `xml:"url,omitempty"`
	Description      *Description `xml:"description,omitempty"`
	Company          string       `xml:"company,omitempty"`
	Type_            string       `xml:"type,omitempty"`
	AdminEmail       []string     `xml:"adminEmail,omitempty"`
	ServerThumbprint string       `xml:"serverThumbprint,omitempty"`
}

type ArrayOfExtensionServerInfo struct {
	ExtensionServerInfo []*ExtensionServerInfo `xml:"ExtensionServerInfo,omitempty"`
}

type ExtensionClientInfo struct {
	*DynamicData

	Version     string       `xml:"version,omitempty"`
	Description *Description `xml:"description,omitempty"`
	Company     string       `xml:"company,omitempty"`
	Type_       string       `xml:"type,omitempty"`
	Url         string       `xml:"url,omitempty"`
}

type ArrayOfExtensionClientInfo struct {
	ExtensionClientInfo []*ExtensionClientInfo `xml:"ExtensionClientInfo,omitempty"`
}

type ExtensionTaskTypeInfo struct {
	*DynamicData

	TaskID string `xml:"taskID,omitempty"`
}

type ArrayOfExtensionTaskTypeInfo struct {
	ExtensionTaskTypeInfo []*ExtensionTaskTypeInfo `xml:"ExtensionTaskTypeInfo,omitempty"`
}

type ExtensionEventTypeInfo struct {
	*DynamicData

	EventID         string `xml:"eventID,omitempty"`
	EventTypeSchema string `xml:"eventTypeSchema,omitempty"`
}

type ArrayOfExtensionEventTypeInfo struct {
	ExtensionEventTypeInfo []*ExtensionEventTypeInfo `xml:"ExtensionEventTypeInfo,omitempty"`
}

type ExtensionFaultTypeInfo struct {
	*DynamicData

	FaultID string `xml:"faultID,omitempty"`
}

type ArrayOfExtensionFaultTypeInfo struct {
	ExtensionFaultTypeInfo []*ExtensionFaultTypeInfo `xml:"ExtensionFaultTypeInfo,omitempty"`
}

type ExtensionPrivilegeInfo struct {
	*DynamicData

	PrivID        string `xml:"privID,omitempty"`
	PrivGroupName string `xml:"privGroupName,omitempty"`
}

type ArrayOfExtensionPrivilegeInfo struct {
	ExtensionPrivilegeInfo []*ExtensionPrivilegeInfo `xml:"ExtensionPrivilegeInfo,omitempty"`
}

type ExtensionResourceInfo struct {
	*DynamicData

	Locale string      `xml:"locale,omitempty"`
	Module string      `xml:"module,omitempty"`
	Data   []*KeyValue `xml:"data,omitempty"`
}

type ArrayOfExtensionResourceInfo struct {
	ExtensionResourceInfo []*ExtensionResourceInfo `xml:"ExtensionResourceInfo,omitempty"`
}

type ExtensionHealthInfo struct {
	*DynamicData

	Url string `xml:"url,omitempty"`
}

type ExtensionOvfConsumerInfo struct {
	*DynamicData

	CallbackUrl string   `xml:"callbackUrl,omitempty"`
	SectionType []string `xml:"sectionType,omitempty"`
}

type Extension struct {
	*DynamicData

	Description            *Description              `xml:"description,omitempty"`
	Key                    string                    `xml:"key,omitempty"`
	Company                string                    `xml:"company,omitempty"`
	Type_                  string                    `xml:"type,omitempty"`
	Version                string                    `xml:"version,omitempty"`
	SubjectName            string                    `xml:"subjectName,omitempty"`
	Server                 []*ExtensionServerInfo    `xml:"server,omitempty"`
	Client                 []*ExtensionClientInfo    `xml:"client,omitempty"`
	TaskList               []*ExtensionTaskTypeInfo  `xml:"taskList,omitempty"`
	EventList              []*ExtensionEventTypeInfo `xml:"eventList,omitempty"`
	FaultList              []*ExtensionFaultTypeInfo `xml:"faultList,omitempty"`
	PrivilegeList          []*ExtensionPrivilegeInfo `xml:"privilegeList,omitempty"`
	ResourceList           []*ExtensionResourceInfo  `xml:"resourceList,omitempty"`
	LastHeartbeatTime      time.Time                 `xml:"lastHeartbeatTime,omitempty"`
	HealthInfo             *ExtensionHealthInfo      `xml:"healthInfo,omitempty"`
	OvfConsumerInfo        *ExtensionOvfConsumerInfo `xml:"ovfConsumerInfo,omitempty"`
	ExtendedProductInfo    *ExtExtendedProductInfo   `xml:"extendedProductInfo,omitempty"`
	ManagedEntityInfo      []*ExtManagedEntityInfo   `xml:"managedEntityInfo,omitempty"`
	ShownInSolutionManager bool                      `xml:"shownInSolutionManager,omitempty"`
	SolutionManagerInfo    *ExtSolutionManagerInfo   `xml:"solutionManagerInfo,omitempty"`
}

type ArrayOfExtension struct {
	Extension []*Extension `xml:"Extension,omitempty"`
}

type ExtensionManagerIpAllocationUsage struct {
	*DynamicData

	ExtensionKey string `xml:"extensionKey,omitempty"`
	NumAddresses int32  `xml:"numAddresses,omitempty"`
}

type ArrayOfExtensionManagerIpAllocationUsage struct {
	ExtensionManagerIpAllocationUsage []*ExtensionManagerIpAllocationUsage `xml:"ExtensionManagerIpAllocationUsage,omitempty"`
}

type ReplicationVmProgressInfo struct {
	*DynamicData

	Progress              int32 `xml:"progress,omitempty"`
	BytesTransferred      int64 `xml:"bytesTransferred,omitempty"`
	BytesToTransfer       int64 `xml:"bytesToTransfer,omitempty"`
	ChecksumTotalBytes    int64 `xml:"checksumTotalBytes,omitempty"`
	ChecksumComparedBytes int64 `xml:"checksumComparedBytes,omitempty"`
}

type HbrManagerReplicationVmInfo struct {
	*DynamicData

	State        string                     `xml:"state,omitempty"`
	ProgressInfo *ReplicationVmProgressInfo `xml:"progressInfo,omitempty"`
	ImageId      string                     `xml:"imageId,omitempty"`
	LastError    *LocalizedMethodFault      `xml:"lastError,omitempty"`
}

type HostServiceTicket struct {
	*DynamicData

	Host           string `xml:"host,omitempty"`
	Port           int32  `xml:"port,omitempty"`
	SslThumbprint  string `xml:"sslThumbprint,omitempty"`
	Service        string `xml:"service,omitempty"`
	ServiceVersion string `xml:"serviceVersion,omitempty"`
	SessionId      string `xml:"sessionId,omitempty"`
}

type HostSystemReconnectSpec struct {
	*DynamicData

	SyncState bool `xml:"syncState,omitempty"`
}

type HttpNfcLeaseDatastoreLeaseInfo struct {
	*DynamicData

	DatastoreKey string                  `xml:"datastoreKey,omitempty"`
	Hosts        []*HttpNfcLeaseHostInfo `xml:"hosts,omitempty"`
}

type ArrayOfHttpNfcLeaseDatastoreLeaseInfo struct {
	HttpNfcLeaseDatastoreLeaseInfo []*HttpNfcLeaseDatastoreLeaseInfo `xml:"HttpNfcLeaseDatastoreLeaseInfo,omitempty"`
}

type HttpNfcLeaseHostInfo struct {
	*DynamicData

	Url           string `xml:"url,omitempty"`
	SslThumbprint string `xml:"sslThumbprint,omitempty"`
}

type ArrayOfHttpNfcLeaseHostInfo struct {
	HttpNfcLeaseHostInfo []*HttpNfcLeaseHostInfo `xml:"HttpNfcLeaseHostInfo,omitempty"`
}

type HttpNfcLeaseInfo struct {
	*DynamicData

	Lease                 *ManagedObjectReference           `xml:"lease,omitempty"`
	Entity                *ManagedObjectReference           `xml:"entity,omitempty"`
	DeviceUrl             []*HttpNfcLeaseDeviceUrl          `xml:"deviceUrl,omitempty"`
	TotalDiskCapacityInKB int64                             `xml:"totalDiskCapacityInKB,omitempty"`
	LeaseTimeout          int32                             `xml:"leaseTimeout,omitempty"`
	HostMap               []*HttpNfcLeaseDatastoreLeaseInfo `xml:"hostMap,omitempty"`
}

type HttpNfcLeaseDeviceUrl struct {
	*DynamicData

	Key           string `xml:"key,omitempty"`
	ImportKey     string `xml:"importKey,omitempty"`
	Url           string `xml:"url,omitempty"`
	SslThumbprint string `xml:"sslThumbprint,omitempty"`
	Disk          bool   `xml:"disk,omitempty"`
	TargetId      string `xml:"targetId,omitempty"`
	DatastoreKey  string `xml:"datastoreKey,omitempty"`
	FileSize      int64  `xml:"fileSize,omitempty"`
}

type ArrayOfHttpNfcLeaseDeviceUrl struct {
	HttpNfcLeaseDeviceUrl []*HttpNfcLeaseDeviceUrl `xml:"HttpNfcLeaseDeviceUrl,omitempty"`
}

type HttpNfcLeaseManifestEntry struct {
	*DynamicData

	Key           string `xml:"key,omitempty"`
	Sha1          string `xml:"sha1,omitempty"`
	Size          int64  `xml:"size,omitempty"`
	Disk          bool   `xml:"disk,omitempty"`
	Capacity      int64  `xml:"capacity,omitempty"`
	PopulatedSize int64  `xml:"populatedSize,omitempty"`
}

type ArrayOfHttpNfcLeaseManifestEntry struct {
	HttpNfcLeaseManifestEntry []*HttpNfcLeaseManifestEntry `xml:"HttpNfcLeaseManifestEntry,omitempty"`
}

type ImportSpec struct {
	*DynamicData

	EntityConfig     *VAppEntityConfigInfo `xml:"entityConfig,omitempty"`
	InstantiationOst *OvfConsumerOstNode   `xml:"instantiationOst,omitempty"`
}

type ArrayOfImportSpec struct {
	ImportSpec []*ImportSpec `xml:"ImportSpec,omitempty"`
}

type InheritablePolicy struct {
	*DynamicData

	Inherited bool `xml:"inherited,omitempty"`
}

type IntExpression struct {
	*NegatableExpression

	Value int32 `xml:"value,omitempty"`
}

type IntPolicy struct {
	*InheritablePolicy

	Value int32 `xml:"value,omitempty"`
}

type IpAddress struct {
	*NegatableExpression
}

type IpPoolManagerIpAllocation struct {
	*DynamicData

	IpAddress    string `xml:"ipAddress,omitempty"`
	AllocationId string `xml:"allocationId,omitempty"`
}

type ArrayOfIpPoolManagerIpAllocation struct {
	IpPoolManagerIpAllocation []*IpPoolManagerIpAllocation `xml:"IpPoolManagerIpAllocation,omitempty"`
}

type IpRange struct {
	*IpAddress

	AddressPrefix string `xml:"addressPrefix,omitempty"`
	PrefixLength  int32  `xml:"prefixLength,omitempty"`
}

type KeyValue struct {
	*DynamicData

	Key   string `xml:"key,omitempty"`
	Value string `xml:"value,omitempty"`
}

type ArrayOfKeyValue struct {
	KeyValue []*KeyValue `xml:"KeyValue,omitempty"`
}

type LatencySensitivity struct {
	*DynamicData

	Level       *LatencySensitivitySensitivityLevel `xml:"level,omitempty"`
	Sensitivity int32                               `xml:"sensitivity,omitempty"`
}

type LicenseAssignmentManagerLicenseAssignment struct {
	*DynamicData

	EntityId          string                     `xml:"entityId,omitempty"`
	Scope             string                     `xml:"scope,omitempty"`
	EntityDisplayName string                     `xml:"entityDisplayName,omitempty"`
	AssignedLicense   *LicenseManagerLicenseInfo `xml:"assignedLicense,omitempty"`
	Properties        []*KeyAnyValue             `xml:"properties,omitempty"`
}

type ArrayOfLicenseAssignmentManagerLicenseAssignment struct {
	LicenseAssignmentManagerLicenseAssignment []*LicenseAssignmentManagerLicenseAssignment `xml:"LicenseAssignmentManagerLicenseAssignment,omitempty"`
}

type LicenseSource struct {
	*DynamicData
}

type LicenseServerSource struct {
	*LicenseSource

	LicenseServer string `xml:"licenseServer,omitempty"`
}

type LocalLicenseSource struct {
	*LicenseSource

	LicenseKeys string `xml:"licenseKeys,omitempty"`
}

type EvaluationLicenseSource struct {
	*LicenseSource

	RemainingHours int64 `xml:"remainingHours,omitempty"`
}

type LicenseFeatureInfo struct {
	*DynamicData

	Key                string                   `xml:"key,omitempty"`
	FeatureName        string                   `xml:"featureName,omitempty"`
	FeatureDescription string                   `xml:"featureDescription,omitempty"`
	State              *LicenseFeatureInfoState `xml:"state,omitempty"`
	CostUnit           string                   `xml:"costUnit,omitempty"`
	SourceRestriction  string                   `xml:"sourceRestriction,omitempty"`
	DependentKey       []string                 `xml:"dependentKey,omitempty"`
	Edition            bool                     `xml:"edition,omitempty"`
	ExpiresOn          time.Time                `xml:"expiresOn,omitempty"`
}

type ArrayOfLicenseFeatureInfo struct {
	LicenseFeatureInfo []*LicenseFeatureInfo `xml:"LicenseFeatureInfo,omitempty"`
}

type LicenseReservationInfo struct {
	*DynamicData

	Key      string                       `xml:"key,omitempty"`
	State    *LicenseReservationInfoState `xml:"state,omitempty"`
	Required int32                        `xml:"required,omitempty"`
}

type ArrayOfLicenseReservationInfo struct {
	LicenseReservationInfo []*LicenseReservationInfo `xml:"LicenseReservationInfo,omitempty"`
}

type LicenseAvailabilityInfo struct {
	*DynamicData

	Feature   *LicenseFeatureInfo `xml:"feature,omitempty"`
	Total     int32               `xml:"total,omitempty"`
	Available int32               `xml:"available,omitempty"`
}

type ArrayOfLicenseAvailabilityInfo struct {
	LicenseAvailabilityInfo []*LicenseAvailabilityInfo `xml:"LicenseAvailabilityInfo,omitempty"`
}

type LicenseDiagnostics struct {
	*DynamicData

	SourceLastChanged      time.Time            `xml:"sourceLastChanged,omitempty"`
	SourceLost             string               `xml:"sourceLost,omitempty"`
	SourceLatency          float32              `xml:"sourceLatency,omitempty"`
	LicenseRequests        string               `xml:"licenseRequests,omitempty"`
	LicenseRequestFailures string               `xml:"licenseRequestFailures,omitempty"`
	LicenseFeatureUnknowns string               `xml:"licenseFeatureUnknowns,omitempty"`
	OpState                *LicenseManagerState `xml:"opState,omitempty"`
	LastStatusUpdate       time.Time            `xml:"lastStatusUpdate,omitempty"`
	OpFailureMessage       string               `xml:"opFailureMessage,omitempty"`
}

type LicenseUsageInfo struct {
	*DynamicData

	Source          *LicenseSource            `xml:"source,omitempty"`
	SourceAvailable bool                      `xml:"sourceAvailable,omitempty"`
	ReservationInfo []*LicenseReservationInfo `xml:"reservationInfo,omitempty"`
	FeatureInfo     []*LicenseFeatureInfo     `xml:"featureInfo,omitempty"`
}

type LicenseManagerEvaluationInfo struct {
	*DynamicData

	Properties []*KeyAnyValue `xml:"properties,omitempty"`
}

type HostLicensableResourceInfo struct {
	*DynamicData

	Resource []*KeyAnyValue `xml:"resource,omitempty"`
}

type LicenseManagerLicenseInfo struct {
	*DynamicData

	LicenseKey string         `xml:"licenseKey,omitempty"`
	EditionKey string         `xml:"editionKey,omitempty"`
	Name       string         `xml:"name,omitempty"`
	Total      int32          `xml:"total,omitempty"`
	Used       int32          `xml:"used,omitempty"`
	CostUnit   string         `xml:"costUnit,omitempty"`
	Properties []*KeyAnyValue `xml:"properties,omitempty"`
	Labels     []*KeyValue    `xml:"labels,omitempty"`
}

type ArrayOfLicenseManagerLicenseInfo struct {
	LicenseManagerLicenseInfo []*LicenseManagerLicenseInfo `xml:"LicenseManagerLicenseInfo,omitempty"`
}

type LocalizationManagerMessageCatalog struct {
	*DynamicData

	ModuleName   string    `xml:"moduleName,omitempty"`
	CatalogName  string    `xml:"catalogName,omitempty"`
	Locale       string    `xml:"locale,omitempty"`
	CatalogUri   string    `xml:"catalogUri,omitempty"`
	LastModified time.Time `xml:"lastModified,omitempty"`
	Md5sum       string    `xml:"md5sum,omitempty"`
	Version      string    `xml:"version,omitempty"`
}

type ArrayOfLocalizationManagerMessageCatalog struct {
	LocalizationManagerMessageCatalog []*LocalizationManagerMessageCatalog `xml:"LocalizationManagerMessageCatalog,omitempty"`
}

type LongPolicy struct {
	*InheritablePolicy

	Value int64 `xml:"value,omitempty"`
}

type MacAddress struct {
	*NegatableExpression
}

type MacRange struct {
	*MacAddress

	Address string `xml:"address,omitempty"`
	Mask    string `xml:"mask,omitempty"`
}

type MethodDescription struct {
	*Description

	Key string `xml:"key,omitempty"`
}

type NegatableExpression struct {
	*DynamicData

	Negate bool `xml:"negate,omitempty"`
}

type NetworkSummary struct {
	*DynamicData

	Network    *ManagedObjectReference `xml:"network,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Accessible bool                    `xml:"accessible,omitempty"`
	IpPoolName string                  `xml:"ipPoolName,omitempty"`
	IpPoolId   int32                   `xml:"ipPoolId,omitempty"`
}

type NumericRange struct {
	*DynamicData

	Start int32 `xml:"start,omitempty"`
	End   int32 `xml:"end,omitempty"`
}

type ArrayOfNumericRange struct {
	NumericRange []*NumericRange `xml:"NumericRange,omitempty"`
}

type OpaqueNetworkSummary struct {
	*NetworkSummary

	OpaqueNetworkId   string `xml:"opaqueNetworkId,omitempty"`
	OpaqueNetworkType string `xml:"opaqueNetworkType,omitempty"`
}

type OvfConsumerOvfSection struct {
	*DynamicData

	LineNumber int32  `xml:"lineNumber,omitempty"`
	Xml        string `xml:"xml,omitempty"`
}

type ArrayOfOvfConsumerOvfSection struct {
	OvfConsumerOvfSection []*OvfConsumerOvfSection `xml:"OvfConsumerOvfSection,omitempty"`
}

type OvfConsumerOstNode struct {
	*DynamicData

	Id      string                   `xml:"id,omitempty"`
	Type_   string                   `xml:"type,omitempty"`
	Section []*OvfConsumerOvfSection `xml:"section,omitempty"`
	Child   []*OvfConsumerOstNode    `xml:"child,omitempty"`
	Entity  *ManagedObjectReference  `xml:"entity,omitempty"`
}

type ArrayOfOvfConsumerOstNode struct {
	OvfConsumerOstNode []*OvfConsumerOstNode `xml:"OvfConsumerOstNode,omitempty"`
}

type OvfOptionInfo struct {
	*DynamicData

	Option      string              `xml:"option,omitempty"`
	Description *LocalizableMessage `xml:"description,omitempty"`
}

type ArrayOfOvfOptionInfo struct {
	OvfOptionInfo []*OvfOptionInfo `xml:"OvfOptionInfo,omitempty"`
}

type OvfDeploymentOption struct {
	*DynamicData

	Key         string `xml:"key,omitempty"`
	Label       string `xml:"label,omitempty"`
	Description string `xml:"description,omitempty"`
}

type ArrayOfOvfDeploymentOption struct {
	OvfDeploymentOption []*OvfDeploymentOption `xml:"OvfDeploymentOption,omitempty"`
}

type OvfManagerCommonParams struct {
	*DynamicData

	Locale           string      `xml:"locale,omitempty"`
	DeploymentOption string      `xml:"deploymentOption,omitempty"`
	MsgBundle        []*KeyValue `xml:"msgBundle,omitempty"`
	ImportOption     []string    `xml:"importOption,omitempty"`
}

type OvfValidateHostParams struct {
	*OvfManagerCommonParams
}

type OvfValidateHostResult struct {
	*DynamicData

	DownloadSize              int64                   `xml:"downloadSize,omitempty"`
	FlatDeploymentSize        int64                   `xml:"flatDeploymentSize,omitempty"`
	SparseDeploymentSize      int64                   `xml:"sparseDeploymentSize,omitempty"`
	Error                     []*LocalizedMethodFault `xml:"error,omitempty"`
	Warning                   []*LocalizedMethodFault `xml:"warning,omitempty"`
	SupportedDiskProvisioning []string                `xml:"supportedDiskProvisioning,omitempty"`
}

type OvfParseDescriptorParams struct {
	*OvfManagerCommonParams
}

type OvfParseDescriptorResult struct {
	*DynamicData

	Eula                            []string                `xml:"eula,omitempty"`
	Network                         []*OvfNetworkInfo       `xml:"network,omitempty"`
	IpAllocationScheme              []string                `xml:"ipAllocationScheme,omitempty"`
	IpProtocols                     []string                `xml:"ipProtocols,omitempty"`
	Property                        []*VAppPropertyInfo     `xml:"property,omitempty"`
	ProductInfo                     *VAppProductInfo        `xml:"productInfo,omitempty"`
	Annotation                      string                  `xml:"annotation,omitempty"`
	ApproximateDownloadSize         int64                   `xml:"approximateDownloadSize,omitempty"`
	ApproximateFlatDeploymentSize   int64                   `xml:"approximateFlatDeploymentSize,omitempty"`
	ApproximateSparseDeploymentSize int64                   `xml:"approximateSparseDeploymentSize,omitempty"`
	DefaultEntityName               string                  `xml:"defaultEntityName,omitempty"`
	VirtualApp                      bool                    `xml:"virtualApp,omitempty"`
	DeploymentOption                []*OvfDeploymentOption  `xml:"deploymentOption,omitempty"`
	DefaultDeploymentOption         string                  `xml:"defaultDeploymentOption,omitempty"`
	EntityName                      []*KeyValue             `xml:"entityName,omitempty"`
	AnnotatedOst                    *OvfConsumerOstNode     `xml:"annotatedOst,omitempty"`
	Error                           []*LocalizedMethodFault `xml:"error,omitempty"`
	Warning                         []*LocalizedMethodFault `xml:"warning,omitempty"`
}

type OvfNetworkInfo struct {
	*DynamicData

	Name        string `xml:"name,omitempty"`
	Description string `xml:"description,omitempty"`
}

type ArrayOfOvfNetworkInfo struct {
	OvfNetworkInfo []*OvfNetworkInfo `xml:"OvfNetworkInfo,omitempty"`
}

type OvfCreateImportSpecParams struct {
	*OvfManagerCommonParams

	EntityName         string                  `xml:"entityName,omitempty"`
	HostSystem         *ManagedObjectReference `xml:"hostSystem,omitempty"`
	NetworkMapping     []*OvfNetworkMapping    `xml:"networkMapping,omitempty"`
	IpAllocationPolicy string                  `xml:"ipAllocationPolicy,omitempty"`
	IpProtocol         string                  `xml:"ipProtocol,omitempty"`
	PropertyMapping    []*KeyValue             `xml:"propertyMapping,omitempty"`
	ResourceMapping    []*OvfResourceMap       `xml:"resourceMapping,omitempty"`
	DiskProvisioning   string                  `xml:"diskProvisioning,omitempty"`
	InstantiationOst   *OvfConsumerOstNode     `xml:"instantiationOst,omitempty"`
}

type OvfResourceMap struct {
	*DynamicData

	Source       string                  `xml:"source,omitempty"`
	Parent       *ManagedObjectReference `xml:"parent,omitempty"`
	ResourceSpec *ResourceConfigSpec     `xml:"resourceSpec,omitempty"`
	Datastore    *ManagedObjectReference `xml:"datastore,omitempty"`
}

type ArrayOfOvfResourceMap struct {
	OvfResourceMap []*OvfResourceMap `xml:"OvfResourceMap,omitempty"`
}

type OvfNetworkMapping struct {
	*DynamicData

	Name    string                  `xml:"name,omitempty"`
	Network *ManagedObjectReference `xml:"network,omitempty"`
}

type ArrayOfOvfNetworkMapping struct {
	OvfNetworkMapping []*OvfNetworkMapping `xml:"OvfNetworkMapping,omitempty"`
}

type OvfCreateImportSpecResult struct {
	*DynamicData

	ImportSpec *ImportSpec             `xml:"importSpec,omitempty"`
	FileItem   []*OvfFileItem          `xml:"fileItem,omitempty"`
	Warning    []*LocalizedMethodFault `xml:"warning,omitempty"`
	Error      []*LocalizedMethodFault `xml:"error,omitempty"`
}

type OvfFileItem struct {
	*DynamicData

	DeviceId          string `xml:"deviceId,omitempty"`
	Path              string `xml:"path,omitempty"`
	CompressionMethod string `xml:"compressionMethod,omitempty"`
	ChunkSize         int64  `xml:"chunkSize,omitempty"`
	Size              int64  `xml:"size,omitempty"`
	CimType           int32  `xml:"cimType,omitempty"`
	Create            bool   `xml:"create,omitempty"`
}

type ArrayOfOvfFileItem struct {
	OvfFileItem []*OvfFileItem `xml:"OvfFileItem,omitempty"`
}

type OvfCreateDescriptorParams struct {
	*DynamicData

	OvfFiles          []*OvfFile              `xml:"ovfFiles,omitempty"`
	Name              string                  `xml:"name,omitempty"`
	Description       string                  `xml:"description,omitempty"`
	IncludeImageFiles bool                    `xml:"includeImageFiles,omitempty"`
	ExportOption      []string                `xml:"exportOption,omitempty"`
	Snapshot          *ManagedObjectReference `xml:"snapshot,omitempty"`
}

type OvfCreateDescriptorResult struct {
	*DynamicData

	OvfDescriptor     string                  `xml:"ovfDescriptor,omitempty"`
	Error             []*LocalizedMethodFault `xml:"error,omitempty"`
	Warning           []*LocalizedMethodFault `xml:"warning,omitempty"`
	IncludeImageFiles bool                    `xml:"includeImageFiles,omitempty"`
}

type OvfFile struct {
	*DynamicData

	DeviceId          string `xml:"deviceId,omitempty"`
	Path              string `xml:"path,omitempty"`
	CompressionMethod string `xml:"compressionMethod,omitempty"`
	ChunkSize         int64  `xml:"chunkSize,omitempty"`
	Size              int64  `xml:"size,omitempty"`
	Capacity          int64  `xml:"capacity,omitempty"`
	PopulatedSize     int64  `xml:"populatedSize,omitempty"`
}

type ArrayOfOvfFile struct {
	OvfFile []*OvfFile `xml:"OvfFile,omitempty"`
}

type PasswordField struct {
	*DynamicData

	Value string `xml:"value,omitempty"`
}

type PerformanceDescription struct {
	*DynamicData

	CounterType []*ElementDescription `xml:"counterType,omitempty"`
	StatsType   []*ElementDescription `xml:"statsType,omitempty"`
}

type PerfProviderSummary struct {
	*DynamicData

	Entity           *ManagedObjectReference `xml:"entity,omitempty"`
	CurrentSupported bool                    `xml:"currentSupported,omitempty"`
	SummarySupported bool                    `xml:"summarySupported,omitempty"`
	RefreshRate      int32                   `xml:"refreshRate,omitempty"`
}

type PerfCounterInfo struct {
	*DynamicData

	Key                 int32               `xml:"key,omitempty"`
	NameInfo            *ElementDescription `xml:"nameInfo,omitempty"`
	GroupInfo           *ElementDescription `xml:"groupInfo,omitempty"`
	UnitInfo            *ElementDescription `xml:"unitInfo,omitempty"`
	RollupType          *PerfSummaryType    `xml:"rollupType,omitempty"`
	StatsType           *PerfStatsType      `xml:"statsType,omitempty"`
	Level               int32               `xml:"level,omitempty"`
	PerDeviceLevel      int32               `xml:"perDeviceLevel,omitempty"`
	AssociatedCounterId []int32             `xml:"associatedCounterId,omitempty"`
}

type ArrayOfPerfCounterInfo struct {
	PerfCounterInfo []*PerfCounterInfo `xml:"PerfCounterInfo,omitempty"`
}

type PerfMetricId struct {
	*DynamicData

	CounterId int32  `xml:"counterId,omitempty"`
	Instance  string `xml:"instance,omitempty"`
}

type ArrayOfPerfMetricId struct {
	PerfMetricId []*PerfMetricId `xml:"PerfMetricId,omitempty"`
}

type PerfQuerySpec struct {
	*DynamicData

	Entity     *ManagedObjectReference `xml:"entity,omitempty"`
	StartTime  time.Time               `xml:"startTime,omitempty"`
	EndTime    time.Time               `xml:"endTime,omitempty"`
	MaxSample  int32                   `xml:"maxSample,omitempty"`
	MetricId   []*PerfMetricId         `xml:"metricId,omitempty"`
	IntervalId int32                   `xml:"intervalId,omitempty"`
	Format     string                  `xml:"format,omitempty"`
}

type ArrayOfPerfQuerySpec struct {
	PerfQuerySpec []*PerfQuerySpec `xml:"PerfQuerySpec,omitempty"`
}

type PerfSampleInfo struct {
	*DynamicData

	Timestamp time.Time `xml:"timestamp,omitempty"`
	Interval  int32     `xml:"interval,omitempty"`
}

type ArrayOfPerfSampleInfo struct {
	PerfSampleInfo []*PerfSampleInfo `xml:"PerfSampleInfo,omitempty"`
}

type PerfMetricSeries struct {
	*DynamicData

	Id *PerfMetricId `xml:"id,omitempty"`
}

type ArrayOfPerfMetricSeries struct {
	PerfMetricSeries []*PerfMetricSeries `xml:"PerfMetricSeries,omitempty"`
}

type PerfMetricIntSeries struct {
	*PerfMetricSeries

	Value []int64 `xml:"value,omitempty"`
}

type PerfMetricSeriesCSV struct {
	*PerfMetricSeries

	Value string `xml:"value,omitempty"`
}

type ArrayOfPerfMetricSeriesCSV struct {
	PerfMetricSeriesCSV []*PerfMetricSeriesCSV `xml:"PerfMetricSeriesCSV,omitempty"`
}

type PerfEntityMetricBase struct {
	*DynamicData

	Entity *ManagedObjectReference `xml:"entity,omitempty"`
}

type ArrayOfPerfEntityMetricBase struct {
	PerfEntityMetricBase []*PerfEntityMetricBase `xml:"PerfEntityMetricBase,omitempty"`
}

type PerfEntityMetric struct {
	*PerfEntityMetricBase

	SampleInfo []*PerfSampleInfo   `xml:"sampleInfo,omitempty"`
	Value      []*PerfMetricSeries `xml:"value,omitempty"`
}

type PerfEntityMetricCSV struct {
	*PerfEntityMetricBase

	SampleInfoCSV string                 `xml:"sampleInfoCSV,omitempty"`
	Value         []*PerfMetricSeriesCSV `xml:"value,omitempty"`
}

type PerfCompositeMetric struct {
	*DynamicData

	Entity      *PerfEntityMetricBase   `xml:"entity,omitempty"`
	ChildEntity []*PerfEntityMetricBase `xml:"childEntity,omitempty"`
}

type PerformanceManagerCounterLevelMapping struct {
	*DynamicData

	CounterId      int32 `xml:"counterId,omitempty"`
	AggregateLevel int32 `xml:"aggregateLevel,omitempty"`
	PerDeviceLevel int32 `xml:"perDeviceLevel,omitempty"`
}

type ArrayOfPerformanceManagerCounterLevelMapping struct {
	PerformanceManagerCounterLevelMapping []*PerformanceManagerCounterLevelMapping `xml:"PerformanceManagerCounterLevelMapping,omitempty"`
}

type PerfInterval struct {
	*DynamicData

	Key            int32  `xml:"key,omitempty"`
	SamplingPeriod int32  `xml:"samplingPeriod,omitempty"`
	Name           string `xml:"name,omitempty"`
	Length         int32  `xml:"length,omitempty"`
	Level          int32  `xml:"level,omitempty"`
	Enabled        bool   `xml:"enabled,omitempty"`
}

type ArrayOfPerfInterval struct {
	PerfInterval []*PerfInterval `xml:"PerfInterval,omitempty"`
}

type PosixUserSearchResult struct {
	*UserSearchResult

	Id          int32 `xml:"id,omitempty"`
	ShellAccess bool  `xml:"shellAccess,omitempty"`
}

type PrivilegePolicyDef struct {
	*DynamicData

	CreatePrivilege string `xml:"createPrivilege,omitempty"`
	ReadPrivilege   string `xml:"readPrivilege,omitempty"`
	UpdatePrivilege string `xml:"updatePrivilege,omitempty"`
	DeletePrivilege string `xml:"deletePrivilege,omitempty"`
}

type ResourceAllocationInfo struct {
	*DynamicData

	Reservation           int64       `xml:"reservation,omitempty"`
	ExpandableReservation bool        `xml:"expandableReservation,omitempty"`
	Limit                 int64       `xml:"limit,omitempty"`
	Shares                *SharesInfo `xml:"shares,omitempty"`
	OverheadLimit         int64       `xml:"overheadLimit,omitempty"`
}

type ResourceAllocationOption struct {
	*DynamicData

	SharesOption *SharesOption `xml:"sharesOption,omitempty"`
}

type ResourceConfigOption struct {
	*DynamicData

	CpuAllocationOption    *ResourceAllocationOption `xml:"cpuAllocationOption,omitempty"`
	MemoryAllocationOption *ResourceAllocationOption `xml:"memoryAllocationOption,omitempty"`
}

type ResourceConfigSpec struct {
	*DynamicData

	Entity           *ManagedObjectReference `xml:"entity,omitempty"`
	ChangeVersion    string                  `xml:"changeVersion,omitempty"`
	LastModified     time.Time               `xml:"lastModified,omitempty"`
	CpuAllocation    *ResourceAllocationInfo `xml:"cpuAllocation,omitempty"`
	MemoryAllocation *ResourceAllocationInfo `xml:"memoryAllocation,omitempty"`
}

type ArrayOfResourceConfigSpec struct {
	ResourceConfigSpec []*ResourceConfigSpec `xml:"ResourceConfigSpec,omitempty"`
}

type DatabaseSizeParam struct {
	*DynamicData

	InventoryDesc *InventoryDescription             `xml:"inventoryDesc,omitempty"`
	PerfStatsDesc *PerformanceStatisticsDescription `xml:"perfStatsDesc,omitempty"`
}

type InventoryDescription struct {
	*DynamicData

	NumHosts           int32 `xml:"numHosts,omitempty"`
	NumVirtualMachines int32 `xml:"numVirtualMachines,omitempty"`
	NumResourcePools   int32 `xml:"numResourcePools,omitempty"`
	NumClusters        int32 `xml:"numClusters,omitempty"`
	NumCpuDev          int32 `xml:"numCpuDev,omitempty"`
	NumNetDev          int32 `xml:"numNetDev,omitempty"`
	NumDiskDev         int32 `xml:"numDiskDev,omitempty"`
	NumvCpuDev         int32 `xml:"numvCpuDev,omitempty"`
	NumvNetDev         int32 `xml:"numvNetDev,omitempty"`
	NumvDiskDev        int32 `xml:"numvDiskDev,omitempty"`
}

type PerformanceStatisticsDescription struct {
	*DynamicData

	Intervals []*PerfInterval `xml:"intervals,omitempty"`
}

type DatabaseSizeEstimate struct {
	*DynamicData

	Size int64 `xml:"size,omitempty"`
}

type ResourcePoolResourceUsage struct {
	*DynamicData

	ReservationUsed      int64 `xml:"reservationUsed,omitempty"`
	ReservationUsedForVm int64 `xml:"reservationUsedForVm,omitempty"`
	UnreservedForPool    int64 `xml:"unreservedForPool,omitempty"`
	UnreservedForVm      int64 `xml:"unreservedForVm,omitempty"`
	OverallUsage         int64 `xml:"overallUsage,omitempty"`
	MaxUsage             int64 `xml:"maxUsage,omitempty"`
}

type ResourcePoolRuntimeInfo struct {
	*DynamicData

	Memory        *ResourcePoolResourceUsage `xml:"memory,omitempty"`
	Cpu           *ResourcePoolResourceUsage `xml:"cpu,omitempty"`
	OverallStatus *ManagedEntityStatus       `xml:"overallStatus,omitempty"`
}

type ResourcePoolQuickStats struct {
	*DynamicData

	OverallCpuUsage              int64 `xml:"overallCpuUsage,omitempty"`
	OverallCpuDemand             int64 `xml:"overallCpuDemand,omitempty"`
	GuestMemoryUsage             int64 `xml:"guestMemoryUsage,omitempty"`
	HostMemoryUsage              int64 `xml:"hostMemoryUsage,omitempty"`
	DistributedCpuEntitlement    int64 `xml:"distributedCpuEntitlement,omitempty"`
	DistributedMemoryEntitlement int64 `xml:"distributedMemoryEntitlement,omitempty"`
	StaticCpuEntitlement         int32 `xml:"staticCpuEntitlement,omitempty"`
	StaticMemoryEntitlement      int32 `xml:"staticMemoryEntitlement,omitempty"`
	PrivateMemory                int64 `xml:"privateMemory,omitempty"`
	SharedMemory                 int64 `xml:"sharedMemory,omitempty"`
	SwappedMemory                int64 `xml:"swappedMemory,omitempty"`
	BalloonedMemory              int64 `xml:"balloonedMemory,omitempty"`
	OverheadMemory               int64 `xml:"overheadMemory,omitempty"`
	ConsumedOverheadMemory       int64 `xml:"consumedOverheadMemory,omitempty"`
	CompressedMemory             int64 `xml:"compressedMemory,omitempty"`
}

type ResourcePoolSummary struct {
	*DynamicData

	Name               string                   `xml:"name,omitempty"`
	Config             *ResourceConfigSpec      `xml:"config,omitempty"`
	Runtime            *ResourcePoolRuntimeInfo `xml:"runtime,omitempty"`
	QuickStats         *ResourcePoolQuickStats  `xml:"quickStats,omitempty"`
	ConfiguredMemoryMB int32                    `xml:"configuredMemoryMB,omitempty"`
}

type SelectionSet struct {
	*DynamicData
}

type ArrayOfSelectionSet struct {
	SelectionSet []*SelectionSet `xml:"SelectionSet,omitempty"`
}

type HostVMotionCompatibility struct {
	*DynamicData

	Host          *ManagedObjectReference `xml:"host,omitempty"`
	Compatibility []string                `xml:"compatibility,omitempty"`
}

type ArrayOfHostVMotionCompatibility struct {
	HostVMotionCompatibility []*HostVMotionCompatibility `xml:"HostVMotionCompatibility,omitempty"`
}

type ProductComponentInfo struct {
	*DynamicData

	Id      string `xml:"id,omitempty"`
	Name    string `xml:"name,omitempty"`
	Version string `xml:"version,omitempty"`
	Release int32  `xml:"release,omitempty"`
}

type ArrayOfProductComponentInfo struct {
	ProductComponentInfo []*ProductComponentInfo `xml:"ProductComponentInfo,omitempty"`
}

type ServiceContent struct {
	*DynamicData

	RootFolder                *ManagedObjectReference `xml:"rootFolder,omitempty"`
	PropertyCollector         *ManagedObjectReference `xml:"propertyCollector,omitempty"`
	ViewManager               *ManagedObjectReference `xml:"viewManager,omitempty"`
	About                     *AboutInfo              `xml:"about,omitempty"`
	Setting                   *ManagedObjectReference `xml:"setting,omitempty"`
	UserDirectory             *ManagedObjectReference `xml:"userDirectory,omitempty"`
	SessionManager            *ManagedObjectReference `xml:"sessionManager,omitempty"`
	AuthorizationManager      *ManagedObjectReference `xml:"authorizationManager,omitempty"`
	ServiceManager            *ManagedObjectReference `xml:"serviceManager,omitempty"`
	PerfManager               *ManagedObjectReference `xml:"perfManager,omitempty"`
	ScheduledTaskManager      *ManagedObjectReference `xml:"scheduledTaskManager,omitempty"`
	AlarmManager              *ManagedObjectReference `xml:"alarmManager,omitempty"`
	EventManager              *ManagedObjectReference `xml:"eventManager,omitempty"`
	TaskManager               *ManagedObjectReference `xml:"taskManager,omitempty"`
	ExtensionManager          *ManagedObjectReference `xml:"extensionManager,omitempty"`
	CustomizationSpecManager  *ManagedObjectReference `xml:"customizationSpecManager,omitempty"`
	CustomFieldsManager       *ManagedObjectReference `xml:"customFieldsManager,omitempty"`
	AccountManager            *ManagedObjectReference `xml:"accountManager,omitempty"`
	DiagnosticManager         *ManagedObjectReference `xml:"diagnosticManager,omitempty"`
	LicenseManager            *ManagedObjectReference `xml:"licenseManager,omitempty"`
	SearchIndex               *ManagedObjectReference `xml:"searchIndex,omitempty"`
	FileManager               *ManagedObjectReference `xml:"fileManager,omitempty"`
	DatastoreNamespaceManager *ManagedObjectReference `xml:"datastoreNamespaceManager,omitempty"`
	VirtualDiskManager        *ManagedObjectReference `xml:"virtualDiskManager,omitempty"`
	VirtualizationManager     *ManagedObjectReference `xml:"virtualizationManager,omitempty"`
	SnmpSystem                *ManagedObjectReference `xml:"snmpSystem,omitempty"`
	VmProvisioningChecker     *ManagedObjectReference `xml:"vmProvisioningChecker,omitempty"`
	VmCompatibilityChecker    *ManagedObjectReference `xml:"vmCompatibilityChecker,omitempty"`
	OvfManager                *ManagedObjectReference `xml:"ovfManager,omitempty"`
	IpPoolManager             *ManagedObjectReference `xml:"ipPoolManager,omitempty"`
	DvSwitchManager           *ManagedObjectReference `xml:"dvSwitchManager,omitempty"`
	HostProfileManager        *ManagedObjectReference `xml:"hostProfileManager,omitempty"`
	ClusterProfileManager     *ManagedObjectReference `xml:"clusterProfileManager,omitempty"`
	ComplianceManager         *ManagedObjectReference `xml:"complianceManager,omitempty"`
	LocalizationManager       *ManagedObjectReference `xml:"localizationManager,omitempty"`
	StorageResourceManager    *ManagedObjectReference `xml:"storageResourceManager,omitempty"`
	GuestOperationsManager    *ManagedObjectReference `xml:"guestOperationsManager,omitempty"`
}

type ServiceManagerServiceInfo struct {
	*DynamicData

	ServiceName string                  `xml:"serviceName,omitempty"`
	Location    []string                `xml:"location,omitempty"`
	Service     *ManagedObjectReference `xml:"service,omitempty"`
	Description string                  `xml:"description,omitempty"`
}

type ArrayOfServiceManagerServiceInfo struct {
	ServiceManagerServiceInfo []*ServiceManagerServiceInfo `xml:"ServiceManagerServiceInfo,omitempty"`
}

type SessionManagerLocalTicket struct {
	*DynamicData

	UserName         string `xml:"userName,omitempty"`
	PasswordFilePath string `xml:"passwordFilePath,omitempty"`
}

type SessionManagerGenericServiceTicket struct {
	*DynamicData

	Id            string `xml:"id,omitempty"`
	HostName      string `xml:"hostName,omitempty"`
	SslThumbprint string `xml:"sslThumbprint,omitempty"`
}

type SessionManagerServiceRequestSpec struct {
	*DynamicData
}

type SessionManagerVmomiServiceRequestSpec struct {
	*SessionManagerServiceRequestSpec

	Method string `xml:"method,omitempty"`
}

type SessionManagerHttpServiceRequestSpec struct {
	*SessionManagerServiceRequestSpec

	Method string `xml:"method,omitempty"`
	Url    string `xml:"url,omitempty"`
}

type SharesInfo struct {
	*DynamicData

	Shares int32        `xml:"shares,omitempty"`
	Level  *SharesLevel `xml:"level,omitempty"`
}

type SharesOption struct {
	*DynamicData

	SharesOption *IntOption   `xml:"sharesOption,omitempty"`
	DefaultLevel *SharesLevel `xml:"defaultLevel,omitempty"`
}

type SingleIp struct {
	*IpAddress

	Address string `xml:"address,omitempty"`
}

type SingleMac struct {
	*MacAddress

	Address string `xml:"address,omitempty"`
}

type StoragePodSummary struct {
	*DynamicData

	Name      string `xml:"name,omitempty"`
	Capacity  int64  `xml:"capacity,omitempty"`
	FreeSpace int64  `xml:"freeSpace,omitempty"`
}

type StorageIOAllocationInfo struct {
	*DynamicData

	Limit       int64       `xml:"limit,omitempty"`
	Shares      *SharesInfo `xml:"shares,omitempty"`
	Reservation int32       `xml:"reservation,omitempty"`
}

type StorageIOAllocationOption struct {
	*DynamicData

	LimitOption  *LongOption   `xml:"limitOption,omitempty"`
	SharesOption *SharesOption `xml:"sharesOption,omitempty"`
}

type StorageIORMInfo struct {
	*DynamicData

	Enabled                  bool   `xml:"enabled,omitempty"`
	CongestionThresholdMode  string `xml:"congestionThresholdMode,omitempty"`
	CongestionThreshold      int32  `xml:"congestionThreshold,omitempty"`
	PercentOfPeakThroughput  int32  `xml:"percentOfPeakThroughput,omitempty"`
	StatsCollectionEnabled   bool   `xml:"statsCollectionEnabled,omitempty"`
	StatsAggregationDisabled bool   `xml:"statsAggregationDisabled,omitempty"`
}

type StorageIORMConfigSpec struct {
	*DynamicData

	Enabled                  bool   `xml:"enabled,omitempty"`
	CongestionThresholdMode  string `xml:"congestionThresholdMode,omitempty"`
	CongestionThreshold      int32  `xml:"congestionThreshold,omitempty"`
	PercentOfPeakThroughput  int32  `xml:"percentOfPeakThroughput,omitempty"`
	StatsCollectionEnabled   bool   `xml:"statsCollectionEnabled,omitempty"`
	StatsAggregationDisabled bool   `xml:"statsAggregationDisabled,omitempty"`
}

type StorageIORMConfigOption struct {
	*DynamicData

	EnabledOption                *BoolOption `xml:"enabledOption,omitempty"`
	CongestionThresholdOption    *IntOption  `xml:"congestionThresholdOption,omitempty"`
	StatsCollectionEnabledOption *BoolOption `xml:"statsCollectionEnabledOption,omitempty"`
}

type StoragePerformanceSummary struct {
	*DynamicData

	Interval              int32     `xml:"interval,omitempty"`
	Percentile            []int32   `xml:"percentile,omitempty"`
	DatastoreReadLatency  []float64 `xml:"datastoreReadLatency,omitempty"`
	DatastoreWriteLatency []float64 `xml:"datastoreWriteLatency,omitempty"`
	DatastoreVmLatency    []float64 `xml:"datastoreVmLatency,omitempty"`
	DatastoreReadIops     []float64 `xml:"datastoreReadIops,omitempty"`
	DatastoreWriteIops    []float64 `xml:"datastoreWriteIops,omitempty"`
	SiocActivityDuration  int32     `xml:"siocActivityDuration,omitempty"`
}

type ArrayOfStoragePerformanceSummary struct {
	StoragePerformanceSummary []*StoragePerformanceSummary `xml:"StoragePerformanceSummary,omitempty"`
}

type PodStorageDrsEntry struct {
	*DynamicData

	StorageDrsConfig *StorageDrsConfigInfo    `xml:"storageDrsConfig,omitempty"`
	Recommendation   []*ClusterRecommendation `xml:"recommendation,omitempty"`
	DrsFault         []*ClusterDrsFaults      `xml:"drsFault,omitempty"`
	ActionHistory    []*ClusterActionHistory  `xml:"actionHistory,omitempty"`
}

type StringExpression struct {
	*NegatableExpression

	Value string `xml:"value,omitempty"`
}

type StringPolicy struct {
	*InheritablePolicy

	Value string `xml:"value,omitempty"`
}

type Tag struct {
	*DynamicData

	Key string `xml:"key,omitempty"`
}

type ArrayOfTag struct {
	Tag []*Tag `xml:"Tag,omitempty"`
}

type TaskDescription struct {
	*DynamicData

	MethodInfo []*ElementDescription `xml:"methodInfo,omitempty"`
	State      []*ElementDescription `xml:"state,omitempty"`
	Reason     []*TypeDescription    `xml:"reason,omitempty"`
}

type TaskFilterSpecByEntity struct {
	*DynamicData

	Entity    *ManagedObjectReference        `xml:"entity,omitempty"`
	Recursion *TaskFilterSpecRecursionOption `xml:"recursion,omitempty"`
}

type TaskFilterSpecByTime struct {
	*DynamicData

	TimeType  *TaskFilterSpecTimeOption `xml:"timeType,omitempty"`
	BeginTime time.Time                 `xml:"beginTime,omitempty"`
	EndTime   time.Time                 `xml:"endTime,omitempty"`
}

type TaskFilterSpecByUsername struct {
	*DynamicData

	SystemUser bool     `xml:"systemUser,omitempty"`
	UserList   []string `xml:"userList,omitempty"`
}

type TaskFilterSpec struct {
	*DynamicData

	Entity        *TaskFilterSpecByEntity   `xml:"entity,omitempty"`
	Time          *TaskFilterSpecByTime     `xml:"time,omitempty"`
	UserName      *TaskFilterSpecByUsername `xml:"userName,omitempty"`
	State         []*TaskInfoState          `xml:"state,omitempty"`
	Alarm         *ManagedObjectReference   `xml:"alarm,omitempty"`
	ScheduledTask *ManagedObjectReference   `xml:"scheduledTask,omitempty"`
	EventChainId  []int32                   `xml:"eventChainId,omitempty"`
	Tag           []string                  `xml:"tag,omitempty"`
	ParentTaskKey []string                  `xml:"parentTaskKey,omitempty"`
	RootTaskKey   []string                  `xml:"rootTaskKey,omitempty"`
}

type ArrayOfTaskInfoState struct {
	TaskInfoState []*TaskInfoState `xml:"TaskInfoState,omitempty"`
}

type TaskInfo struct {
	*DynamicData

	Key           string                    `xml:"key,omitempty"`
	Task          *ManagedObjectReference   `xml:"task,omitempty"`
	Description   *LocalizableMessage       `xml:"description,omitempty"`
	Name          string                    `xml:"name,omitempty"`
	DescriptionId string                    `xml:"descriptionId,omitempty"`
	Entity        *ManagedObjectReference   `xml:"entity,omitempty"`
	EntityName    string                    `xml:"entityName,omitempty"`
	Locked        []*ManagedObjectReference `xml:"locked,omitempty"`
	State         *TaskInfoState            `xml:"state,omitempty"`
	Cancelled     bool                      `xml:"cancelled,omitempty"`
	Cancelable    bool                      `xml:"cancelable,omitempty"`
	Error         *LocalizedMethodFault     `xml:"error,omitempty"`
	Result        interface{}               `xml:"result,omitempty"`
	Progress      int32                     `xml:"progress,omitempty"`
	Reason        *TaskReason               `xml:"reason,omitempty"`
	QueueTime     time.Time                 `xml:"queueTime,omitempty"`
	StartTime     time.Time                 `xml:"startTime,omitempty"`
	CompleteTime  time.Time                 `xml:"completeTime,omitempty"`
	EventChainId  int32                     `xml:"eventChainId,omitempty"`
	ChangeTag     string                    `xml:"changeTag,omitempty"`
	ParentTaskKey string                    `xml:"parentTaskKey,omitempty"`
	RootTaskKey   string                    `xml:"rootTaskKey,omitempty"`
}

type ArrayOfTaskInfo struct {
	TaskInfo []*TaskInfo `xml:"TaskInfo,omitempty"`
}

type TaskReason struct {
	*DynamicData
}

type TaskReasonSystem struct {
	*TaskReason
}

type TaskReasonUser struct {
	*TaskReason

	UserName string `xml:"userName,omitempty"`
}

type TaskReasonAlarm struct {
	*TaskReason

	AlarmName  string                  `xml:"alarmName,omitempty"`
	Alarm      *ManagedObjectReference `xml:"alarm,omitempty"`
	EntityName string                  `xml:"entityName,omitempty"`
	Entity     *ManagedObjectReference `xml:"entity,omitempty"`
}

type TaskReasonSchedule struct {
	*TaskReason

	Name          string                  `xml:"name,omitempty"`
	ScheduledTask *ManagedObjectReference `xml:"scheduledTask,omitempty"`
}

type TypeDescription struct {
	*Description

	Key string `xml:"key,omitempty"`
}

type ArrayOfTypeDescription struct {
	TypeDescription []*TypeDescription `xml:"TypeDescription,omitempty"`
}

type UpdateVirtualMachineFilesResultFailedVmFileInfo struct {
	*DynamicData

	VmFile string                `xml:"vmFile,omitempty"`
	Fault  *LocalizedMethodFault `xml:"fault,omitempty"`
}

type ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo struct {
	UpdateVirtualMachineFilesResultFailedVmFileInfo []*UpdateVirtualMachineFilesResultFailedVmFileInfo `xml:"UpdateVirtualMachineFilesResultFailedVmFileInfo,omitempty"`
}

type UpdateVirtualMachineFilesResult struct {
	*DynamicData

	FailedVmFile []*UpdateVirtualMachineFilesResultFailedVmFileInfo `xml:"failedVmFile,omitempty"`
}

type UserSearchResult struct {
	*DynamicData

	Principal string `xml:"principal,omitempty"`
	FullName  string `xml:"fullName,omitempty"`
	Group     bool   `xml:"group,omitempty"`
}

type ArrayOfUserSearchResult struct {
	UserSearchResult []*UserSearchResult `xml:"UserSearchResult,omitempty"`
}

type UserSession struct {
	*DynamicData

	Key              string    `xml:"key,omitempty"`
	UserName         string    `xml:"userName,omitempty"`
	FullName         string    `xml:"fullName,omitempty"`
	LoginTime        time.Time `xml:"loginTime,omitempty"`
	LastActiveTime   time.Time `xml:"lastActiveTime,omitempty"`
	Locale           string    `xml:"locale,omitempty"`
	MessageLocale    string    `xml:"messageLocale,omitempty"`
	ExtensionSession bool      `xml:"extensionSession,omitempty"`
	IpAddress        string    `xml:"ipAddress,omitempty"`
	UserAgent        string    `xml:"userAgent,omitempty"`
	CallCount        int64     `xml:"callCount,omitempty"`
}

type ArrayOfUserSession struct {
	UserSession []*UserSession `xml:"UserSession,omitempty"`
}

type VirtualAppSummary struct {
	*ResourcePoolSummary

	Product             *VAppProductInfo     `xml:"product,omitempty"`
	VAppState           *VirtualAppVAppState `xml:"vAppState,omitempty"`
	Suspended           bool                 `xml:"suspended,omitempty"`
	InstallBootRequired bool                 `xml:"installBootRequired,omitempty"`
	InstanceUuid        string               `xml:"instanceUuid,omitempty"`
}

type VirtualAppLinkInfo struct {
	*DynamicData

	Key               *ManagedObjectReference `xml:"key,omitempty"`
	DestroyWithParent bool                    `xml:"destroyWithParent,omitempty"`
}

type ArrayOfVirtualAppLinkInfo struct {
	VirtualAppLinkInfo []*VirtualAppLinkInfo `xml:"VirtualAppLinkInfo,omitempty"`
}

type VirtualDiskSpec struct {
	*DynamicData

	DiskType    string `xml:"diskType,omitempty"`
	AdapterType string `xml:"adapterType,omitempty"`
}

type FileBackedVirtualDiskSpec struct {
	*VirtualDiskSpec

	CapacityKb int64                        `xml:"capacityKb,omitempty"`
	Profile    []*VirtualMachineProfileSpec `xml:"profile,omitempty"`
}

type SeSparseVirtualDiskSpec struct {
	*FileBackedVirtualDiskSpec

	GrainSizeKb int32 `xml:"grainSizeKb,omitempty"`
}

type DeviceBackedVirtualDiskSpec struct {
	*VirtualDiskSpec

	Device string `xml:"device,omitempty"`
}

type StorageRequirement struct {
	*DynamicData

	Datastore             *ManagedObjectReference `xml:"datastore,omitempty"`
	FreeSpaceRequiredInKb int64                   `xml:"freeSpaceRequiredInKb,omitempty"`
}

type ArrayOfStorageRequirement struct {
	StorageRequirement []*StorageRequirement `xml:"StorageRequirement,omitempty"`
}

type VirtualMachineTicket struct {
	*DynamicData

	Ticket        string `xml:"ticket,omitempty"`
	CfgFile       string `xml:"cfgFile,omitempty"`
	Host          string `xml:"host,omitempty"`
	Port          int32  `xml:"port,omitempty"`
	SslThumbprint string `xml:"sslThumbprint,omitempty"`
}

type VirtualMachineMksTicket struct {
	*DynamicData

	Ticket        string `xml:"ticket,omitempty"`
	CfgFile       string `xml:"cfgFile,omitempty"`
	Host          string `xml:"host,omitempty"`
	Port          int32  `xml:"port,omitempty"`
	SslThumbprint string `xml:"sslThumbprint,omitempty"`
}

type VirtualMachineDisplayTopology struct {
	*DynamicData

	X      int32 `xml:"x,omitempty"`
	Y      int32 `xml:"y,omitempty"`
	Width  int32 `xml:"width,omitempty"`
	Height int32 `xml:"height,omitempty"`
}

type ArrayOfVirtualMachineDisplayTopology struct {
	VirtualMachineDisplayTopology []*VirtualMachineDisplayTopology `xml:"VirtualMachineDisplayTopology,omitempty"`
}

type DiskChangeExtent struct {
	*DynamicData

	Start  int64 `xml:"start,omitempty"`
	Length int64 `xml:"length,omitempty"`
}

type ArrayOfDiskChangeExtent struct {
	DiskChangeExtent []*DiskChangeExtent `xml:"DiskChangeExtent,omitempty"`
}

type DiskChangeInfo struct {
	*DynamicData

	StartOffset int64               `xml:"startOffset,omitempty"`
	Length      int64               `xml:"length,omitempty"`
	ChangedArea []*DiskChangeExtent `xml:"changedArea,omitempty"`
}

type VirtualMachineWipeResult struct {
	*DynamicData

	DiskId              int32 `xml:"diskId,omitempty"`
	ShrinkableDiskSpace int64 `xml:"shrinkableDiskSpace,omitempty"`
}

type Action struct {
	*DynamicData
}

type MethodActionArgument struct {
	*DynamicData

	Value interface{} `xml:"value,omitempty"`
}

type ArrayOfMethodActionArgument struct {
	MethodActionArgument []*MethodActionArgument `xml:"MethodActionArgument,omitempty"`
}

type MethodAction struct {
	*Action

	Name     string                  `xml:"name,omitempty"`
	Argument []*MethodActionArgument `xml:"argument,omitempty"`
}

type SendEmailAction struct {
	*Action

	ToList  string `xml:"toList,omitempty"`
	CcList  string `xml:"ccList,omitempty"`
	Subject string `xml:"subject,omitempty"`
	Body    string `xml:"body,omitempty"`
}

type SendSNMPAction struct {
	*Action
}

type RunScriptAction struct {
	*Action

	Script string `xml:"script,omitempty"`
}

type CreateTaskAction struct {
	*Action

	TaskTypeId string `xml:"taskTypeId,omitempty"`
	Cancelable bool   `xml:"cancelable,omitempty"`
}

type AlarmAction struct {
	*DynamicData
}

type ArrayOfAlarmAction struct {
	AlarmAction []*AlarmAction `xml:"AlarmAction,omitempty"`
}

type AlarmTriggeringActionTransitionSpec struct {
	*DynamicData

	StartState *ManagedEntityStatus `xml:"startState,omitempty"`
	FinalState *ManagedEntityStatus `xml:"finalState,omitempty"`
	Repeats    bool                 `xml:"repeats,omitempty"`
}

type ArrayOfAlarmTriggeringActionTransitionSpec struct {
	AlarmTriggeringActionTransitionSpec []*AlarmTriggeringActionTransitionSpec `xml:"AlarmTriggeringActionTransitionSpec,omitempty"`
}

type AlarmTriggeringAction struct {
	*AlarmAction

	Action          *Action                                `xml:"action,omitempty"`
	TransitionSpecs []*AlarmTriggeringActionTransitionSpec `xml:"transitionSpecs,omitempty"`
	Green2yellow    bool                                   `xml:"green2yellow,omitempty"`
	Yellow2red      bool                                   `xml:"yellow2red,omitempty"`
	Red2yellow      bool                                   `xml:"red2yellow,omitempty"`
	Yellow2green    bool                                   `xml:"yellow2green,omitempty"`
}

type GroupAlarmAction struct {
	*AlarmAction

	Action []*AlarmAction `xml:"action,omitempty"`
}

type AlarmDescription struct {
	*DynamicData

	Expr                               []*TypeDescription    `xml:"expr,omitempty"`
	StateOperator                      []*ElementDescription `xml:"stateOperator,omitempty"`
	MetricOperator                     []*ElementDescription `xml:"metricOperator,omitempty"`
	HostSystemConnectionState          []*ElementDescription `xml:"hostSystemConnectionState,omitempty"`
	VirtualMachinePowerState           []*ElementDescription `xml:"virtualMachinePowerState,omitempty"`
	DatastoreConnectionState           []*ElementDescription `xml:"datastoreConnectionState,omitempty"`
	HostSystemPowerState               []*ElementDescription `xml:"hostSystemPowerState,omitempty"`
	VirtualMachineGuestHeartbeatStatus []*ElementDescription `xml:"virtualMachineGuestHeartbeatStatus,omitempty"`
	EntityStatus                       []*ElementDescription `xml:"entityStatus,omitempty"`
	Action                             []*TypeDescription    `xml:"action,omitempty"`
}

type AlarmExpression struct {
	*DynamicData
}

type ArrayOfAlarmExpression struct {
	AlarmExpression []*AlarmExpression `xml:"AlarmExpression,omitempty"`
}

type AndAlarmExpression struct {
	*AlarmExpression

	Expression []*AlarmExpression `xml:"expression,omitempty"`
}

type OrAlarmExpression struct {
	*AlarmExpression

	Expression []*AlarmExpression `xml:"expression,omitempty"`
}

type StateAlarmExpression struct {
	*AlarmExpression

	Operator  *StateAlarmOperator `xml:"operator,omitempty"`
	Type_     string              `xml:"type,omitempty"`
	StatePath string              `xml:"statePath,omitempty"`
	Yellow    string              `xml:"yellow,omitempty"`
	Red       string              `xml:"red,omitempty"`
}

type EventAlarmExpressionComparison struct {
	*DynamicData

	AttributeName string `xml:"attributeName,omitempty"`
	Operator      string `xml:"operator,omitempty"`
	Value         string `xml:"value,omitempty"`
}

type ArrayOfEventAlarmExpressionComparison struct {
	EventAlarmExpressionComparison []*EventAlarmExpressionComparison `xml:"EventAlarmExpressionComparison,omitempty"`
}

type EventAlarmExpression struct {
	*AlarmExpression

	Comparisons []*EventAlarmExpressionComparison `xml:"comparisons,omitempty"`
	EventType   string                            `xml:"eventType,omitempty"`
	EventTypeId string                            `xml:"eventTypeId,omitempty"`
	ObjectType  string                            `xml:"objectType,omitempty"`
	Status      *ManagedEntityStatus              `xml:"status,omitempty"`
}

type MetricAlarmExpression struct {
	*AlarmExpression

	Operator       *MetricAlarmOperator `xml:"operator,omitempty"`
	Type_          string               `xml:"type,omitempty"`
	Metric         *PerfMetricId        `xml:"metric,omitempty"`
	Yellow         int32                `xml:"yellow,omitempty"`
	YellowInterval int32                `xml:"yellowInterval,omitempty"`
	Red            int32                `xml:"red,omitempty"`
	RedInterval    int32                `xml:"redInterval,omitempty"`
}

type AlarmInfo struct {
	*AlarmSpec

	Key              string                  `xml:"key,omitempty"`
	Alarm            *ManagedObjectReference `xml:"alarm,omitempty"`
	Entity           *ManagedObjectReference `xml:"entity,omitempty"`
	LastModifiedTime time.Time               `xml:"lastModifiedTime,omitempty"`
	LastModifiedUser string                  `xml:"lastModifiedUser,omitempty"`
	CreationEventId  int32                   `xml:"creationEventId,omitempty"`
}

type AlarmSetting struct {
	*DynamicData

	ToleranceRange     int32 `xml:"toleranceRange,omitempty"`
	ReportingFrequency int32 `xml:"reportingFrequency,omitempty"`
}

type AlarmSpec struct {
	*DynamicData

	Name            string           `xml:"name,omitempty"`
	SystemName      string           `xml:"systemName,omitempty"`
	Description     string           `xml:"description,omitempty"`
	Enabled         bool             `xml:"enabled,omitempty"`
	Expression      *AlarmExpression `xml:"expression,omitempty"`
	Action          *AlarmAction     `xml:"action,omitempty"`
	ActionFrequency int32            `xml:"actionFrequency,omitempty"`
	Setting         *AlarmSetting    `xml:"setting,omitempty"`
}

type AlarmState struct {
	*DynamicData

	Key                string                  `xml:"key,omitempty"`
	Entity             *ManagedObjectReference `xml:"entity,omitempty"`
	Alarm              *ManagedObjectReference `xml:"alarm,omitempty"`
	OverallStatus      *ManagedEntityStatus    `xml:"overallStatus,omitempty"`
	Time               time.Time               `xml:"time,omitempty"`
	Acknowledged       bool                    `xml:"acknowledged,omitempty"`
	AcknowledgedByUser string                  `xml:"acknowledgedByUser,omitempty"`
	AcknowledgedTime   time.Time               `xml:"acknowledgedTime,omitempty"`
}

type ArrayOfAlarmState struct {
	AlarmState []*AlarmState `xml:"AlarmState,omitempty"`
}

type ClusterAction struct {
	*DynamicData

	Type_  string                  `xml:"type,omitempty"`
	Target *ManagedObjectReference `xml:"target,omitempty"`
}

type ArrayOfClusterAction struct {
	ClusterAction []*ClusterAction `xml:"ClusterAction,omitempty"`
}

type ClusterActionHistory struct {
	*DynamicData

	Action *ClusterAction `xml:"action,omitempty"`
	Time   time.Time      `xml:"time,omitempty"`
}

type ArrayOfClusterActionHistory struct {
	ClusterActionHistory []*ClusterActionHistory `xml:"ClusterActionHistory,omitempty"`
}

type ClusterAffinityRuleSpec struct {
	*ClusterRuleInfo

	Vm []*ManagedObjectReference `xml:"vm,omitempty"`
}

type ClusterAntiAffinityRuleSpec struct {
	*ClusterRuleInfo

	Vm []*ManagedObjectReference `xml:"vm,omitempty"`
}

type ClusterAttemptedVmInfo struct {
	*DynamicData

	Vm   *ManagedObjectReference `xml:"vm,omitempty"`
	Task *ManagedObjectReference `xml:"task,omitempty"`
}

type ArrayOfClusterAttemptedVmInfo struct {
	ClusterAttemptedVmInfo []*ClusterAttemptedVmInfo `xml:"ClusterAttemptedVmInfo,omitempty"`
}

type ClusterConfigInfo struct {
	*DynamicData

	DasConfig   *ClusterDasConfigInfo     `xml:"dasConfig,omitempty"`
	DasVmConfig []*ClusterDasVmConfigInfo `xml:"dasVmConfig,omitempty"`
	DrsConfig   *ClusterDrsConfigInfo     `xml:"drsConfig,omitempty"`
	DrsVmConfig []*ClusterDrsVmConfigInfo `xml:"drsVmConfig,omitempty"`
	Rule        []*ClusterRuleInfo        `xml:"rule,omitempty"`
}

type ClusterDrsConfigInfo struct {
	*DynamicData

	Enabled                   bool           `xml:"enabled,omitempty"`
	EnableVmBehaviorOverrides bool           `xml:"enableVmBehaviorOverrides,omitempty"`
	DefaultVmBehavior         *DrsBehavior   `xml:"defaultVmBehavior,omitempty"`
	VmotionRate               int32          `xml:"vmotionRate,omitempty"`
	Option                    []*OptionValue `xml:"option,omitempty"`
}

type ClusterDrsVmConfigInfo struct {
	*DynamicData

	Key      *ManagedObjectReference `xml:"key,omitempty"`
	Enabled  bool                    `xml:"enabled,omitempty"`
	Behavior *DrsBehavior            `xml:"behavior,omitempty"`
}

type ArrayOfClusterDrsVmConfigInfo struct {
	ClusterDrsVmConfigInfo []*ClusterDrsVmConfigInfo `xml:"ClusterDrsVmConfigInfo,omitempty"`
}

type ClusterConfigInfoEx struct {
	*ComputeResourceConfigInfo

	DasConfig      *ClusterDasConfigInfo       `xml:"dasConfig,omitempty"`
	DasVmConfig    []*ClusterDasVmConfigInfo   `xml:"dasVmConfig,omitempty"`
	DrsConfig      *ClusterDrsConfigInfo       `xml:"drsConfig,omitempty"`
	DrsVmConfig    []*ClusterDrsVmConfigInfo   `xml:"drsVmConfig,omitempty"`
	Rule           []*ClusterRuleInfo          `xml:"rule,omitempty"`
	DpmConfigInfo  *ClusterDpmConfigInfo       `xml:"dpmConfigInfo,omitempty"`
	DpmHostConfig  []*ClusterDpmHostConfigInfo `xml:"dpmHostConfig,omitempty"`
	VsanConfigInfo *VsanClusterConfigInfo      `xml:"vsanConfigInfo,omitempty"`
	VsanHostConfig []*VsanHostConfigInfo       `xml:"vsanHostConfig,omitempty"`
	Group          []*ClusterGroupInfo         `xml:"group,omitempty"`
}

type ClusterDpmConfigInfo struct {
	*DynamicData

	Enabled             bool           `xml:"enabled,omitempty"`
	DefaultDpmBehavior  *DpmBehavior   `xml:"defaultDpmBehavior,omitempty"`
	HostPowerActionRate int32          `xml:"hostPowerActionRate,omitempty"`
	Option              []*OptionValue `xml:"option,omitempty"`
}

type ClusterDpmHostConfigInfo struct {
	*DynamicData

	Key      *ManagedObjectReference `xml:"key,omitempty"`
	Enabled  bool                    `xml:"enabled,omitempty"`
	Behavior *DpmBehavior            `xml:"behavior,omitempty"`
}

type ArrayOfClusterDpmHostConfigInfo struct {
	ClusterDpmHostConfigInfo []*ClusterDpmHostConfigInfo `xml:"ClusterDpmHostConfigInfo,omitempty"`
}

type ClusterConfigSpec struct {
	*DynamicData

	DasConfig       *ClusterDasConfigInfo     `xml:"dasConfig,omitempty"`
	DasVmConfigSpec []*ClusterDasVmConfigSpec `xml:"dasVmConfigSpec,omitempty"`
	DrsConfig       *ClusterDrsConfigInfo     `xml:"drsConfig,omitempty"`
	DrsVmConfigSpec []*ClusterDrsVmConfigSpec `xml:"drsVmConfigSpec,omitempty"`
	RulesSpec       []*ClusterRuleSpec        `xml:"rulesSpec,omitempty"`
}

type ClusterDasVmConfigSpec struct {
	*ArrayUpdateSpec

	Info *ClusterDasVmConfigInfo `xml:"info,omitempty"`
}

type ArrayOfClusterDasVmConfigSpec struct {
	ClusterDasVmConfigSpec []*ClusterDasVmConfigSpec `xml:"ClusterDasVmConfigSpec,omitempty"`
}

type ClusterDrsVmConfigSpec struct {
	*ArrayUpdateSpec

	Info *ClusterDrsVmConfigInfo `xml:"info,omitempty"`
}

type ArrayOfClusterDrsVmConfigSpec struct {
	ClusterDrsVmConfigSpec []*ClusterDrsVmConfigSpec `xml:"ClusterDrsVmConfigSpec,omitempty"`
}

type ClusterConfigSpecEx struct {
	*ComputeResourceConfigSpec

	DasConfig          *ClusterDasConfigInfo       `xml:"dasConfig,omitempty"`
	DasVmConfigSpec    []*ClusterDasVmConfigSpec   `xml:"dasVmConfigSpec,omitempty"`
	DrsConfig          *ClusterDrsConfigInfo       `xml:"drsConfig,omitempty"`
	DrsVmConfigSpec    []*ClusterDrsVmConfigSpec   `xml:"drsVmConfigSpec,omitempty"`
	RulesSpec          []*ClusterRuleSpec          `xml:"rulesSpec,omitempty"`
	DpmConfig          *ClusterDpmConfigInfo       `xml:"dpmConfig,omitempty"`
	DpmHostConfigSpec  []*ClusterDpmHostConfigSpec `xml:"dpmHostConfigSpec,omitempty"`
	VsanConfig         *VsanClusterConfigInfo      `xml:"vsanConfig,omitempty"`
	VsanHostConfigSpec []*VsanHostConfigInfo       `xml:"vsanHostConfigSpec,omitempty"`
	GroupSpec          []*ClusterGroupSpec         `xml:"groupSpec,omitempty"`
}

type ClusterDpmHostConfigSpec struct {
	*ArrayUpdateSpec

	Info *ClusterDpmHostConfigInfo `xml:"info,omitempty"`
}

type ArrayOfClusterDpmHostConfigSpec struct {
	ClusterDpmHostConfigSpec []*ClusterDpmHostConfigSpec `xml:"ClusterDpmHostConfigSpec,omitempty"`
}

type ClusterGroupSpec struct {
	*ArrayUpdateSpec

	Info *ClusterGroupInfo `xml:"info,omitempty"`
}

type ArrayOfClusterGroupSpec struct {
	ClusterGroupSpec []*ClusterGroupSpec `xml:"ClusterGroupSpec,omitempty"`
}

type ClusterDasAamHostInfo struct {
	*ClusterDasHostInfo

	HostDasState []*ClusterDasAamNodeState `xml:"hostDasState,omitempty"`
	PrimaryHosts []string                  `xml:"primaryHosts,omitempty"`
}

type ClusterDasAamNodeState struct {
	*DynamicData

	Host         *ManagedObjectReference `xml:"host,omitempty"`
	Name         string                  `xml:"name,omitempty"`
	ConfigState  string                  `xml:"configState,omitempty"`
	RuntimeState string                  `xml:"runtimeState,omitempty"`
}

type ArrayOfClusterDasAamNodeState struct {
	ClusterDasAamNodeState []*ClusterDasAamNodeState `xml:"ClusterDasAamNodeState,omitempty"`
}

type ClusterDasAdmissionControlInfo struct {
	*DynamicData
}

type ClusterDasAdmissionControlPolicy struct {
	*DynamicData
}

type DasHeartbeatDatastoreInfo struct {
	*DynamicData

	Datastore *ManagedObjectReference   `xml:"datastore,omitempty"`
	Hosts     []*ManagedObjectReference `xml:"hosts,omitempty"`
}

type ArrayOfDasHeartbeatDatastoreInfo struct {
	DasHeartbeatDatastoreInfo []*DasHeartbeatDatastoreInfo `xml:"DasHeartbeatDatastoreInfo,omitempty"`
}

type ClusterDasAdvancedRuntimeInfo struct {
	*DynamicData

	DasHostInfo            *ClusterDasHostInfo          `xml:"dasHostInfo,omitempty"`
	HeartbeatDatastoreInfo []*DasHeartbeatDatastoreInfo `xml:"heartbeatDatastoreInfo,omitempty"`
}

type ClusterDasConfigInfo struct {
	*DynamicData

	Enabled                    bool                              `xml:"enabled,omitempty"`
	VmMonitoring               string                            `xml:"vmMonitoring,omitempty"`
	HostMonitoring             string                            `xml:"hostMonitoring,omitempty"`
	FailoverLevel              int32                             `xml:"failoverLevel,omitempty"`
	AdmissionControlPolicy     *ClusterDasAdmissionControlPolicy `xml:"admissionControlPolicy,omitempty"`
	AdmissionControlEnabled    bool                              `xml:"admissionControlEnabled,omitempty"`
	DefaultVmSettings          *ClusterDasVmSettings             `xml:"defaultVmSettings,omitempty"`
	Option                     []*OptionValue                    `xml:"option,omitempty"`
	HeartbeatDatastore         []*ManagedObjectReference         `xml:"heartbeatDatastore,omitempty"`
	HBDatastoreCandidatePolicy string                            `xml:"hBDatastoreCandidatePolicy,omitempty"`
}

type ClusterDasData struct {
	*DynamicData
}

type ClusterDasDataSummary struct {
	*ClusterDasData

	HostListVersion      int64 `xml:"hostListVersion,omitempty"`
	ClusterConfigVersion int64 `xml:"clusterConfigVersion,omitempty"`
	CompatListVersion    int64 `xml:"compatListVersion,omitempty"`
}

type ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo struct {
	*DynamicData

	NumVcpus int32 `xml:"numVcpus,omitempty"`
	CpuMHz   int32 `xml:"cpuMHz,omitempty"`
	MemoryMB int32 `xml:"memoryMB,omitempty"`
}

type ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots struct {
	*DynamicData

	Host  *ManagedObjectReference `xml:"host,omitempty"`
	Slots int32                   `xml:"slots,omitempty"`
}

type ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots struct {
	ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots []*ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots `xml:"ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots,omitempty"`
}

type ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots struct {
	*DynamicData

	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Slots int32                   `xml:"slots,omitempty"`
}

type ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots struct {
	ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots []*ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots `xml:"ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots,omitempty"`
}

type ClusterDasFailoverLevelAdvancedRuntimeInfo struct {
	*ClusterDasAdvancedRuntimeInfo

	SlotInfo                  *ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo    `xml:"slotInfo,omitempty"`
	TotalSlots                int32                                                  `xml:"totalSlots,omitempty"`
	UsedSlots                 int32                                                  `xml:"usedSlots,omitempty"`
	UnreservedSlots           int32                                                  `xml:"unreservedSlots,omitempty"`
	TotalVms                  int32                                                  `xml:"totalVms,omitempty"`
	TotalHosts                int32                                                  `xml:"totalHosts,omitempty"`
	TotalGoodHosts            int32                                                  `xml:"totalGoodHosts,omitempty"`
	HostSlots                 []*ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots `xml:"hostSlots,omitempty"`
	VmsRequiringMultipleSlots []*ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots   `xml:"vmsRequiringMultipleSlots,omitempty"`
}

type ClusterDasFdmHostState struct {
	*DynamicData

	State         string                  `xml:"state,omitempty"`
	StateReporter *ManagedObjectReference `xml:"stateReporter,omitempty"`
}

type ClusterDasHostInfo struct {
	*DynamicData
}

type ClusterDasHostRecommendation struct {
	*DynamicData

	Host      *ManagedObjectReference `xml:"host,omitempty"`
	DrsRating int32                   `xml:"drsRating,omitempty"`
}

type ClusterDasVmConfigInfo struct {
	*DynamicData

	Key                 *ManagedObjectReference `xml:"key,omitempty"`
	RestartPriority     *DasVmPriority          `xml:"restartPriority,omitempty"`
	PowerOffOnIsolation bool                    `xml:"powerOffOnIsolation,omitempty"`
	DasSettings         *ClusterDasVmSettings   `xml:"dasSettings,omitempty"`
}

type ArrayOfClusterDasVmConfigInfo struct {
	ClusterDasVmConfigInfo []*ClusterDasVmConfigInfo `xml:"ClusterDasVmConfigInfo,omitempty"`
}

type ClusterDasVmSettings struct {
	*DynamicData

	RestartPriority           string                            `xml:"restartPriority,omitempty"`
	IsolationResponse         string                            `xml:"isolationResponse,omitempty"`
	VmToolsMonitoringSettings *ClusterVmToolsMonitoringSettings `xml:"vmToolsMonitoringSettings,omitempty"`
}

type ClusterDrsFaultsFaultsByVm struct {
	*DynamicData

	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Fault []*LocalizedMethodFault `xml:"fault,omitempty"`
}

type ArrayOfClusterDrsFaultsFaultsByVm struct {
	ClusterDrsFaultsFaultsByVm []*ClusterDrsFaultsFaultsByVm `xml:"ClusterDrsFaultsFaultsByVm,omitempty"`
}

type ClusterDrsFaultsFaultsByVirtualDisk struct {
	*ClusterDrsFaultsFaultsByVm

	Disk *VirtualDiskId `xml:"disk,omitempty"`
}

type ClusterDrsFaults struct {
	*DynamicData

	Reason     string                        `xml:"reason,omitempty"`
	FaultsByVm []*ClusterDrsFaultsFaultsByVm `xml:"faultsByVm,omitempty"`
}

type ArrayOfClusterDrsFaults struct {
	ClusterDrsFaults []*ClusterDrsFaults `xml:"ClusterDrsFaults,omitempty"`
}

type ClusterDrsMigration struct {
	*DynamicData

	Key                   string                  `xml:"key,omitempty"`
	Time                  time.Time               `xml:"time,omitempty"`
	Vm                    *ManagedObjectReference `xml:"vm,omitempty"`
	CpuLoad               int32                   `xml:"cpuLoad,omitempty"`
	MemoryLoad            int64                   `xml:"memoryLoad,omitempty"`
	Source                *ManagedObjectReference `xml:"source,omitempty"`
	SourceCpuLoad         int32                   `xml:"sourceCpuLoad,omitempty"`
	SourceMemoryLoad      int64                   `xml:"sourceMemoryLoad,omitempty"`
	Destination           *ManagedObjectReference `xml:"destination,omitempty"`
	DestinationCpuLoad    int32                   `xml:"destinationCpuLoad,omitempty"`
	DestinationMemoryLoad int64                   `xml:"destinationMemoryLoad,omitempty"`
}

type ArrayOfClusterDrsMigration struct {
	ClusterDrsMigration []*ClusterDrsMigration `xml:"ClusterDrsMigration,omitempty"`
}

type ClusterDrsRecommendation struct {
	*DynamicData

	Key           string                 `xml:"key,omitempty"`
	Rating        int32                  `xml:"rating,omitempty"`
	Reason        string                 `xml:"reason,omitempty"`
	ReasonText    string                 `xml:"reasonText,omitempty"`
	MigrationList []*ClusterDrsMigration `xml:"migrationList,omitempty"`
}

type ArrayOfClusterDrsRecommendation struct {
	ClusterDrsRecommendation []*ClusterDrsRecommendation `xml:"ClusterDrsRecommendation,omitempty"`
}

type ClusterEnterMaintenanceResult struct {
	*DynamicData

	Recommendations []*ClusterRecommendation `xml:"recommendations,omitempty"`
	Fault           *ClusterDrsFaults        `xml:"fault,omitempty"`
}

type ClusterFailoverHostAdmissionControlInfoHostStatus struct {
	*DynamicData

	Host   *ManagedObjectReference `xml:"host,omitempty"`
	Status *ManagedEntityStatus    `xml:"status,omitempty"`
}

type ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus struct {
	ClusterFailoverHostAdmissionControlInfoHostStatus []*ClusterFailoverHostAdmissionControlInfoHostStatus `xml:"ClusterFailoverHostAdmissionControlInfoHostStatus,omitempty"`
}

type ClusterFailoverHostAdmissionControlInfo struct {
	*ClusterDasAdmissionControlInfo

	HostStatus []*ClusterFailoverHostAdmissionControlInfoHostStatus `xml:"hostStatus,omitempty"`
}

type ClusterFailoverHostAdmissionControlPolicy struct {
	*ClusterDasAdmissionControlPolicy

	FailoverHosts []*ManagedObjectReference `xml:"failoverHosts,omitempty"`
}

type ClusterFailoverLevelAdmissionControlInfo struct {
	*ClusterDasAdmissionControlInfo

	CurrentFailoverLevel int32 `xml:"currentFailoverLevel,omitempty"`
}

type ClusterFailoverLevelAdmissionControlPolicy struct {
	*ClusterDasAdmissionControlPolicy

	FailoverLevel int32              `xml:"failoverLevel,omitempty"`
	SlotPolicy    *ClusterSlotPolicy `xml:"slotPolicy,omitempty"`
}

type ClusterFailoverResourcesAdmissionControlInfo struct {
	*ClusterDasAdmissionControlInfo

	CurrentCpuFailoverResourcesPercent    int32 `xml:"currentCpuFailoverResourcesPercent,omitempty"`
	CurrentMemoryFailoverResourcesPercent int32 `xml:"currentMemoryFailoverResourcesPercent,omitempty"`
}

type ClusterFailoverResourcesAdmissionControlPolicy struct {
	*ClusterDasAdmissionControlPolicy

	CpuFailoverResourcesPercent    int32 `xml:"cpuFailoverResourcesPercent,omitempty"`
	MemoryFailoverResourcesPercent int32 `xml:"memoryFailoverResourcesPercent,omitempty"`
}

type ClusterGroupInfo struct {
	*DynamicData

	Name        string `xml:"name,omitempty"`
	UserCreated bool   `xml:"userCreated,omitempty"`
}

type ArrayOfClusterGroupInfo struct {
	ClusterGroupInfo []*ClusterGroupInfo `xml:"ClusterGroupInfo,omitempty"`
}

type ClusterHostGroup struct {
	*ClusterGroupInfo

	Host []*ManagedObjectReference `xml:"host,omitempty"`
}

type ClusterHostPowerAction struct {
	*ClusterAction

	OperationType        *HostPowerOperationType `xml:"operationType,omitempty"`
	PowerConsumptionWatt int32                   `xml:"powerConsumptionWatt,omitempty"`
	CpuCapacityMHz       int32                   `xml:"cpuCapacityMHz,omitempty"`
	MemCapacityMB        int32                   `xml:"memCapacityMB,omitempty"`
}

type ClusterHostRecommendation struct {
	*DynamicData

	Host   *ManagedObjectReference `xml:"host,omitempty"`
	Rating int32                   `xml:"rating,omitempty"`
}

type ArrayOfClusterHostRecommendation struct {
	ClusterHostRecommendation []*ClusterHostRecommendation `xml:"ClusterHostRecommendation,omitempty"`
}

type ClusterInitialPlacementAction struct {
	*ClusterAction

	TargetHost *ManagedObjectReference `xml:"targetHost,omitempty"`
	Pool       *ManagedObjectReference `xml:"pool,omitempty"`
}

type ClusterMigrationAction struct {
	*ClusterAction

	DrsMigration *ClusterDrsMigration `xml:"drsMigration,omitempty"`
}

type ClusterNotAttemptedVmInfo struct {
	*DynamicData

	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Fault *LocalizedMethodFault   `xml:"fault,omitempty"`
}

type ArrayOfClusterNotAttemptedVmInfo struct {
	ClusterNotAttemptedVmInfo []*ClusterNotAttemptedVmInfo `xml:"ClusterNotAttemptedVmInfo,omitempty"`
}

type ClusterPowerOnVmResult struct {
	*DynamicData

	Attempted       []*ClusterAttemptedVmInfo    `xml:"attempted,omitempty"`
	NotAttempted    []*ClusterNotAttemptedVmInfo `xml:"notAttempted,omitempty"`
	Recommendations []*ClusterRecommendation     `xml:"recommendations,omitempty"`
}

type ClusterRecommendation struct {
	*DynamicData

	Key          string                  `xml:"key,omitempty"`
	Type_        string                  `xml:"type,omitempty"`
	Time         time.Time               `xml:"time,omitempty"`
	Rating       int32                   `xml:"rating,omitempty"`
	Reason       string                  `xml:"reason,omitempty"`
	ReasonText   string                  `xml:"reasonText,omitempty"`
	Prerequisite []string                `xml:"prerequisite,omitempty"`
	Action       []*ClusterAction        `xml:"action,omitempty"`
	Target       *ManagedObjectReference `xml:"target,omitempty"`
}

type ArrayOfClusterRecommendation struct {
	ClusterRecommendation []*ClusterRecommendation `xml:"ClusterRecommendation,omitempty"`
}

type ClusterRuleInfo struct {
	*DynamicData

	Key          int32                `xml:"key,omitempty"`
	Status       *ManagedEntityStatus `xml:"status,omitempty"`
	Enabled      bool                 `xml:"enabled,omitempty"`
	Name         string               `xml:"name,omitempty"`
	Mandatory    bool                 `xml:"mandatory,omitempty"`
	UserCreated  bool                 `xml:"userCreated,omitempty"`
	InCompliance bool                 `xml:"inCompliance,omitempty"`
}

type ArrayOfClusterRuleInfo struct {
	ClusterRuleInfo []*ClusterRuleInfo `xml:"ClusterRuleInfo,omitempty"`
}

type ClusterRuleSpec struct {
	*ArrayUpdateSpec

	Info *ClusterRuleInfo `xml:"info,omitempty"`
}

type ArrayOfClusterRuleSpec struct {
	ClusterRuleSpec []*ClusterRuleSpec `xml:"ClusterRuleSpec,omitempty"`
}

type ClusterSlotPolicy struct {
	*DynamicData
}

type ClusterFixedSizeSlotPolicy struct {
	*ClusterSlotPolicy

	Cpu    int32 `xml:"cpu,omitempty"`
	Memory int32 `xml:"memory,omitempty"`
}

type ClusterVmGroup struct {
	*ClusterGroupInfo

	Vm []*ManagedObjectReference `xml:"vm,omitempty"`
}

type ClusterVmHostRuleInfo struct {
	*ClusterRuleInfo

	VmGroupName             string `xml:"vmGroupName,omitempty"`
	AffineHostGroupName     string `xml:"affineHostGroupName,omitempty"`
	AntiAffineHostGroupName string `xml:"antiAffineHostGroupName,omitempty"`
}

type ClusterVmToolsMonitoringSettings struct {
	*DynamicData

	Enabled          bool   `xml:"enabled,omitempty"`
	VmMonitoring     string `xml:"vmMonitoring,omitempty"`
	ClusterSettings  bool   `xml:"clusterSettings,omitempty"`
	FailureInterval  int32  `xml:"failureInterval,omitempty"`
	MinUpTime        int32  `xml:"minUpTime,omitempty"`
	MaxFailures      int32  `xml:"maxFailures,omitempty"`
	MaxFailureWindow int32  `xml:"maxFailureWindow,omitempty"`
}

type DVPortConfigSpec struct {
	*DynamicData

	Operation     string                    `xml:"operation,omitempty"`
	Key           string                    `xml:"key,omitempty"`
	Name          string                    `xml:"name,omitempty"`
	Scope         []*ManagedObjectReference `xml:"scope,omitempty"`
	Description   string                    `xml:"description,omitempty"`
	Setting       *DVPortSetting            `xml:"setting,omitempty"`
	ConfigVersion string                    `xml:"configVersion,omitempty"`
}

type ArrayOfDVPortConfigSpec struct {
	DVPortConfigSpec []*DVPortConfigSpec `xml:"DVPortConfigSpec,omitempty"`
}

type DVPortConfigInfo struct {
	*DynamicData

	Name          string                    `xml:"name,omitempty"`
	Scope         []*ManagedObjectReference `xml:"scope,omitempty"`
	Description   string                    `xml:"description,omitempty"`
	Setting       *DVPortSetting            `xml:"setting,omitempty"`
	ConfigVersion string                    `xml:"configVersion,omitempty"`
}

type DVSTrafficShapingPolicy struct {
	*InheritablePolicy

	Enabled          *BoolPolicy `xml:"enabled,omitempty"`
	AverageBandwidth *LongPolicy `xml:"averageBandwidth,omitempty"`
	PeakBandwidth    *LongPolicy `xml:"peakBandwidth,omitempty"`
	BurstSize        *LongPolicy `xml:"burstSize,omitempty"`
}

type DVSHostLocalPortInfo struct {
	*DynamicData

	SwitchUuid string         `xml:"switchUuid,omitempty"`
	PortKey    string         `xml:"portKey,omitempty"`
	Setting    *DVPortSetting `xml:"setting,omitempty"`
	Vnic       string         `xml:"vnic,omitempty"`
}

type DVSVendorSpecificConfig struct {
	*InheritablePolicy

	KeyValue []*DistributedVirtualSwitchKeyedOpaqueBlob `xml:"keyValue,omitempty"`
}

type DvsFilterParameter struct {
	*DynamicData

	Parameters []string `xml:"parameters,omitempty"`
}

type DvsFilterConfig struct {
	*InheritablePolicy

	Key        string              `xml:"key,omitempty"`
	AgentName  string              `xml:"agentName,omitempty"`
	SlotNumber string              `xml:"slotNumber,omitempty"`
	Parameters *DvsFilterParameter `xml:"parameters,omitempty"`
	OnFailure  string              `xml:"onFailure,omitempty"`
}

type ArrayOfDvsFilterConfig struct {
	DvsFilterConfig []*DvsFilterConfig `xml:"DvsFilterConfig,omitempty"`
}

type DvsTrafficFilterConfig struct {
	*DvsFilterConfig

	TrafficRuleset *DvsTrafficRuleset `xml:"trafficRuleset,omitempty"`
}

type DvsFilterConfigSpec struct {
	*DvsFilterConfig

	Operation string `xml:"operation,omitempty"`
}

type DvsTrafficFilterConfigSpec struct {
	*DvsTrafficFilterConfig

	Operation string `xml:"operation,omitempty"`
}

type DvsFilterPolicy struct {
	*InheritablePolicy

	FilterConfig []*DvsFilterConfig `xml:"filterConfig,omitempty"`
}

type DVPortSetting struct {
	*DynamicData

	Blocked                 *BoolPolicy              `xml:"blocked,omitempty"`
	VmDirectPathGen2Allowed *BoolPolicy              `xml:"vmDirectPathGen2Allowed,omitempty"`
	InShapingPolicy         *DVSTrafficShapingPolicy `xml:"inShapingPolicy,omitempty"`
	OutShapingPolicy        *DVSTrafficShapingPolicy `xml:"outShapingPolicy,omitempty"`
	VendorSpecificConfig    *DVSVendorSpecificConfig `xml:"vendorSpecificConfig,omitempty"`
	NetworkResourcePoolKey  *StringPolicy            `xml:"networkResourcePoolKey,omitempty"`
	FilterPolicy            *DvsFilterPolicy         `xml:"filterPolicy,omitempty"`
}

type DVPortStatus struct {
	*DynamicData

	LinkUp                                 bool            `xml:"linkUp,omitempty"`
	Blocked                                bool            `xml:"blocked,omitempty"`
	VlanIds                                []*NumericRange `xml:"vlanIds,omitempty"`
	TrunkingMode                           bool            `xml:"trunkingMode,omitempty"`
	Mtu                                    int32           `xml:"mtu,omitempty"`
	LinkPeer                               string          `xml:"linkPeer,omitempty"`
	MacAddress                             string          `xml:"macAddress,omitempty"`
	StatusDetail                           string          `xml:"statusDetail,omitempty"`
	VmDirectPathGen2Active                 bool            `xml:"vmDirectPathGen2Active,omitempty"`
	VmDirectPathGen2InactiveReasonNetwork  []string        `xml:"vmDirectPathGen2InactiveReasonNetwork,omitempty"`
	VmDirectPathGen2InactiveReasonOther    []string        `xml:"vmDirectPathGen2InactiveReasonOther,omitempty"`
	VmDirectPathGen2InactiveReasonExtended string          `xml:"vmDirectPathGen2InactiveReasonExtended,omitempty"`
}

type DVPortState struct {
	*DynamicData

	RuntimeInfo         *DVPortStatus                              `xml:"runtimeInfo,omitempty"`
	Stats               *DistributedVirtualSwitchPortStatistics    `xml:"stats,omitempty"`
	VendorSpecificState []*DistributedVirtualSwitchKeyedOpaqueBlob `xml:"vendorSpecificState,omitempty"`
}

type DistributedVirtualPort struct {
	*DynamicData

	Key              string                                 `xml:"key,omitempty"`
	Config           *DVPortConfigInfo                      `xml:"config,omitempty"`
	DvsUuid          string                                 `xml:"dvsUuid,omitempty"`
	PortgroupKey     string                                 `xml:"portgroupKey,omitempty"`
	ProxyHost        *ManagedObjectReference                `xml:"proxyHost,omitempty"`
	Connectee        *DistributedVirtualSwitchPortConnectee `xml:"connectee,omitempty"`
	Conflict         bool                                   `xml:"conflict,omitempty"`
	ConflictPortKey  string                                 `xml:"conflictPortKey,omitempty"`
	State            *DVPortState                           `xml:"state,omitempty"`
	ConnectionCookie int32                                  `xml:"connectionCookie,omitempty"`
	LastStatusChange time.Time                              `xml:"lastStatusChange,omitempty"`
	HostLocalPort    bool                                   `xml:"hostLocalPort,omitempty"`
}

type ArrayOfDistributedVirtualPort struct {
	DistributedVirtualPort []*DistributedVirtualPort `xml:"DistributedVirtualPort,omitempty"`
}

type DVPortgroupPolicy struct {
	*DynamicData

	BlockOverrideAllowed               bool `xml:"blockOverrideAllowed,omitempty"`
	ShapingOverrideAllowed             bool `xml:"shapingOverrideAllowed,omitempty"`
	VendorConfigOverrideAllowed        bool `xml:"vendorConfigOverrideAllowed,omitempty"`
	LivePortMovingAllowed              bool `xml:"livePortMovingAllowed,omitempty"`
	PortConfigResetAtDisconnect        bool `xml:"portConfigResetAtDisconnect,omitempty"`
	NetworkResourcePoolOverrideAllowed bool `xml:"networkResourcePoolOverrideAllowed,omitempty"`
	TrafficFilterOverrideAllowed       bool `xml:"trafficFilterOverrideAllowed,omitempty"`
}

type DVPortgroupConfigSpec struct {
	*DynamicData

	ConfigVersion        string                                     `xml:"configVersion,omitempty"`
	Name                 string                                     `xml:"name,omitempty"`
	NumPorts             int32                                      `xml:"numPorts,omitempty"`
	PortNameFormat       string                                     `xml:"portNameFormat,omitempty"`
	DefaultPortConfig    *DVPortSetting                             `xml:"defaultPortConfig,omitempty"`
	Description          string                                     `xml:"description,omitempty"`
	Type_                string                                     `xml:"type,omitempty"`
	Scope                []*ManagedObjectReference                  `xml:"scope,omitempty"`
	Policy               *DVPortgroupPolicy                         `xml:"policy,omitempty"`
	VendorSpecificConfig []*DistributedVirtualSwitchKeyedOpaqueBlob `xml:"vendorSpecificConfig,omitempty"`
	AutoExpand           bool                                       `xml:"autoExpand,omitempty"`
}

type ArrayOfDVPortgroupConfigSpec struct {
	DVPortgroupConfigSpec []*DVPortgroupConfigSpec `xml:"DVPortgroupConfigSpec,omitempty"`
}

type DVPortgroupConfigInfo struct {
	*DynamicData

	Key                      string                                     `xml:"key,omitempty"`
	Name                     string                                     `xml:"name,omitempty"`
	NumPorts                 int32                                      `xml:"numPorts,omitempty"`
	DistributedVirtualSwitch *ManagedObjectReference                    `xml:"distributedVirtualSwitch,omitempty"`
	DefaultPortConfig        *DVPortSetting                             `xml:"defaultPortConfig,omitempty"`
	Description              string                                     `xml:"description,omitempty"`
	Type_                    string                                     `xml:"type,omitempty"`
	Policy                   *DVPortgroupPolicy                         `xml:"policy,omitempty"`
	PortNameFormat           string                                     `xml:"portNameFormat,omitempty"`
	Scope                    []*ManagedObjectReference                  `xml:"scope,omitempty"`
	VendorSpecificConfig     []*DistributedVirtualSwitchKeyedOpaqueBlob `xml:"vendorSpecificConfig,omitempty"`
	ConfigVersion            string                                     `xml:"configVersion,omitempty"`
	AutoExpand               bool                                       `xml:"autoExpand,omitempty"`
}

type DistributedVirtualPortgroupInfo struct {
	*DynamicData

	SwitchName      string                  `xml:"switchName,omitempty"`
	SwitchUuid      string                  `xml:"switchUuid,omitempty"`
	PortgroupName   string                  `xml:"portgroupName,omitempty"`
	PortgroupKey    string                  `xml:"portgroupKey,omitempty"`
	PortgroupType   string                  `xml:"portgroupType,omitempty"`
	UplinkPortgroup bool                    `xml:"uplinkPortgroup,omitempty"`
	Portgroup       *ManagedObjectReference `xml:"portgroup,omitempty"`
}

type ArrayOfDistributedVirtualPortgroupInfo struct {
	DistributedVirtualPortgroupInfo []*DistributedVirtualPortgroupInfo `xml:"DistributedVirtualPortgroupInfo,omitempty"`
}

type DVPortgroupSelection struct {
	*SelectionSet

	DvsUuid      string   `xml:"dvsUuid,omitempty"`
	PortgroupKey []string `xml:"portgroupKey,omitempty"`
}

type DistributedVirtualSwitchInfo struct {
	*DynamicData

	SwitchName               string                  `xml:"switchName,omitempty"`
	SwitchUuid               string                  `xml:"switchUuid,omitempty"`
	DistributedVirtualSwitch *ManagedObjectReference `xml:"distributedVirtualSwitch,omitempty"`
}

type ArrayOfDistributedVirtualSwitchInfo struct {
	DistributedVirtualSwitchInfo []*DistributedVirtualSwitchInfo `xml:"DistributedVirtualSwitchInfo,omitempty"`
}

type DVSManagerDvsConfigTarget struct {
	*DynamicData

	DistributedVirtualPortgroup []*DistributedVirtualPortgroupInfo `xml:"distributedVirtualPortgroup,omitempty"`
	DistributedVirtualSwitch    []*DistributedVirtualSwitchInfo    `xml:"distributedVirtualSwitch,omitempty"`
}

type DistributedVirtualSwitchManagerCompatibilityResult struct {
	*DynamicData

	Host  *ManagedObjectReference `xml:"host,omitempty"`
	Error []*LocalizedMethodFault `xml:"error,omitempty"`
}

type ArrayOfDistributedVirtualSwitchManagerCompatibilityResult struct {
	DistributedVirtualSwitchManagerCompatibilityResult []*DistributedVirtualSwitchManagerCompatibilityResult `xml:"DistributedVirtualSwitchManagerCompatibilityResult,omitempty"`
}

type DistributedVirtualSwitchManagerHostContainer struct {
	*DynamicData

	Container *ManagedObjectReference `xml:"container,omitempty"`
	Recursive bool                    `xml:"recursive,omitempty"`
}

type DistributedVirtualSwitchManagerHostDvsFilterSpec struct {
	*DynamicData

	Inclusive bool `xml:"inclusive,omitempty"`
}

type ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec struct {
	DistributedVirtualSwitchManagerHostDvsFilterSpec []*DistributedVirtualSwitchManagerHostDvsFilterSpec `xml:"DistributedVirtualSwitchManagerHostDvsFilterSpec,omitempty"`
}

type DistributedVirtualSwitchManagerHostArrayFilter struct {
	*DistributedVirtualSwitchManagerHostDvsFilterSpec

	Host []*ManagedObjectReference `xml:"host,omitempty"`
}

type DistributedVirtualSwitchManagerHostContainerFilter struct {
	*DistributedVirtualSwitchManagerHostDvsFilterSpec

	HostContainer *DistributedVirtualSwitchManagerHostContainer `xml:"hostContainer,omitempty"`
}

type DistributedVirtualSwitchManagerHostDvsMembershipFilter struct {
	*DistributedVirtualSwitchManagerHostDvsFilterSpec

	DistributedVirtualSwitch *ManagedObjectReference `xml:"distributedVirtualSwitch,omitempty"`
}

type DistributedVirtualSwitchManagerDvsProductSpec struct {
	*DynamicData

	NewSwitchProductSpec     *DistributedVirtualSwitchProductSpec `xml:"newSwitchProductSpec,omitempty"`
	DistributedVirtualSwitch *ManagedObjectReference              `xml:"distributedVirtualSwitch,omitempty"`
}

type DistributedVirtualSwitchManagerImportResult struct {
	*DynamicData

	DistributedVirtualSwitch    []*ManagedObjectReference                `xml:"distributedVirtualSwitch,omitempty"`
	DistributedVirtualPortgroup []*ManagedObjectReference                `xml:"distributedVirtualPortgroup,omitempty"`
	ImportFault                 []*ImportOperationBulkFaultFaultOnImport `xml:"importFault,omitempty"`
}

type DVSSelection struct {
	*SelectionSet

	DvsUuid string `xml:"dvsUuid,omitempty"`
}

type EntityBackupConfig struct {
	*DynamicData

	EntityType    string                  `xml:"entityType,omitempty"`
	ConfigBlob    []byte                  `xml:"configBlob,omitempty"`
	Key           string                  `xml:"key,omitempty"`
	Name          string                  `xml:"name,omitempty"`
	Container     *ManagedObjectReference `xml:"container,omitempty"`
	ConfigVersion string                  `xml:"configVersion,omitempty"`
}

type ArrayOfEntityBackupConfig struct {
	EntityBackupConfig []*EntityBackupConfig `xml:"EntityBackupConfig,omitempty"`
}

type EntityBackup struct {
	*DynamicData
}

type DistributedVirtualSwitchHostMemberConfigSpec struct {
	*DynamicData

	Operation            string                                     `xml:"operation,omitempty"`
	Host                 *ManagedObjectReference                    `xml:"host,omitempty"`
	Backing              *DistributedVirtualSwitchHostMemberBacking `xml:"backing,omitempty"`
	MaxProxySwitchPorts  int32                                      `xml:"maxProxySwitchPorts,omitempty"`
	VendorSpecificConfig []*DistributedVirtualSwitchKeyedOpaqueBlob `xml:"vendorSpecificConfig,omitempty"`
}

type ArrayOfDistributedVirtualSwitchHostMemberConfigSpec struct {
	DistributedVirtualSwitchHostMemberConfigSpec []*DistributedVirtualSwitchHostMemberConfigSpec `xml:"DistributedVirtualSwitchHostMemberConfigSpec,omitempty"`
}

type DistributedVirtualSwitchHostMemberPnicSpec struct {
	*DynamicData

	PnicDevice         string `xml:"pnicDevice,omitempty"`
	UplinkPortKey      string `xml:"uplinkPortKey,omitempty"`
	UplinkPortgroupKey string `xml:"uplinkPortgroupKey,omitempty"`
	ConnectionCookie   int32  `xml:"connectionCookie,omitempty"`
}

type ArrayOfDistributedVirtualSwitchHostMemberPnicSpec struct {
	DistributedVirtualSwitchHostMemberPnicSpec []*DistributedVirtualSwitchHostMemberPnicSpec `xml:"DistributedVirtualSwitchHostMemberPnicSpec,omitempty"`
}

type DistributedVirtualSwitchHostMemberBacking struct {
	*DynamicData
}

type DistributedVirtualSwitchHostMemberPnicBacking struct {
	*DistributedVirtualSwitchHostMemberBacking

	PnicSpec []*DistributedVirtualSwitchHostMemberPnicSpec `xml:"pnicSpec,omitempty"`
}

type DistributedVirtualSwitchHostMemberRuntimeState struct {
	*DynamicData

	CurrentMaxProxySwitchPorts int32 `xml:"currentMaxProxySwitchPorts,omitempty"`
}

type DistributedVirtualSwitchHostMemberConfigInfo struct {
	*DynamicData

	Host                 *ManagedObjectReference                    `xml:"host,omitempty"`
	MaxProxySwitchPorts  int32                                      `xml:"maxProxySwitchPorts,omitempty"`
	VendorSpecificConfig []*DistributedVirtualSwitchKeyedOpaqueBlob `xml:"vendorSpecificConfig,omitempty"`
	Backing              *DistributedVirtualSwitchHostMemberBacking `xml:"backing,omitempty"`
}

type HostMemberRuntimeInfo struct {
	*DynamicData

	Host              *ManagedObjectReference        `xml:"host,omitempty"`
	Status            string                         `xml:"status,omitempty"`
	StatusDetail      string                         `xml:"statusDetail,omitempty"`
	HealthCheckResult []*HostMemberHealthCheckResult `xml:"healthCheckResult,omitempty"`
}

type ArrayOfHostMemberRuntimeInfo struct {
	HostMemberRuntimeInfo []*HostMemberRuntimeInfo `xml:"HostMemberRuntimeInfo,omitempty"`
}

type HostMemberHealthCheckResult struct {
	*DynamicData

	Summary string `xml:"summary,omitempty"`
}

type ArrayOfHostMemberHealthCheckResult struct {
	HostMemberHealthCheckResult []*HostMemberHealthCheckResult `xml:"HostMemberHealthCheckResult,omitempty"`
}

type HostMemberUplinkHealthCheckResult struct {
	*HostMemberHealthCheckResult

	UplinkPortKey string `xml:"uplinkPortKey,omitempty"`
}

type DistributedVirtualSwitchHostMember struct {
	*DynamicData

	RuntimeState  *DistributedVirtualSwitchHostMemberRuntimeState `xml:"runtimeState,omitempty"`
	Config        *DistributedVirtualSwitchHostMemberConfigInfo   `xml:"config,omitempty"`
	ProductInfo   *DistributedVirtualSwitchProductSpec            `xml:"productInfo,omitempty"`
	UplinkPortKey []string                                        `xml:"uplinkPortKey,omitempty"`
	Status        string                                          `xml:"status,omitempty"`
	StatusDetail  string                                          `xml:"statusDetail,omitempty"`
}

type ArrayOfDistributedVirtualSwitchHostMember struct {
	DistributedVirtualSwitchHostMember []*DistributedVirtualSwitchHostMember `xml:"DistributedVirtualSwitchHostMember,omitempty"`
}

type DistributedVirtualSwitchHostProductSpec struct {
	*DynamicData

	ProductLineId string `xml:"productLineId,omitempty"`
	Version       string `xml:"version,omitempty"`
}

type ArrayOfDistributedVirtualSwitchHostProductSpec struct {
	DistributedVirtualSwitchHostProductSpec []*DistributedVirtualSwitchHostProductSpec `xml:"DistributedVirtualSwitchHostProductSpec,omitempty"`
}

type DistributedVirtualSwitchKeyedOpaqueBlob struct {
	*DynamicData

	Key        string `xml:"key,omitempty"`
	OpaqueData string `xml:"opaqueData,omitempty"`
}

type ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob struct {
	DistributedVirtualSwitchKeyedOpaqueBlob []*DistributedVirtualSwitchKeyedOpaqueBlob `xml:"DistributedVirtualSwitchKeyedOpaqueBlob,omitempty"`
}

type DVSNetworkResourcePoolAllocationInfo struct {
	*DynamicData

	Limit       int64       `xml:"limit,omitempty"`
	Shares      *SharesInfo `xml:"shares,omitempty"`
	PriorityTag int32       `xml:"priorityTag,omitempty"`
}

type DVSNetworkResourcePoolConfigSpec struct {
	*DynamicData

	Key            string                                `xml:"key,omitempty"`
	ConfigVersion  string                                `xml:"configVersion,omitempty"`
	AllocationInfo *DVSNetworkResourcePoolAllocationInfo `xml:"allocationInfo,omitempty"`
	Name           string                                `xml:"name,omitempty"`
	Description    string                                `xml:"description,omitempty"`
}

type ArrayOfDVSNetworkResourcePoolConfigSpec struct {
	DVSNetworkResourcePoolConfigSpec []*DVSNetworkResourcePoolConfigSpec `xml:"DVSNetworkResourcePoolConfigSpec,omitempty"`
}

type DVSNetworkResourcePool struct {
	*DynamicData

	Key            string                                `xml:"key,omitempty"`
	Name           string                                `xml:"name,omitempty"`
	Description    string                                `xml:"description,omitempty"`
	ConfigVersion  string                                `xml:"configVersion,omitempty"`
	AllocationInfo *DVSNetworkResourcePoolAllocationInfo `xml:"allocationInfo,omitempty"`
}

type ArrayOfDVSNetworkResourcePool struct {
	DVSNetworkResourcePool []*DVSNetworkResourcePool `xml:"DVSNetworkResourcePool,omitempty"`
}

type DistributedVirtualSwitchPortConnectee struct {
	*DynamicData

	ConnectedEntity *ManagedObjectReference `xml:"connectedEntity,omitempty"`
	NicKey          string                  `xml:"nicKey,omitempty"`
	Type_           string                  `xml:"type,omitempty"`
	AddressHint     string                  `xml:"addressHint,omitempty"`
}

type DistributedVirtualSwitchPortConnection struct {
	*DynamicData

	SwitchUuid       string `xml:"switchUuid,omitempty"`
	PortgroupKey     string `xml:"portgroupKey,omitempty"`
	PortKey          string `xml:"portKey,omitempty"`
	ConnectionCookie int32  `xml:"connectionCookie,omitempty"`
}

type DistributedVirtualSwitchPortCriteria struct {
	*DynamicData

	Connected    bool                    `xml:"connected,omitempty"`
	Active       bool                    `xml:"active,omitempty"`
	UplinkPort   bool                    `xml:"uplinkPort,omitempty"`
	Scope        *ManagedObjectReference `xml:"scope,omitempty"`
	PortgroupKey []string                `xml:"portgroupKey,omitempty"`
	Inside       bool                    `xml:"inside,omitempty"`
	PortKey      []string                `xml:"portKey,omitempty"`
}

type DistributedVirtualSwitchPortStatistics struct {
	*DynamicData

	PacketsInMulticast  int64 `xml:"packetsInMulticast,omitempty"`
	PacketsOutMulticast int64 `xml:"packetsOutMulticast,omitempty"`
	BytesInMulticast    int64 `xml:"bytesInMulticast,omitempty"`
	BytesOutMulticast   int64 `xml:"bytesOutMulticast,omitempty"`
	PacketsInUnicast    int64 `xml:"packetsInUnicast,omitempty"`
	PacketsOutUnicast   int64 `xml:"packetsOutUnicast,omitempty"`
	BytesInUnicast      int64 `xml:"bytesInUnicast,omitempty"`
	BytesOutUnicast     int64 `xml:"bytesOutUnicast,omitempty"`
	PacketsInBroadcast  int64 `xml:"packetsInBroadcast,omitempty"`
	PacketsOutBroadcast int64 `xml:"packetsOutBroadcast,omitempty"`
	BytesInBroadcast    int64 `xml:"bytesInBroadcast,omitempty"`
	BytesOutBroadcast   int64 `xml:"bytesOutBroadcast,omitempty"`
	PacketsInDropped    int64 `xml:"packetsInDropped,omitempty"`
	PacketsOutDropped   int64 `xml:"packetsOutDropped,omitempty"`
	PacketsInException  int64 `xml:"packetsInException,omitempty"`
	PacketsOutException int64 `xml:"packetsOutException,omitempty"`
}

type DistributedVirtualSwitchProductSpec struct {
	*DynamicData

	Name            string `xml:"name,omitempty"`
	Vendor          string `xml:"vendor,omitempty"`
	Version         string `xml:"version,omitempty"`
	Build           string `xml:"build,omitempty"`
	ForwardingClass string `xml:"forwardingClass,omitempty"`
	BundleId        string `xml:"bundleId,omitempty"`
	BundleUrl       string `xml:"bundleUrl,omitempty"`
}

type ArrayOfDistributedVirtualSwitchProductSpec struct {
	DistributedVirtualSwitchProductSpec []*DistributedVirtualSwitchProductSpec `xml:"DistributedVirtualSwitchProductSpec,omitempty"`
}

type DvsNetworkRuleQualifier struct {
	*DynamicData

	Key string `xml:"key,omitempty"`
}

type ArrayOfDvsNetworkRuleQualifier struct {
	DvsNetworkRuleQualifier []*DvsNetworkRuleQualifier `xml:"DvsNetworkRuleQualifier,omitempty"`
}

type DvsNetworkRuleAction struct {
	*DynamicData
}

type DvsIpNetworkRuleQualifier struct {
	*DvsNetworkRuleQualifier

	SourceAddress      *IpAddress     `xml:"sourceAddress,omitempty"`
	DestinationAddress *IpAddress     `xml:"destinationAddress,omitempty"`
	Protocol           *IntExpression `xml:"protocol,omitempty"`
	SourceIpPort       *DvsIpPort     `xml:"sourceIpPort,omitempty"`
	DestinationIpPort  *DvsIpPort     `xml:"destinationIpPort,omitempty"`
	TcpFlags           *IntExpression `xml:"tcpFlags,omitempty"`
}

type DvsIpPort struct {
	*NegatableExpression
}

type DvsSingleIpPort struct {
	*DvsIpPort

	PortNumber int32 `xml:"portNumber,omitempty"`
}

type DvsIpPortRange struct {
	*DvsIpPort

	StartPortNumber int32 `xml:"startPortNumber,omitempty"`
	EndPortNumber   int32 `xml:"endPortNumber,omitempty"`
}

type DvsMacNetworkRuleQualifier struct {
	*DvsNetworkRuleQualifier

	SourceAddress      *MacAddress    `xml:"sourceAddress,omitempty"`
	DestinationAddress *MacAddress    `xml:"destinationAddress,omitempty"`
	Protocol           *IntExpression `xml:"protocol,omitempty"`
	VlanId             *IntExpression `xml:"vlanId,omitempty"`
}

type DvsSystemTrafficNetworkRuleQualifier struct {
	*DvsNetworkRuleQualifier

	TypeOfSystemTraffic *StringExpression `xml:"typeOfSystemTraffic,omitempty"`
}

type DvsDropNetworkRuleAction struct {
	*DvsNetworkRuleAction
}

type DvsAcceptNetworkRuleAction struct {
	*DvsNetworkRuleAction
}

type DvsUpdateTagNetworkRuleAction struct {
	*DvsNetworkRuleAction

	QosTag  int32 `xml:"qosTag,omitempty"`
	DscpTag int32 `xml:"dscpTag,omitempty"`
}

type DvsRateLimitNetworkRuleAction struct {
	*DvsNetworkRuleAction

	PacketsPerSecond int32 `xml:"packetsPerSecond,omitempty"`
}

type DvsLogNetworkRuleAction struct {
	*DvsNetworkRuleAction
}

type DvsGreEncapNetworkRuleAction struct {
	*DvsNetworkRuleAction

	EncapsulationIp *SingleIp `xml:"encapsulationIp,omitempty"`
}

type DvsMacRewriteNetworkRuleAction struct {
	*DvsNetworkRuleAction

	RewriteMac string `xml:"rewriteMac,omitempty"`
}

type DvsPuntNetworkRuleAction struct {
	*DvsNetworkRuleAction
}

type DvsCopyNetworkRuleAction struct {
	*DvsNetworkRuleAction
}

type DvsTrafficRule struct {
	*DynamicData

	Key         string                     `xml:"key,omitempty"`
	Description string                     `xml:"description,omitempty"`
	Sequence    int32                      `xml:"sequence,omitempty"`
	Qualifier   []*DvsNetworkRuleQualifier `xml:"qualifier,omitempty"`
	Action      *DvsNetworkRuleAction      `xml:"action,omitempty"`
	Direction   string                     `xml:"direction,omitempty"`
}

type ArrayOfDvsTrafficRule struct {
	DvsTrafficRule []*DvsTrafficRule `xml:"DvsTrafficRule,omitempty"`
}

type DvsTrafficRuleset struct {
	*DynamicData

	Key        string            `xml:"key,omitempty"`
	Enabled    bool              `xml:"enabled,omitempty"`
	Precedence int32             `xml:"precedence,omitempty"`
	Rules      []*DvsTrafficRule `xml:"rules,omitempty"`
}

type VMwareDVSFeatureCapability struct {
	*DVSFeatureCapability

	VspanSupported  bool                      `xml:"vspanSupported,omitempty"`
	LldpSupported   bool                      `xml:"lldpSupported,omitempty"`
	IpfixSupported  bool                      `xml:"ipfixSupported,omitempty"`
	VspanCapability *VMwareDVSVspanCapability `xml:"vspanCapability,omitempty"`
	LacpCapability  *VMwareDvsLacpCapability  `xml:"lacpCapability,omitempty"`
}

type VMwareDvsLacpCapability struct {
	*DynamicData

	LacpSupported           bool `xml:"lacpSupported,omitempty"`
	MultiLacpGroupSupported bool `xml:"multiLacpGroupSupported,omitempty"`
}

type VMwareDVSHealthCheckCapability struct {
	*DVSHealthCheckCapability

	VlanMtuSupported bool `xml:"vlanMtuSupported,omitempty"`
	TeamingSupported bool `xml:"teamingSupported,omitempty"`
}

type VMwareDVSVspanCapability struct {
	*DynamicData

	MixedDestSupported         bool `xml:"mixedDestSupported,omitempty"`
	DvportSupported            bool `xml:"dvportSupported,omitempty"`
	RemoteSourceSupported      bool `xml:"remoteSourceSupported,omitempty"`
	RemoteDestSupported        bool `xml:"remoteDestSupported,omitempty"`
	EncapRemoteSourceSupported bool `xml:"encapRemoteSourceSupported,omitempty"`
}

type VMwareVspanPort struct {
	*DynamicData

	PortKey                   []string `xml:"portKey,omitempty"`
	UplinkPortName            []string `xml:"uplinkPortName,omitempty"`
	WildcardPortConnecteeType []string `xml:"wildcardPortConnecteeType,omitempty"`
	Vlans                     []int32  `xml:"vlans,omitempty"`
	IpAddress                 []string `xml:"ipAddress,omitempty"`
}

type VMwareVspanSession struct {
	*DynamicData

	Key                   string           `xml:"key,omitempty"`
	Name                  string           `xml:"name,omitempty"`
	Description           string           `xml:"description,omitempty"`
	Enabled               bool             `xml:"enabled,omitempty"`
	SourcePortTransmitted *VMwareVspanPort `xml:"sourcePortTransmitted,omitempty"`
	SourcePortReceived    *VMwareVspanPort `xml:"sourcePortReceived,omitempty"`
	DestinationPort       *VMwareVspanPort `xml:"destinationPort,omitempty"`
	EncapsulationVlanId   int32            `xml:"encapsulationVlanId,omitempty"`
	StripOriginalVlan     bool             `xml:"stripOriginalVlan,omitempty"`
	MirroredPacketLength  int32            `xml:"mirroredPacketLength,omitempty"`
	NormalTrafficAllowed  bool             `xml:"normalTrafficAllowed,omitempty"`
	SessionType           string           `xml:"sessionType,omitempty"`
	SamplingRate          int32            `xml:"samplingRate,omitempty"`
}

type ArrayOfVMwareVspanSession struct {
	VMwareVspanSession []*VMwareVspanSession `xml:"VMwareVspanSession,omitempty"`
}

type VMwareIpfixConfig struct {
	*DynamicData

	CollectorIpAddress string `xml:"collectorIpAddress,omitempty"`
	CollectorPort      int32  `xml:"collectorPort,omitempty"`
	ActiveFlowTimeout  int32  `xml:"activeFlowTimeout,omitempty"`
	IdleFlowTimeout    int32  `xml:"idleFlowTimeout,omitempty"`
	SamplingRate       int32  `xml:"samplingRate,omitempty"`
	InternalFlowsOnly  bool   `xml:"internalFlowsOnly,omitempty"`
}

type VMwareDVSConfigInfo struct {
	*DVSConfigInfo

	VspanSession                []*VMwareVspanSession        `xml:"vspanSession,omitempty"`
	PvlanConfig                 []*VMwareDVSPvlanMapEntry    `xml:"pvlanConfig,omitempty"`
	MaxMtu                      int32                        `xml:"maxMtu,omitempty"`
	LinkDiscoveryProtocolConfig *LinkDiscoveryProtocolConfig `xml:"linkDiscoveryProtocolConfig,omitempty"`
	IpfixConfig                 *VMwareIpfixConfig           `xml:"ipfixConfig,omitempty"`
	LacpGroupConfig             []*VMwareDvsLacpGroupConfig  `xml:"lacpGroupConfig,omitempty"`
	LacpApiVersion              string                       `xml:"lacpApiVersion,omitempty"`
}

type VMwareDVSConfigSpec struct {
	*DVSConfigSpec

	PvlanConfigSpec             []*VMwareDVSPvlanConfigSpec  `xml:"pvlanConfigSpec,omitempty"`
	VspanConfigSpec             []*VMwareDVSVspanConfigSpec  `xml:"vspanConfigSpec,omitempty"`
	MaxMtu                      int32                        `xml:"maxMtu,omitempty"`
	LinkDiscoveryProtocolConfig *LinkDiscoveryProtocolConfig `xml:"linkDiscoveryProtocolConfig,omitempty"`
	IpfixConfig                 *VMwareIpfixConfig           `xml:"ipfixConfig,omitempty"`
	LacpApiVersion              string                       `xml:"lacpApiVersion,omitempty"`
}

type VMwareUplinkPortOrderPolicy struct {
	*InheritablePolicy

	ActiveUplinkPort  []string `xml:"activeUplinkPort,omitempty"`
	StandbyUplinkPort []string `xml:"standbyUplinkPort,omitempty"`
}

type DVSFailureCriteria struct {
	*InheritablePolicy

	CheckSpeed        *StringPolicy `xml:"checkSpeed,omitempty"`
	Speed             *IntPolicy    `xml:"speed,omitempty"`
	CheckDuplex       *BoolPolicy   `xml:"checkDuplex,omitempty"`
	FullDuplex        *BoolPolicy   `xml:"fullDuplex,omitempty"`
	CheckErrorPercent *BoolPolicy   `xml:"checkErrorPercent,omitempty"`
	Percentage        *IntPolicy    `xml:"percentage,omitempty"`
	CheckBeacon       *BoolPolicy   `xml:"checkBeacon,omitempty"`
}

type VmwareUplinkPortTeamingPolicy struct {
	*InheritablePolicy

	Policy          *StringPolicy                `xml:"policy,omitempty"`
	ReversePolicy   *BoolPolicy                  `xml:"reversePolicy,omitempty"`
	NotifySwitches  *BoolPolicy                  `xml:"notifySwitches,omitempty"`
	RollingOrder    *BoolPolicy                  `xml:"rollingOrder,omitempty"`
	FailureCriteria *DVSFailureCriteria          `xml:"failureCriteria,omitempty"`
	UplinkPortOrder *VMwareUplinkPortOrderPolicy `xml:"uplinkPortOrder,omitempty"`
}

type VmwareDistributedVirtualSwitchVlanSpec struct {
	*InheritablePolicy
}

type VmwareDistributedVirtualSwitchPvlanSpec struct {
	*VmwareDistributedVirtualSwitchVlanSpec

	PvlanId int32 `xml:"pvlanId,omitempty"`
}

type VmwareDistributedVirtualSwitchVlanIdSpec struct {
	*VmwareDistributedVirtualSwitchVlanSpec

	VlanId int32 `xml:"vlanId,omitempty"`
}

type VmwareDistributedVirtualSwitchTrunkVlanSpec struct {
	*VmwareDistributedVirtualSwitchVlanSpec

	VlanId []*NumericRange `xml:"vlanId,omitempty"`
}

type DVSSecurityPolicy struct {
	*InheritablePolicy

	AllowPromiscuous *BoolPolicy `xml:"allowPromiscuous,omitempty"`
	MacChanges       *BoolPolicy `xml:"macChanges,omitempty"`
	ForgedTransmits  *BoolPolicy `xml:"forgedTransmits,omitempty"`
}

type VMwareDVSPortSetting struct {
	*DVPortSetting

	Vlan                *VmwareDistributedVirtualSwitchVlanSpec `xml:"vlan,omitempty"`
	QosTag              *IntPolicy                              `xml:"qosTag,omitempty"`
	UplinkTeamingPolicy *VmwareUplinkPortTeamingPolicy          `xml:"uplinkTeamingPolicy,omitempty"`
	SecurityPolicy      *DVSSecurityPolicy                      `xml:"securityPolicy,omitempty"`
	IpfixEnabled        *BoolPolicy                             `xml:"ipfixEnabled,omitempty"`
	TxUplink            *BoolPolicy                             `xml:"txUplink,omitempty"`
	LacpPolicy          *VMwareUplinkLacpPolicy                 `xml:"lacpPolicy,omitempty"`
}

type VMwareDVSPortgroupPolicy struct {
	*DVPortgroupPolicy

	VlanOverrideAllowed           bool `xml:"vlanOverrideAllowed,omitempty"`
	UplinkTeamingOverrideAllowed  bool `xml:"uplinkTeamingOverrideAllowed,omitempty"`
	SecurityPolicyOverrideAllowed bool `xml:"securityPolicyOverrideAllowed,omitempty"`
	IpfixOverrideAllowed          bool `xml:"ipfixOverrideAllowed,omitempty"`
}

type VMwareDVSPvlanConfigSpec struct {
	*DynamicData

	PvlanEntry *VMwareDVSPvlanMapEntry `xml:"pvlanEntry,omitempty"`
	Operation  string                  `xml:"operation,omitempty"`
}

type ArrayOfVMwareDVSPvlanConfigSpec struct {
	VMwareDVSPvlanConfigSpec []*VMwareDVSPvlanConfigSpec `xml:"VMwareDVSPvlanConfigSpec,omitempty"`
}

type VMwareDVSPvlanMapEntry struct {
	*DynamicData

	PrimaryVlanId   int32  `xml:"primaryVlanId,omitempty"`
	SecondaryVlanId int32  `xml:"secondaryVlanId,omitempty"`
	PvlanType       string `xml:"pvlanType,omitempty"`
}

type ArrayOfVMwareDVSPvlanMapEntry struct {
	VMwareDVSPvlanMapEntry []*VMwareDVSPvlanMapEntry `xml:"VMwareDVSPvlanMapEntry,omitempty"`
}

type VMwareDVSVspanConfigSpec struct {
	*DynamicData

	VspanSession *VMwareVspanSession `xml:"vspanSession,omitempty"`
	Operation    string              `xml:"operation,omitempty"`
}

type ArrayOfVMwareDVSVspanConfigSpec struct {
	VMwareDVSVspanConfigSpec []*VMwareDVSVspanConfigSpec `xml:"VMwareDVSVspanConfigSpec,omitempty"`
}

type VMwareDVSHealthCheckConfig struct {
	*DVSHealthCheckConfig
}

type VMwareDVSVlanMtuHealthCheckConfig struct {
	*VMwareDVSHealthCheckConfig
}

type VMwareDVSTeamingHealthCheckConfig struct {
	*VMwareDVSHealthCheckConfig
}

type VMwareDVSVlanHealthCheckResult struct {
	*HostMemberUplinkHealthCheckResult

	TrunkedVlan   []*NumericRange `xml:"trunkedVlan,omitempty"`
	UntrunkedVlan []*NumericRange `xml:"untrunkedVlan,omitempty"`
}

type VMwareDVSMtuHealthCheckResult struct {
	*HostMemberUplinkHealthCheckResult

	MtuMismatch             bool            `xml:"mtuMismatch,omitempty"`
	VlanSupportSwitchMtu    []*NumericRange `xml:"vlanSupportSwitchMtu,omitempty"`
	VlanNotSupportSwitchMtu []*NumericRange `xml:"vlanNotSupportSwitchMtu,omitempty"`
}

type VMwareDVSTeamingHealthCheckResult struct {
	*HostMemberHealthCheckResult

	TeamingStatus string `xml:"teamingStatus,omitempty"`
}

type VMwareUplinkLacpPolicy struct {
	*InheritablePolicy

	Enable *BoolPolicy   `xml:"enable,omitempty"`
	Mode   *StringPolicy `xml:"mode,omitempty"`
}

type VMwareDvsLacpGroupConfig struct {
	*DynamicData

	Key                  string                   `xml:"key,omitempty"`
	Name                 string                   `xml:"name,omitempty"`
	Mode                 string                   `xml:"mode,omitempty"`
	UplinkNum            int32                    `xml:"uplinkNum,omitempty"`
	LoadbalanceAlgorithm string                   `xml:"loadbalanceAlgorithm,omitempty"`
	Vlan                 *VMwareDvsLagVlanConfig  `xml:"vlan,omitempty"`
	Ipfix                *VMwareDvsLagIpfixConfig `xml:"ipfix,omitempty"`
	UplinkName           []string                 `xml:"uplinkName,omitempty"`
	UplinkPortKey        []string                 `xml:"uplinkPortKey,omitempty"`
}

type ArrayOfVMwareDvsLacpGroupConfig struct {
	VMwareDvsLacpGroupConfig []*VMwareDvsLacpGroupConfig `xml:"VMwareDvsLacpGroupConfig,omitempty"`
}

type VMwareDvsLagVlanConfig struct {
	*DynamicData

	VlanId []*NumericRange `xml:"vlanId,omitempty"`
}

type VMwareDvsLagIpfixConfig struct {
	*DynamicData

	IpfixEnabled bool `xml:"ipfixEnabled,omitempty"`
}

type VMwareDvsLacpGroupSpec struct {
	*DynamicData

	LacpGroupConfig *VMwareDvsLacpGroupConfig `xml:"lacpGroupConfig,omitempty"`
	Operation       string                    `xml:"operation,omitempty"`
}

type ArrayOfVMwareDvsLacpGroupSpec struct {
	VMwareDvsLacpGroupSpec []*VMwareDvsLacpGroupSpec `xml:"VMwareDvsLacpGroupSpec,omitempty"`
}

type Event struct {
	*DynamicData

	Key                  int32                         `xml:"key,omitempty"`
	ChainId              int32                         `xml:"chainId,omitempty"`
	CreatedTime          time.Time                     `xml:"createdTime,omitempty"`
	UserName             string                        `xml:"userName,omitempty"`
	Datacenter           *DatacenterEventArgument      `xml:"datacenter,omitempty"`
	ComputeResource      *ComputeResourceEventArgument `xml:"computeResource,omitempty"`
	Host                 *HostEventArgument            `xml:"host,omitempty"`
	Vm                   *VmEventArgument              `xml:"vm,omitempty"`
	Ds                   *DatastoreEventArgument       `xml:"ds,omitempty"`
	Net                  *NetworkEventArgument         `xml:"net,omitempty"`
	Dvs                  *DvsEventArgument             `xml:"dvs,omitempty"`
	FullFormattedMessage string                        `xml:"fullFormattedMessage,omitempty"`
	ChangeTag            string                        `xml:"changeTag,omitempty"`
}

type ArrayOfEvent struct {
	Event []*Event `xml:"Event,omitempty"`
}

type GeneralEvent struct {
	*Event

	Message string `xml:"message,omitempty"`
}

type GeneralHostInfoEvent struct {
	*GeneralEvent
}

type GeneralHostWarningEvent struct {
	*GeneralEvent
}

type GeneralHostErrorEvent struct {
	*GeneralEvent
}

type GeneralVmInfoEvent struct {
	*GeneralEvent
}

type GeneralVmWarningEvent struct {
	*GeneralEvent
}

type GeneralVmErrorEvent struct {
	*GeneralEvent
}

type GeneralUserEvent struct {
	*GeneralEvent

	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
}

type ExtendedEventPair struct {
	*DynamicData

	Key   string `xml:"key,omitempty"`
	Value string `xml:"value,omitempty"`
}

type ArrayOfExtendedEventPair struct {
	ExtendedEventPair []*ExtendedEventPair `xml:"ExtendedEventPair,omitempty"`
}

type ExtendedEvent struct {
	*GeneralEvent

	EventTypeId   string                  `xml:"eventTypeId,omitempty"`
	ManagedObject *ManagedObjectReference `xml:"managedObject,omitempty"`
	Data          []*ExtendedEventPair    `xml:"data,omitempty"`
}

type HealthStatusChangedEvent struct {
	*Event

	ComponentId   string `xml:"componentId,omitempty"`
	OldStatus     string `xml:"oldStatus,omitempty"`
	NewStatus     string `xml:"newStatus,omitempty"`
	ComponentName string `xml:"componentName,omitempty"`
}

type HostInventoryUnreadableEvent struct {
	*Event
}

type DatacenterEvent struct {
	*Event
}

type DatacenterCreatedEvent struct {
	*DatacenterEvent

	Parent *FolderEventArgument `xml:"parent,omitempty"`
}

type DatacenterRenamedEvent struct {
	*DatacenterEvent

	OldName string `xml:"oldName,omitempty"`
	NewName string `xml:"newName,omitempty"`
}

type SessionEvent struct {
	*Event
}

type ServerStartedSessionEvent struct {
	*SessionEvent
}

type UserLoginSessionEvent struct {
	*SessionEvent

	IpAddress string `xml:"ipAddress,omitempty"`
	UserAgent string `xml:"userAgent,omitempty"`
	Locale    string `xml:"locale,omitempty"`
	SessionId string `xml:"sessionId,omitempty"`
}

type UserLogoutSessionEvent struct {
	*SessionEvent

	IpAddress string    `xml:"ipAddress,omitempty"`
	UserAgent string    `xml:"userAgent,omitempty"`
	CallCount int64     `xml:"callCount,omitempty"`
	SessionId string    `xml:"sessionId,omitempty"`
	LoginTime time.Time `xml:"loginTime,omitempty"`
}

type BadUsernameSessionEvent struct {
	*SessionEvent

	IpAddress string `xml:"ipAddress,omitempty"`
}

type AlreadyAuthenticatedSessionEvent struct {
	*SessionEvent
}

type NoAccessUserEvent struct {
	*SessionEvent

	IpAddress string `xml:"ipAddress,omitempty"`
}

type SessionTerminatedEvent struct {
	*SessionEvent

	SessionId          string `xml:"sessionId,omitempty"`
	TerminatedUsername string `xml:"terminatedUsername,omitempty"`
}

type GlobalMessageChangedEvent struct {
	*SessionEvent

	Message string `xml:"message,omitempty"`
}

type UpgradeEvent struct {
	*Event

	Message string `xml:"message,omitempty"`
}

type InfoUpgradeEvent struct {
	*UpgradeEvent
}

type WarningUpgradeEvent struct {
	*UpgradeEvent
}

type ErrorUpgradeEvent struct {
	*UpgradeEvent
}

type UserUpgradeEvent struct {
	*UpgradeEvent
}

type HostEvent struct {
	*Event
}

type HostDasEvent struct {
	*HostEvent
}

type HostConnectedEvent struct {
	*HostEvent
}

type HostDisconnectedEvent struct {
	*HostEvent

	Reason string `xml:"reason,omitempty"`
}

type HostSyncFailedEvent struct {
	*HostEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type HostConnectionLostEvent struct {
	*HostEvent
}

type HostReconnectionFailedEvent struct {
	*HostEvent
}

type HostCnxFailedNoConnectionEvent struct {
	*HostEvent
}

type HostCnxFailedBadUsernameEvent struct {
	*HostEvent
}

type HostCnxFailedBadVersionEvent struct {
	*HostEvent
}

type HostCnxFailedAlreadyManagedEvent struct {
	*HostEvent

	ServerName string `xml:"serverName,omitempty"`
}

type HostCnxFailedNoLicenseEvent struct {
	*HostEvent
}

type HostCnxFailedNetworkErrorEvent struct {
	*HostEvent
}

type HostRemovedEvent struct {
	*HostEvent
}

type HostCnxFailedCcagentUpgradeEvent struct {
	*HostEvent
}

type HostCnxFailedBadCcagentEvent struct {
	*HostEvent
}

type HostCnxFailedEvent struct {
	*HostEvent
}

type HostCnxFailedAccountFailedEvent struct {
	*HostEvent
}

type HostCnxFailedNoAccessEvent struct {
	*HostEvent
}

type HostShutdownEvent struct {
	*HostEvent

	Reason string `xml:"reason,omitempty"`
}

type HostCnxFailedNotFoundEvent struct {
	*HostEvent
}

type HostCnxFailedTimeoutEvent struct {
	*HostEvent
}

type HostUpgradeFailedEvent struct {
	*HostEvent
}

type EnteringMaintenanceModeEvent struct {
	*HostEvent
}

type EnteredMaintenanceModeEvent struct {
	*HostEvent
}

type ExitMaintenanceModeEvent struct {
	*HostEvent
}

type CanceledHostOperationEvent struct {
	*HostEvent
}

type TimedOutHostOperationEvent struct {
	*HostEvent
}

type HostDasEnabledEvent struct {
	*HostEvent
}

type HostDasDisabledEvent struct {
	*HostEvent
}

type HostDasEnablingEvent struct {
	*HostEvent
}

type HostDasDisablingEvent struct {
	*HostEvent
}

type HostDasErrorEvent struct {
	*HostEvent

	Message string `xml:"message,omitempty"`
	Reason  string `xml:"reason,omitempty"`
}

type HostDasOkEvent struct {
	*HostEvent
}

type VcAgentUpgradedEvent struct {
	*HostEvent
}

type VcAgentUninstalledEvent struct {
	*HostEvent
}

type VcAgentUpgradeFailedEvent struct {
	*HostEvent

	Reason string `xml:"reason,omitempty"`
}

type VcAgentUninstallFailedEvent struct {
	*HostEvent

	Reason string `xml:"reason,omitempty"`
}

type HostAddedEvent struct {
	*HostEvent
}

type HostAddFailedEvent struct {
	*HostEvent

	Hostname string `xml:"hostname,omitempty"`
}

type HostIpChangedEvent struct {
	*HostEvent

	OldIP string `xml:"oldIP,omitempty"`
	NewIP string `xml:"newIP,omitempty"`
}

type EnteringStandbyModeEvent struct {
	*HostEvent
}

type DrsEnteringStandbyModeEvent struct {
	*EnteringStandbyModeEvent
}

type EnteredStandbyModeEvent struct {
	*HostEvent
}

type DrsEnteredStandbyModeEvent struct {
	*EnteredStandbyModeEvent
}

type ExitingStandbyModeEvent struct {
	*HostEvent
}

type DrsExitingStandbyModeEvent struct {
	*ExitingStandbyModeEvent
}

type ExitedStandbyModeEvent struct {
	*HostEvent
}

type DrsExitedStandbyModeEvent struct {
	*ExitedStandbyModeEvent
}

type ExitStandbyModeFailedEvent struct {
	*HostEvent
}

type DrsExitStandbyModeFailedEvent struct {
	*ExitStandbyModeFailedEvent
}

type UpdatedAgentBeingRestartedEvent struct {
	*HostEvent
}

type AccountCreatedEvent struct {
	*HostEvent

	Spec  *HostAccountSpec `xml:"spec,omitempty"`
	Group bool             `xml:"group,omitempty"`
}

type AccountRemovedEvent struct {
	*HostEvent

	Account string `xml:"account,omitempty"`
	Group   bool   `xml:"group,omitempty"`
}

type UserPasswordChanged struct {
	*HostEvent

	UserLogin string `xml:"userLogin,omitempty"`
}

type AccountUpdatedEvent struct {
	*HostEvent

	Spec  *HostAccountSpec `xml:"spec,omitempty"`
	Group bool             `xml:"group,omitempty"`
}

type UserAssignedToGroup struct {
	*HostEvent

	UserLogin string `xml:"userLogin,omitempty"`
	Group     string `xml:"group,omitempty"`
}

type UserUnassignedFromGroup struct {
	*HostEvent

	UserLogin string `xml:"userLogin,omitempty"`
	Group     string `xml:"group,omitempty"`
}

type DatastorePrincipalConfigured struct {
	*HostEvent

	DatastorePrincipal string `xml:"datastorePrincipal,omitempty"`
}

type VMFSDatastoreCreatedEvent struct {
	*HostEvent

	Datastore *DatastoreEventArgument `xml:"datastore,omitempty"`
}

type NASDatastoreCreatedEvent struct {
	*HostEvent

	Datastore *DatastoreEventArgument `xml:"datastore,omitempty"`
}

type LocalDatastoreCreatedEvent struct {
	*HostEvent

	Datastore *DatastoreEventArgument `xml:"datastore,omitempty"`
}

type VMFSDatastoreExtendedEvent struct {
	*HostEvent

	Datastore *DatastoreEventArgument `xml:"datastore,omitempty"`
}

type VMFSDatastoreExpandedEvent struct {
	*HostEvent

	Datastore *DatastoreEventArgument `xml:"datastore,omitempty"`
}

type DatastoreRemovedOnHostEvent struct {
	*HostEvent

	Datastore *DatastoreEventArgument `xml:"datastore,omitempty"`
}

type DatastoreRenamedOnHostEvent struct {
	*HostEvent

	OldName string `xml:"oldName,omitempty"`
	NewName string `xml:"newName,omitempty"`
}

type DuplicateIpDetectedEvent struct {
	*HostEvent

	DuplicateIP string `xml:"duplicateIP,omitempty"`
	MacAddress  string `xml:"macAddress,omitempty"`
}

type DatastoreDiscoveredEvent struct {
	*HostEvent

	Datastore *DatastoreEventArgument `xml:"datastore,omitempty"`
}

type DrsResourceConfigureFailedEvent struct {
	*HostEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type DrsResourceConfigureSyncedEvent struct {
	*HostEvent
}

type HostGetShortNameFailedEvent struct {
	*HostEvent
}

type HostShortNameToIpFailedEvent struct {
	*HostEvent

	ShortName string `xml:"shortName,omitempty"`
}

type HostIpToShortNameFailedEvent struct {
	*HostEvent
}

type HostPrimaryAgentNotShortNameEvent struct {
	*HostDasEvent

	PrimaryAgent string `xml:"primaryAgent,omitempty"`
}

type HostNotInClusterEvent struct {
	*HostDasEvent
}

type HostIsolationIpPingFailedEvent struct {
	*HostDasEvent

	IsolationIp string `xml:"isolationIp,omitempty"`
}

type HostIpInconsistentEvent struct {
	*HostEvent

	IpAddress  string `xml:"ipAddress,omitempty"`
	IpAddress2 string `xml:"ipAddress2,omitempty"`
}

type HostUserWorldSwapNotEnabledEvent struct {
	*HostEvent
}

type HostNonCompliantEvent struct {
	*HostEvent
}

type HostCompliantEvent struct {
	*HostEvent
}

type HostComplianceCheckedEvent struct {
	*HostEvent

	Profile *ProfileEventArgument `xml:"profile,omitempty"`
}

type ClusterComplianceCheckedEvent struct {
	*ClusterEvent

	Profile *ProfileEventArgument `xml:"profile,omitempty"`
}

type ProfileEvent struct {
	*Event

	Profile *ProfileEventArgument `xml:"profile,omitempty"`
}

type ProfileCreatedEvent struct {
	*ProfileEvent
}

type ProfileRemovedEvent struct {
	*ProfileEvent
}

type ProfileAssociatedEvent struct {
	*ProfileEvent
}

type ProfileDissociatedEvent struct {
	*ProfileEvent
}

type HostConfigAppliedEvent struct {
	*HostEvent
}

type ProfileReferenceHostChangedEvent struct {
	*ProfileEvent

	ReferenceHost *ManagedObjectReference `xml:"referenceHost,omitempty"`
}

type ProfileChangedEvent struct {
	*ProfileEvent
}

type HostProfileAppliedEvent struct {
	*HostEvent

	Profile *ProfileEventArgument `xml:"profile,omitempty"`
}

type HostShortNameInconsistentEvent struct {
	*HostDasEvent

	ShortName  string `xml:"shortName,omitempty"`
	ShortName2 string `xml:"shortName2,omitempty"`
}

type HostNoRedundantManagementNetworkEvent struct {
	*HostDasEvent
}

type HostNoAvailableNetworksEvent struct {
	*HostDasEvent

	Ips string `xml:"ips,omitempty"`
}

type HostExtraNetworksEvent struct {
	*HostDasEvent

	Ips string `xml:"ips,omitempty"`
}

type HostNoHAEnabledPortGroupsEvent struct {
	*HostDasEvent
}

type HostMissingNetworksEvent struct {
	*HostDasEvent

	Ips string `xml:"ips,omitempty"`
}

type VnicPortArgument struct {
	*DynamicData

	Vnic string                                  `xml:"vnic,omitempty"`
	Port *DistributedVirtualSwitchPortConnection `xml:"port,omitempty"`
}

type ArrayOfVnicPortArgument struct {
	VnicPortArgument []*VnicPortArgument `xml:"VnicPortArgument,omitempty"`
}

type HostVnicConnectedToCustomizedDVPortEvent struct {
	*HostEvent

	Vnic *VnicPortArgument `xml:"vnic,omitempty"`
}

type GhostDvsProxySwitchDetectedEvent struct {
	*HostEvent

	SwitchUuid []string `xml:"switchUuid,omitempty"`
}

type GhostDvsProxySwitchRemovedEvent struct {
	*HostEvent

	SwitchUuid []string `xml:"switchUuid,omitempty"`
}

type VmEvent struct {
	*Event

	Template bool `xml:"template,omitempty"`
}

type VmPoweredOffEvent struct {
	*VmEvent
}

type VmPoweredOnEvent struct {
	*VmEvent
}

type VmSuspendedEvent struct {
	*VmEvent
}

type VmStartingEvent struct {
	*VmEvent
}

type VmStoppingEvent struct {
	*VmEvent
}

type VmSuspendingEvent struct {
	*VmEvent
}

type VmResumingEvent struct {
	*VmEvent
}

type VmDisconnectedEvent struct {
	*VmEvent
}

type VmRemoteConsoleConnectedEvent struct {
	*VmEvent
}

type VmRemoteConsoleDisconnectedEvent struct {
	*VmEvent
}

type VmDiscoveredEvent struct {
	*VmEvent
}

type VmOrphanedEvent struct {
	*VmEvent
}

type VmBeingCreatedEvent struct {
	*VmEvent

	ConfigSpec *VirtualMachineConfigSpec `xml:"configSpec,omitempty"`
}

type VmCreatedEvent struct {
	*VmEvent
}

type VmStartRecordingEvent struct {
	*VmEvent
}

type VmEndRecordingEvent struct {
	*VmEvent
}

type VmStartReplayingEvent struct {
	*VmEvent
}

type VmEndReplayingEvent struct {
	*VmEvent
}

type VmRegisteredEvent struct {
	*VmEvent
}

type VmAutoRenameEvent struct {
	*VmEvent

	OldName string `xml:"oldName,omitempty"`
	NewName string `xml:"newName,omitempty"`
}

type VmBeingHotMigratedEvent struct {
	*VmEvent

	DestHost       *HostEventArgument       `xml:"destHost,omitempty"`
	DestDatacenter *DatacenterEventArgument `xml:"destDatacenter,omitempty"`
	DestDatastore  *DatastoreEventArgument  `xml:"destDatastore,omitempty"`
}

type VmResettingEvent struct {
	*VmEvent
}

type VmStaticMacConflictEvent struct {
	*VmEvent

	ConflictedVm *VmEventArgument `xml:"conflictedVm,omitempty"`
	Mac          string           `xml:"mac,omitempty"`
}

type VmMacConflictEvent struct {
	*VmEvent

	ConflictedVm *VmEventArgument `xml:"conflictedVm,omitempty"`
	Mac          string           `xml:"mac,omitempty"`
}

type VmBeingDeployedEvent struct {
	*VmEvent

	SrcTemplate *VmEventArgument `xml:"srcTemplate,omitempty"`
}

type VmDeployFailedEvent struct {
	*VmEvent

	DestDatastore *EntityEventArgument  `xml:"destDatastore,omitempty"`
	Reason        *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmDeployedEvent struct {
	*VmEvent

	SrcTemplate *VmEventArgument `xml:"srcTemplate,omitempty"`
}

type VmMacChangedEvent struct {
	*VmEvent

	Adapter string `xml:"adapter,omitempty"`
	OldMac  string `xml:"oldMac,omitempty"`
	NewMac  string `xml:"newMac,omitempty"`
}

type VmMacAssignedEvent struct {
	*VmEvent

	Adapter string `xml:"adapter,omitempty"`
	Mac     string `xml:"mac,omitempty"`
}

type VmUuidConflictEvent struct {
	*VmEvent

	ConflictedVm *VmEventArgument `xml:"conflictedVm,omitempty"`
	Uuid         string           `xml:"uuid,omitempty"`
}

type VmInstanceUuidConflictEvent struct {
	*VmEvent

	ConflictedVm *VmEventArgument `xml:"conflictedVm,omitempty"`
	InstanceUuid string           `xml:"instanceUuid,omitempty"`
}

type VmBeingMigratedEvent struct {
	*VmEvent

	DestHost       *HostEventArgument       `xml:"destHost,omitempty"`
	DestDatacenter *DatacenterEventArgument `xml:"destDatacenter,omitempty"`
	DestDatastore  *DatastoreEventArgument  `xml:"destDatastore,omitempty"`
}

type VmFailedMigrateEvent struct {
	*VmEvent

	DestHost       *HostEventArgument       `xml:"destHost,omitempty"`
	Reason         *LocalizedMethodFault    `xml:"reason,omitempty"`
	DestDatacenter *DatacenterEventArgument `xml:"destDatacenter,omitempty"`
	DestDatastore  *DatastoreEventArgument  `xml:"destDatastore,omitempty"`
}

type VmMigratedEvent struct {
	*VmEvent

	SourceHost       *HostEventArgument       `xml:"sourceHost,omitempty"`
	SourceDatacenter *DatacenterEventArgument `xml:"sourceDatacenter,omitempty"`
	SourceDatastore  *DatastoreEventArgument  `xml:"sourceDatastore,omitempty"`
}

type VmUnsupportedStartingEvent struct {
	*VmStartingEvent

	GuestId string `xml:"guestId,omitempty"`
}

type DrsVmMigratedEvent struct {
	*VmMigratedEvent
}

type DrsVmPoweredOnEvent struct {
	*VmPoweredOnEvent
}

type DrsRuleViolationEvent struct {
	*VmEvent
}

type DrsRuleComplianceEvent struct {
	*VmEvent
}

type VmRelocateSpecEvent struct {
	*VmEvent
}

type VmBeingRelocatedEvent struct {
	*VmRelocateSpecEvent

	DestHost       *HostEventArgument       `xml:"destHost,omitempty"`
	DestDatacenter *DatacenterEventArgument `xml:"destDatacenter,omitempty"`
	DestDatastore  *DatastoreEventArgument  `xml:"destDatastore,omitempty"`
}

type VmRelocatedEvent struct {
	*VmRelocateSpecEvent

	SourceHost       *HostEventArgument       `xml:"sourceHost,omitempty"`
	SourceDatacenter *DatacenterEventArgument `xml:"sourceDatacenter,omitempty"`
	SourceDatastore  *DatastoreEventArgument  `xml:"sourceDatastore,omitempty"`
}

type VmRelocateFailedEvent struct {
	*VmRelocateSpecEvent

	DestHost       *HostEventArgument       `xml:"destHost,omitempty"`
	Reason         *LocalizedMethodFault    `xml:"reason,omitempty"`
	DestDatacenter *DatacenterEventArgument `xml:"destDatacenter,omitempty"`
	DestDatastore  *DatastoreEventArgument  `xml:"destDatastore,omitempty"`
}

type VmEmigratingEvent struct {
	*VmEvent
}

type VmCloneEvent struct {
	*VmEvent
}

type VmBeingClonedEvent struct {
	*VmCloneEvent

	DestFolder *FolderEventArgument `xml:"destFolder,omitempty"`
	DestName   string               `xml:"destName,omitempty"`
	DestHost   *HostEventArgument   `xml:"destHost,omitempty"`
}

type VmBeingClonedNoFolderEvent struct {
	*VmCloneEvent

	DestName string             `xml:"destName,omitempty"`
	DestHost *HostEventArgument `xml:"destHost,omitempty"`
}

type VmCloneFailedEvent struct {
	*VmCloneEvent

	DestFolder *FolderEventArgument  `xml:"destFolder,omitempty"`
	DestName   string                `xml:"destName,omitempty"`
	DestHost   *HostEventArgument    `xml:"destHost,omitempty"`
	Reason     *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmClonedEvent struct {
	*VmCloneEvent

	SourceVm *VmEventArgument `xml:"sourceVm,omitempty"`
}

type VmResourceReallocatedEvent struct {
	*VmEvent
}

type VmRenamedEvent struct {
	*VmEvent

	OldName string `xml:"oldName,omitempty"`
	NewName string `xml:"newName,omitempty"`
}

type VmDateRolledBackEvent struct {
	*VmEvent
}

type VmNoNetworkAccessEvent struct {
	*VmEvent

	DestHost *HostEventArgument `xml:"destHost,omitempty"`
}

type VmDiskFailedEvent struct {
	*VmEvent

	Disk   string                `xml:"disk,omitempty"`
	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmFailedToPowerOnEvent struct {
	*VmEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmFailedToPowerOffEvent struct {
	*VmEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmFailedToSuspendEvent struct {
	*VmEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmFailedToResetEvent struct {
	*VmEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmFailedToShutdownGuestEvent struct {
	*VmEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmFailedToRebootGuestEvent struct {
	*VmEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmFailedToStandbyGuestEvent struct {
	*VmEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmRemovedEvent struct {
	*VmEvent
}

type VmGuestShutdownEvent struct {
	*VmEvent
}

type VmGuestRebootEvent struct {
	*VmEvent
}

type VmGuestStandbyEvent struct {
	*VmEvent
}

type VmUpgradingEvent struct {
	*VmEvent

	Version string `xml:"version,omitempty"`
}

type VmUpgradeCompleteEvent struct {
	*VmEvent

	Version string `xml:"version,omitempty"`
}

type VmUpgradeFailedEvent struct {
	*VmEvent
}

type VmRestartedOnAlternateHostEvent struct {
	*VmPoweredOnEvent

	SourceHost *HostEventArgument `xml:"sourceHost,omitempty"`
}

type VmReconfiguredEvent struct {
	*VmEvent

	ConfigSpec *VirtualMachineConfigSpec `xml:"configSpec,omitempty"`
}

type VmMessageEvent struct {
	*VmEvent

	Message     string                   `xml:"message,omitempty"`
	MessageInfo []*VirtualMachineMessage `xml:"messageInfo,omitempty"`
}

type VmMessageWarningEvent struct {
	*VmEvent

	Message     string                   `xml:"message,omitempty"`
	MessageInfo []*VirtualMachineMessage `xml:"messageInfo,omitempty"`
}

type VmMessageErrorEvent struct {
	*VmEvent

	Message     string                   `xml:"message,omitempty"`
	MessageInfo []*VirtualMachineMessage `xml:"messageInfo,omitempty"`
}

type VmConfigMissingEvent struct {
	*VmEvent
}

type VmPowerOffOnIsolationEvent struct {
	*VmPoweredOffEvent

	IsolatedHost *HostEventArgument `xml:"isolatedHost,omitempty"`
}

type VmShutdownOnIsolationEvent struct {
	*VmPoweredOffEvent

	IsolatedHost   *HostEventArgument `xml:"isolatedHost,omitempty"`
	ShutdownResult string             `xml:"shutdownResult,omitempty"`
}

type VmFailoverFailed struct {
	*VmEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmDasBeingResetEvent struct {
	*VmEvent

	Reason string `xml:"reason,omitempty"`
}

type VmDasResetFailedEvent struct {
	*VmEvent
}

type VmMaxRestartCountReached struct {
	*VmEvent
}

type VmMaxFTRestartCountReached struct {
	*VmEvent
}

type VmDasBeingResetWithScreenshotEvent struct {
	*VmDasBeingResetEvent

	ScreenshotFilePath string `xml:"screenshotFilePath,omitempty"`
}

type NotEnoughResourcesToStartVmEvent struct {
	*VmEvent
}

type VmUuidAssignedEvent struct {
	*VmEvent

	Uuid string `xml:"uuid,omitempty"`
}

type VmInstanceUuidAssignedEvent struct {
	*VmEvent

	InstanceUuid string `xml:"instanceUuid,omitempty"`
}

type VmUuidChangedEvent struct {
	*VmEvent

	OldUuid string `xml:"oldUuid,omitempty"`
	NewUuid string `xml:"newUuid,omitempty"`
}

type VmInstanceUuidChangedEvent struct {
	*VmEvent

	OldInstanceUuid string `xml:"oldInstanceUuid,omitempty"`
	NewInstanceUuid string `xml:"newInstanceUuid,omitempty"`
}

type VmWwnConflictEvent struct {
	*VmEvent

	ConflictedVms   []*VmEventArgument   `xml:"conflictedVms,omitempty"`
	ConflictedHosts []*HostEventArgument `xml:"conflictedHosts,omitempty"`
	Wwn             int64                `xml:"wwn,omitempty"`
}

type VmAcquiredMksTicketEvent struct {
	*VmEvent
}

type VmAcquiredTicketEvent struct {
	*VmEvent

	TicketType string `xml:"ticketType,omitempty"`
}

type HostWwnConflictEvent struct {
	*HostEvent

	ConflictedVms   []*VmEventArgument   `xml:"conflictedVms,omitempty"`
	ConflictedHosts []*HostEventArgument `xml:"conflictedHosts,omitempty"`
	Wwn             int64                `xml:"wwn,omitempty"`
}

type VmWwnAssignedEvent struct {
	*VmEvent

	NodeWwns []int64 `xml:"nodeWwns,omitempty"`
	PortWwns []int64 `xml:"portWwns,omitempty"`
}

type VmWwnChangedEvent struct {
	*VmEvent

	OldNodeWwns []int64 `xml:"oldNodeWwns,omitempty"`
	OldPortWwns []int64 `xml:"oldPortWwns,omitempty"`
	NewNodeWwns []int64 `xml:"newNodeWwns,omitempty"`
	NewPortWwns []int64 `xml:"newPortWwns,omitempty"`
}

type VmSecondaryAddedEvent struct {
	*VmEvent
}

type VmFaultToleranceTurnedOffEvent struct {
	*VmEvent
}

type VmFaultToleranceStateChangedEvent struct {
	*VmEvent

	OldState *VirtualMachineFaultToleranceState `xml:"oldState,omitempty"`
	NewState *VirtualMachineFaultToleranceState `xml:"newState,omitempty"`
}

type VmSecondaryDisabledEvent struct {
	*VmEvent
}

type VmSecondaryDisabledBySystemEvent struct {
	*VmEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmSecondaryEnabledEvent struct {
	*VmEvent
}

type VmStartingSecondaryEvent struct {
	*VmEvent
}

type VmSecondaryStartedEvent struct {
	*VmEvent
}

type VmFailedUpdatingSecondaryConfig struct {
	*VmEvent
}

type VmFailedStartingSecondaryEvent struct {
	*VmEvent

	Reason string `xml:"reason,omitempty"`
}

type VmTimedoutStartingSecondaryEvent struct {
	*VmEvent

	Timeout int64 `xml:"timeout,omitempty"`
}

type VmNoCompatibleHostForSecondaryEvent struct {
	*VmEvent
}

type VmPrimaryFailoverEvent struct {
	*VmEvent

	Reason string `xml:"reason,omitempty"`
}

type VmFaultToleranceVmTerminatedEvent struct {
	*VmEvent

	Reason string `xml:"reason,omitempty"`
}

type HostWwnChangedEvent struct {
	*HostEvent

	OldNodeWwns []int64 `xml:"oldNodeWwns,omitempty"`
	OldPortWwns []int64 `xml:"oldPortWwns,omitempty"`
	NewNodeWwns []int64 `xml:"newNodeWwns,omitempty"`
	NewPortWwns []int64 `xml:"newPortWwns,omitempty"`
}

type HostAdminDisableEvent struct {
	*HostEvent
}

type HostAdminEnableEvent struct {
	*HostEvent
}

type HostEnableAdminFailedEvent struct {
	*HostEvent

	Permissions []*Permission `xml:"permissions,omitempty"`
}

type VmFailedRelayoutOnVmfs2DatastoreEvent struct {
	*VmEvent
}

type VmFailedRelayoutEvent struct {
	*VmEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type VmRelayoutSuccessfulEvent struct {
	*VmEvent
}

type VmRelayoutUpToDateEvent struct {
	*VmEvent
}

type VmConnectedEvent struct {
	*VmEvent
}

type VmPoweringOnWithCustomizedDVPortEvent struct {
	*VmEvent

	Vnic []*VnicPortArgument `xml:"vnic,omitempty"`
}

type VmDasUpdateErrorEvent struct {
	*VmEvent
}

type NoMaintenanceModeDrsRecommendationForVM struct {
	*VmEvent
}

type VmDasUpdateOkEvent struct {
	*VmEvent
}

type ScheduledTaskEvent struct {
	*Event

	ScheduledTask *ScheduledTaskEventArgument `xml:"scheduledTask,omitempty"`
	Entity        *ManagedEntityEventArgument `xml:"entity,omitempty"`
}

type ScheduledTaskCreatedEvent struct {
	*ScheduledTaskEvent
}

type ScheduledTaskStartedEvent struct {
	*ScheduledTaskEvent
}

type ScheduledTaskRemovedEvent struct {
	*ScheduledTaskEvent
}

type ScheduledTaskReconfiguredEvent struct {
	*ScheduledTaskEvent
}

type ScheduledTaskCompletedEvent struct {
	*ScheduledTaskEvent
}

type ScheduledTaskFailedEvent struct {
	*ScheduledTaskEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type ScheduledTaskEmailCompletedEvent struct {
	*ScheduledTaskEvent

	To string `xml:"to,omitempty"`
}

type ScheduledTaskEmailFailedEvent struct {
	*ScheduledTaskEvent

	To     string                `xml:"to,omitempty"`
	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type AlarmEvent struct {
	*Event

	Alarm *AlarmEventArgument `xml:"alarm,omitempty"`
}

type AlarmCreatedEvent struct {
	*AlarmEvent

	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
}

type AlarmStatusChangedEvent struct {
	*AlarmEvent

	Source *ManagedEntityEventArgument `xml:"source,omitempty"`
	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
	From   string                      `xml:"from,omitempty"`
	To     string                      `xml:"to,omitempty"`
}

type AlarmActionTriggeredEvent struct {
	*AlarmEvent

	Source *ManagedEntityEventArgument `xml:"source,omitempty"`
	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
}

type AlarmEmailCompletedEvent struct {
	*AlarmEvent

	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
	To     string                      `xml:"to,omitempty"`
}

type AlarmEmailFailedEvent struct {
	*AlarmEvent

	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
	To     string                      `xml:"to,omitempty"`
	Reason *LocalizedMethodFault       `xml:"reason,omitempty"`
}

type AlarmSnmpCompletedEvent struct {
	*AlarmEvent

	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
}

type AlarmSnmpFailedEvent struct {
	*AlarmEvent

	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
	Reason *LocalizedMethodFault       `xml:"reason,omitempty"`
}

type AlarmScriptCompleteEvent struct {
	*AlarmEvent

	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
	Script string                      `xml:"script,omitempty"`
}

type AlarmScriptFailedEvent struct {
	*AlarmEvent

	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
	Script string                      `xml:"script,omitempty"`
	Reason *LocalizedMethodFault       `xml:"reason,omitempty"`
}

type AlarmRemovedEvent struct {
	*AlarmEvent

	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
}

type AlarmReconfiguredEvent struct {
	*AlarmEvent

	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
}

type AlarmAcknowledgedEvent struct {
	*AlarmEvent

	Source *ManagedEntityEventArgument `xml:"source,omitempty"`
	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
}

type AlarmClearedEvent struct {
	*AlarmEvent

	Source *ManagedEntityEventArgument `xml:"source,omitempty"`
	Entity *ManagedEntityEventArgument `xml:"entity,omitempty"`
	From   string                      `xml:"from,omitempty"`
}

type CustomFieldEvent struct {
	*Event
}

type CustomFieldDefEvent struct {
	*CustomFieldEvent

	FieldKey int32  `xml:"fieldKey,omitempty"`
	Name     string `xml:"name,omitempty"`
}

type CustomFieldDefAddedEvent struct {
	*CustomFieldDefEvent
}

type CustomFieldDefRemovedEvent struct {
	*CustomFieldDefEvent
}

type CustomFieldDefRenamedEvent struct {
	*CustomFieldDefEvent

	NewName string `xml:"newName,omitempty"`
}

type CustomFieldValueChangedEvent struct {
	*CustomFieldEvent

	Entity   *ManagedEntityEventArgument `xml:"entity,omitempty"`
	FieldKey int32                       `xml:"fieldKey,omitempty"`
	Name     string                      `xml:"name,omitempty"`
	Value    string                      `xml:"value,omitempty"`
}

type AuthorizationEvent struct {
	*Event
}

type PermissionEvent struct {
	*AuthorizationEvent

	Entity    *ManagedEntityEventArgument `xml:"entity,omitempty"`
	Principal string                      `xml:"principal,omitempty"`
	Group     bool                        `xml:"group,omitempty"`
}

type PermissionAddedEvent struct {
	*PermissionEvent

	Role      *RoleEventArgument `xml:"role,omitempty"`
	Propagate bool               `xml:"propagate,omitempty"`
}

type PermissionUpdatedEvent struct {
	*PermissionEvent

	Role      *RoleEventArgument `xml:"role,omitempty"`
	Propagate bool               `xml:"propagate,omitempty"`
}

type PermissionRemovedEvent struct {
	*PermissionEvent
}

type RoleEvent struct {
	*AuthorizationEvent

	Role *RoleEventArgument `xml:"role,omitempty"`
}

type RoleAddedEvent struct {
	*RoleEvent

	PrivilegeList []string `xml:"privilegeList,omitempty"`
}

type RoleUpdatedEvent struct {
	*RoleEvent

	PrivilegeList []string `xml:"privilegeList,omitempty"`
}

type RoleRemovedEvent struct {
	*RoleEvent
}

type DatastoreEvent struct {
	*Event

	Datastore *DatastoreEventArgument `xml:"datastore,omitempty"`
}

type DatastoreDestroyedEvent struct {
	*DatastoreEvent
}

type DatastoreRenamedEvent struct {
	*DatastoreEvent

	OldName string `xml:"oldName,omitempty"`
	NewName string `xml:"newName,omitempty"`
}

type DatastoreCapacityIncreasedEvent struct {
	*DatastoreEvent

	OldCapacity int64 `xml:"oldCapacity,omitempty"`
	NewCapacity int64 `xml:"newCapacity,omitempty"`
}

type DatastoreDuplicatedEvent struct {
	*DatastoreEvent
}

type DatastoreFileEvent struct {
	*DatastoreEvent

	TargetFile string `xml:"targetFile,omitempty"`
}

type DatastoreFileCopiedEvent struct {
	*DatastoreFileEvent

	SourceDatastore *DatastoreEventArgument `xml:"sourceDatastore,omitempty"`
	SourceFile      string                  `xml:"sourceFile,omitempty"`
}

type DatastoreFileMovedEvent struct {
	*DatastoreFileEvent

	SourceDatastore *DatastoreEventArgument `xml:"sourceDatastore,omitempty"`
	SourceFile      string                  `xml:"sourceFile,omitempty"`
}

type DatastoreFileDeletedEvent struct {
	*DatastoreFileEvent
}

type NonVIWorkloadDetectedOnDatastoreEvent struct {
	*DatastoreEvent
}

type DatastoreIORMReconfiguredEvent struct {
	*DatastoreEvent
}

type TaskEvent struct {
	*Event

	Info *TaskInfo `xml:"info,omitempty"`
}

type TaskTimeoutEvent struct {
	*TaskEvent
}

type LicenseEvent struct {
	*Event
}

type ServerLicenseExpiredEvent struct {
	*LicenseEvent

	Product string `xml:"product,omitempty"`
}

type HostLicenseExpiredEvent struct {
	*LicenseEvent
}

type VMotionLicenseExpiredEvent struct {
	*LicenseEvent
}

type NoLicenseEvent struct {
	*LicenseEvent

	Feature *LicenseFeatureInfo `xml:"feature,omitempty"`
}

type LicenseServerUnavailableEvent struct {
	*LicenseEvent

	LicenseServer string `xml:"licenseServer,omitempty"`
}

type LicenseServerAvailableEvent struct {
	*LicenseEvent

	LicenseServer string `xml:"licenseServer,omitempty"`
}

type LicenseExpiredEvent struct {
	*Event

	Feature *LicenseFeatureInfo `xml:"feature,omitempty"`
}

type InvalidEditionEvent struct {
	*LicenseEvent

	Feature string `xml:"feature,omitempty"`
}

type HostInventoryFullEvent struct {
	*LicenseEvent

	Capacity int32 `xml:"capacity,omitempty"`
}

type LicenseRestrictedEvent struct {
	*LicenseEvent
}

type IncorrectHostInformationEvent struct {
	*LicenseEvent
}

type UnlicensedVirtualMachinesEvent struct {
	*LicenseEvent

	Unlicensed int32 `xml:"unlicensed,omitempty"`
	Available  int32 `xml:"available,omitempty"`
}

type UnlicensedVirtualMachinesFoundEvent struct {
	*LicenseEvent

	Available int32 `xml:"available,omitempty"`
}

type AllVirtualMachinesLicensedEvent struct {
	*LicenseEvent
}

type LicenseNonComplianceEvent struct {
	*LicenseEvent

	Url string `xml:"url,omitempty"`
}

type MigrationEvent struct {
	*VmEvent

	Fault *LocalizedMethodFault `xml:"fault,omitempty"`
}

type MigrationWarningEvent struct {
	*MigrationEvent
}

type MigrationErrorEvent struct {
	*MigrationEvent
}

type MigrationHostWarningEvent struct {
	*MigrationEvent

	DstHost *HostEventArgument `xml:"dstHost,omitempty"`
}

type MigrationHostErrorEvent struct {
	*MigrationEvent

	DstHost *HostEventArgument `xml:"dstHost,omitempty"`
}

type MigrationResourceWarningEvent struct {
	*MigrationEvent

	DstPool *ResourcePoolEventArgument `xml:"dstPool,omitempty"`
	DstHost *HostEventArgument         `xml:"dstHost,omitempty"`
}

type MigrationResourceErrorEvent struct {
	*MigrationEvent

	DstPool *ResourcePoolEventArgument `xml:"dstPool,omitempty"`
	DstHost *HostEventArgument         `xml:"dstHost,omitempty"`
}

type ClusterEvent struct {
	*Event
}

type DasEnabledEvent struct {
	*ClusterEvent
}

type DasDisabledEvent struct {
	*ClusterEvent
}

type DasAdmissionControlDisabledEvent struct {
	*ClusterEvent
}

type DasAdmissionControlEnabledEvent struct {
	*ClusterEvent
}

type DasHostFailedEvent struct {
	*ClusterEvent

	FailedHost *HostEventArgument `xml:"failedHost,omitempty"`
}

type DasHostIsolatedEvent struct {
	*ClusterEvent

	IsolatedHost *HostEventArgument `xml:"isolatedHost,omitempty"`
}

type DasClusterIsolatedEvent struct {
	*ClusterEvent
}

type DasAgentUnavailableEvent struct {
	*ClusterEvent
}

type DasAgentFoundEvent struct {
	*ClusterEvent
}

type InsufficientFailoverResourcesEvent struct {
	*ClusterEvent
}

type FailoverLevelRestored struct {
	*ClusterEvent
}

type ClusterOvercommittedEvent struct {
	*ClusterEvent
}

type HostOvercommittedEvent struct {
	*ClusterOvercommittedEvent
}

type ClusterStatusChangedEvent struct {
	*ClusterEvent

	OldStatus string `xml:"oldStatus,omitempty"`
	NewStatus string `xml:"newStatus,omitempty"`
}

type HostStatusChangedEvent struct {
	*ClusterStatusChangedEvent
}

type ClusterCreatedEvent struct {
	*ClusterEvent

	Parent *FolderEventArgument `xml:"parent,omitempty"`
}

type ClusterDestroyedEvent struct {
	*ClusterEvent
}

type DrsEnabledEvent struct {
	*ClusterEvent

	Behavior string `xml:"behavior,omitempty"`
}

type DrsDisabledEvent struct {
	*ClusterEvent
}

type ClusterReconfiguredEvent struct {
	*ClusterEvent
}

type HostMonitoringStateChangedEvent struct {
	*ClusterEvent

	State string `xml:"state,omitempty"`
}

type VmHealthMonitoringStateChangedEvent struct {
	*ClusterEvent

	State string `xml:"state,omitempty"`
}

type ResourcePoolEvent struct {
	*Event

	ResourcePool *ResourcePoolEventArgument `xml:"resourcePool,omitempty"`
}

type ResourcePoolCreatedEvent struct {
	*ResourcePoolEvent

	Parent *ResourcePoolEventArgument `xml:"parent,omitempty"`
}

type ResourcePoolDestroyedEvent struct {
	*ResourcePoolEvent
}

type ResourcePoolMovedEvent struct {
	*ResourcePoolEvent

	OldParent *ResourcePoolEventArgument `xml:"oldParent,omitempty"`
	NewParent *ResourcePoolEventArgument `xml:"newParent,omitempty"`
}

type ResourcePoolReconfiguredEvent struct {
	*ResourcePoolEvent
}

type ResourceViolatedEvent struct {
	*ResourcePoolEvent
}

type VmResourcePoolMovedEvent struct {
	*VmEvent

	OldParent *ResourcePoolEventArgument `xml:"oldParent,omitempty"`
	NewParent *ResourcePoolEventArgument `xml:"newParent,omitempty"`
}

type TemplateUpgradeEvent struct {
	*Event

	LegacyTemplate string `xml:"legacyTemplate,omitempty"`
}

type TemplateBeingUpgradedEvent struct {
	*TemplateUpgradeEvent
}

type TemplateUpgradeFailedEvent struct {
	*TemplateUpgradeEvent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type TemplateUpgradedEvent struct {
	*TemplateUpgradeEvent
}

type CustomizationEvent struct {
	*VmEvent

	LogLocation string `xml:"logLocation,omitempty"`
}

type CustomizationStartedEvent struct {
	*CustomizationEvent
}

type CustomizationSucceeded struct {
	*CustomizationEvent
}

type CustomizationFailed struct {
	*CustomizationEvent
}

type CustomizationUnknownFailure struct {
	*CustomizationFailed
}

type CustomizationSysprepFailed struct {
	*CustomizationFailed

	SysprepVersion string `xml:"sysprepVersion,omitempty"`
	SystemVersion  string `xml:"systemVersion,omitempty"`
}

type CustomizationLinuxIdentityFailed struct {
	*CustomizationFailed
}

type CustomizationNetworkSetupFailed struct {
	*CustomizationFailed
}

type LockerMisconfiguredEvent struct {
	*Event

	Datastore *DatastoreEventArgument `xml:"datastore,omitempty"`
}

type LockerReconfiguredEvent struct {
	*Event

	OldDatastore *DatastoreEventArgument `xml:"oldDatastore,omitempty"`
	NewDatastore *DatastoreEventArgument `xml:"newDatastore,omitempty"`
}

type NoDatastoresConfiguredEvent struct {
	*HostEvent
}

type AdminPasswordNotChangedEvent struct {
	*HostEvent
}

type HostInAuditModeEvent struct {
	*HostEvent
}

type LocalTSMEnabledEvent struct {
	*HostEvent
}

type RemoteTSMEnabledEvent struct {
	*HostEvent
}

type VimAccountPasswordChangedEvent struct {
	*HostEvent
}

type IScsiBootFailureEvent struct {
	*HostEvent
}

type DvsHealthStatusChangeEvent struct {
	*HostEvent

	SwitchUuid   string                       `xml:"switchUuid,omitempty"`
	HealthResult *HostMemberHealthCheckResult `xml:"healthResult,omitempty"`
}

type NetworkRollbackEvent struct {
	*Event

	MethodName    string `xml:"methodName,omitempty"`
	TransactionId string `xml:"transactionId,omitempty"`
}

type UplinkPortVlanTrunkedEvent struct {
	*DvsHealthStatusChangeEvent
}

type UplinkPortVlanUntrunkedEvent struct {
	*DvsHealthStatusChangeEvent
}

type MtuMatchEvent struct {
	*DvsHealthStatusChangeEvent
}

type MtuMismatchEvent struct {
	*DvsHealthStatusChangeEvent
}

type UplinkPortMtuNotSupportEvent struct {
	*DvsHealthStatusChangeEvent
}

type UplinkPortMtuSupportEvent struct {
	*DvsHealthStatusChangeEvent
}

type TeamingMatchEvent struct {
	*DvsHealthStatusChangeEvent
}

type TeamingMisMatchEvent struct {
	*DvsHealthStatusChangeEvent
}

type DvsEvent struct {
	*Event
}

type DvsCreatedEvent struct {
	*DvsEvent

	Parent *FolderEventArgument `xml:"parent,omitempty"`
}

type DvsRenamedEvent struct {
	*DvsEvent

	OldName string `xml:"oldName,omitempty"`
	NewName string `xml:"newName,omitempty"`
}

type DvsReconfiguredEvent struct {
	*DvsEvent

	ConfigSpec *DVSConfigSpec `xml:"configSpec,omitempty"`
}

type DvsUpgradeAvailableEvent struct {
	*DvsEvent

	ProductInfo *DistributedVirtualSwitchProductSpec `xml:"productInfo,omitempty"`
}

type DvsUpgradeInProgressEvent struct {
	*DvsEvent

	ProductInfo *DistributedVirtualSwitchProductSpec `xml:"productInfo,omitempty"`
}

type DvsUpgradeRejectedEvent struct {
	*DvsEvent

	ProductInfo *DistributedVirtualSwitchProductSpec `xml:"productInfo,omitempty"`
}

type DvsUpgradedEvent struct {
	*DvsEvent

	ProductInfo *DistributedVirtualSwitchProductSpec `xml:"productInfo,omitempty"`
}

type DvsHostJoinedEvent struct {
	*DvsEvent

	HostJoined *HostEventArgument `xml:"hostJoined,omitempty"`
}

type DvsHostLeftEvent struct {
	*DvsEvent

	HostLeft *HostEventArgument `xml:"hostLeft,omitempty"`
}

type DvsOutOfSyncHostArgument struct {
	*DynamicData

	OutOfSyncHost   *HostEventArgument `xml:"outOfSyncHost,omitempty"`
	ConfigParamters []string           `xml:"configParamters,omitempty"`
}

type ArrayOfDvsOutOfSyncHostArgument struct {
	DvsOutOfSyncHostArgument []*DvsOutOfSyncHostArgument `xml:"DvsOutOfSyncHostArgument,omitempty"`
}

type OutOfSyncDvsHost struct {
	*DvsEvent

	HostOutOfSync []*DvsOutOfSyncHostArgument `xml:"hostOutOfSync,omitempty"`
}

type DvsHostWentOutOfSyncEvent struct {
	*DvsEvent

	HostOutOfSync *DvsOutOfSyncHostArgument `xml:"hostOutOfSync,omitempty"`
}

type DvsHostBackInSyncEvent struct {
	*DvsEvent

	HostBackInSync *HostEventArgument `xml:"hostBackInSync,omitempty"`
}

type DvsHostStatusUpdated struct {
	*DvsEvent

	HostMember      *HostEventArgument `xml:"hostMember,omitempty"`
	OldStatus       string             `xml:"oldStatus,omitempty"`
	NewStatus       string             `xml:"newStatus,omitempty"`
	OldStatusDetail string             `xml:"oldStatusDetail,omitempty"`
	NewStatusDetail string             `xml:"newStatusDetail,omitempty"`
}

type DvsPortCreatedEvent struct {
	*DvsEvent

	PortKey []string `xml:"portKey,omitempty"`
}

type DvsPortReconfiguredEvent struct {
	*DvsEvent

	PortKey []string `xml:"portKey,omitempty"`
}

type DvsPortDeletedEvent struct {
	*DvsEvent

	PortKey []string `xml:"portKey,omitempty"`
}

type DvsPortConnectedEvent struct {
	*DvsEvent

	PortKey   string                                 `xml:"portKey,omitempty"`
	Connectee *DistributedVirtualSwitchPortConnectee `xml:"connectee,omitempty"`
}

type DvsPortDisconnectedEvent struct {
	*DvsEvent

	PortKey   string                                 `xml:"portKey,omitempty"`
	Connectee *DistributedVirtualSwitchPortConnectee `xml:"connectee,omitempty"`
}

type DvsPortVendorSpecificStateChangeEvent struct {
	*DvsEvent

	PortKey string `xml:"portKey,omitempty"`
}

type DvsPortRuntimeChangeEvent struct {
	*DvsEvent

	PortKey     string        `xml:"portKey,omitempty"`
	RuntimeInfo *DVPortStatus `xml:"runtimeInfo,omitempty"`
}

type DvsPortLinkUpEvent struct {
	*DvsEvent

	PortKey     string        `xml:"portKey,omitempty"`
	RuntimeInfo *DVPortStatus `xml:"runtimeInfo,omitempty"`
}

type DvsPortLinkDownEvent struct {
	*DvsEvent

	PortKey     string        `xml:"portKey,omitempty"`
	RuntimeInfo *DVPortStatus `xml:"runtimeInfo,omitempty"`
}

type DvsPortJoinPortgroupEvent struct {
	*DvsEvent

	PortKey       string `xml:"portKey,omitempty"`
	PortgroupKey  string `xml:"portgroupKey,omitempty"`
	PortgroupName string `xml:"portgroupName,omitempty"`
}

type DvsPortLeavePortgroupEvent struct {
	*DvsEvent

	PortKey       string `xml:"portKey,omitempty"`
	PortgroupKey  string `xml:"portgroupKey,omitempty"`
	PortgroupName string `xml:"portgroupName,omitempty"`
}

type DvsPortBlockedEvent struct {
	*DvsEvent

	PortKey      string        `xml:"portKey,omitempty"`
	StatusDetail string        `xml:"statusDetail,omitempty"`
	RuntimeInfo  *DVPortStatus `xml:"runtimeInfo,omitempty"`
}

type DvsPortUnblockedEvent struct {
	*DvsEvent

	PortKey     string        `xml:"portKey,omitempty"`
	RuntimeInfo *DVPortStatus `xml:"runtimeInfo,omitempty"`
}

type DvsPortEnteredPassthruEvent struct {
	*DvsEvent

	PortKey     string        `xml:"portKey,omitempty"`
	RuntimeInfo *DVPortStatus `xml:"runtimeInfo,omitempty"`
}

type DvsPortExitedPassthruEvent struct {
	*DvsEvent

	PortKey     string        `xml:"portKey,omitempty"`
	RuntimeInfo *DVPortStatus `xml:"runtimeInfo,omitempty"`
}

type DvsDestroyedEvent struct {
	*DvsEvent
}

type DvsMergedEvent struct {
	*DvsEvent

	SourceDvs      *DvsEventArgument `xml:"sourceDvs,omitempty"`
	DestinationDvs *DvsEventArgument `xml:"destinationDvs,omitempty"`
}

type HostLocalPortCreatedEvent struct {
	*DvsEvent

	HostLocalPort *DVSHostLocalPortInfo `xml:"hostLocalPort,omitempty"`
}

type RollbackEvent struct {
	*DvsEvent

	HostName   string `xml:"hostName,omitempty"`
	MethodName string `xml:"methodName,omitempty"`
}

type RecoveryEvent struct {
	*DvsEvent

	HostName string `xml:"hostName,omitempty"`
	PortKey  string `xml:"portKey,omitempty"`
	DvsUuid  string `xml:"dvsUuid,omitempty"`
	Vnic     string `xml:"vnic,omitempty"`
}

type DvsImportEvent struct {
	*DvsEvent

	ImportType string `xml:"importType,omitempty"`
}

type DvsRestoreEvent struct {
	*DvsEvent
}

type DVPortgroupEvent struct {
	*Event
}

type DVPortgroupCreatedEvent struct {
	*DVPortgroupEvent
}

type DVPortgroupRenamedEvent struct {
	*DVPortgroupEvent

	OldName string `xml:"oldName,omitempty"`
	NewName string `xml:"newName,omitempty"`
}

type DVPortgroupReconfiguredEvent struct {
	*DVPortgroupEvent

	ConfigSpec *DVPortgroupConfigSpec `xml:"configSpec,omitempty"`
}

type DVPortgroupDestroyedEvent struct {
	*DVPortgroupEvent
}

type DvpgImportEvent struct {
	*DVPortgroupEvent

	ImportType string `xml:"importType,omitempty"`
}

type DvpgRestoreEvent struct {
	*DVPortgroupEvent
}

type DrsInvocationFailedEvent struct {
	*ClusterEvent
}

type DrsRecoveredFromFailureEvent struct {
	*ClusterEvent
}

type VmReloadFromPathEvent struct {
	*VmEvent

	ConfigPath string `xml:"configPath,omitempty"`
}

type VmReloadFromPathFailedEvent struct {
	*VmEvent

	ConfigPath string `xml:"configPath,omitempty"`
}

type VmRequirementsExceedCurrentEVCModeEvent struct {
	*VmEvent
}

type EventArgument struct {
	*DynamicData
}

type RoleEventArgument struct {
	*EventArgument

	RoleId int32  `xml:"roleId,omitempty"`
	Name   string `xml:"name,omitempty"`
}

type EntityEventArgument struct {
	*EventArgument

	Name string `xml:"name,omitempty"`
}

type ManagedEntityEventArgument struct {
	*EntityEventArgument

	Entity *ManagedObjectReference `xml:"entity,omitempty"`
}

type FolderEventArgument struct {
	*EntityEventArgument

	Folder *ManagedObjectReference `xml:"folder,omitempty"`
}

type DatacenterEventArgument struct {
	*EntityEventArgument

	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
}

type ComputeResourceEventArgument struct {
	*EntityEventArgument

	ComputeResource *ManagedObjectReference `xml:"computeResource,omitempty"`
}

type ResourcePoolEventArgument struct {
	*EntityEventArgument

	ResourcePool *ManagedObjectReference `xml:"resourcePool,omitempty"`
}

type HostEventArgument struct {
	*EntityEventArgument

	Host *ManagedObjectReference `xml:"host,omitempty"`
}

type ArrayOfHostEventArgument struct {
	HostEventArgument []*HostEventArgument `xml:"HostEventArgument,omitempty"`
}

type VmEventArgument struct {
	*EntityEventArgument

	Vm *ManagedObjectReference `xml:"vm,omitempty"`
}

type ArrayOfVmEventArgument struct {
	VmEventArgument []*VmEventArgument `xml:"VmEventArgument,omitempty"`
}

type DatastoreEventArgument struct {
	*EntityEventArgument

	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
}

type NetworkEventArgument struct {
	*EntityEventArgument

	Network *ManagedObjectReference `xml:"network,omitempty"`
}

type AlarmEventArgument struct {
	*EntityEventArgument

	Alarm *ManagedObjectReference `xml:"alarm,omitempty"`
}

type ScheduledTaskEventArgument struct {
	*EntityEventArgument

	ScheduledTask *ManagedObjectReference `xml:"scheduledTask,omitempty"`
}

type ProfileEventArgument struct {
	*EventArgument

	Profile *ManagedObjectReference `xml:"profile,omitempty"`
	Name    string                  `xml:"name,omitempty"`
}

type DvsEventArgument struct {
	*EntityEventArgument

	Dvs *ManagedObjectReference `xml:"dvs,omitempty"`
}

type EventArgDesc struct {
	*DynamicData

	Name        string              `xml:"name,omitempty"`
	Type_       string              `xml:"type,omitempty"`
	Description *ElementDescription `xml:"description,omitempty"`
}

type ArrayOfEventArgDesc struct {
	EventArgDesc []*EventArgDesc `xml:"EventArgDesc,omitempty"`
}

type EventDescriptionEventDetail struct {
	*DynamicData

	Key                     string `xml:"key,omitempty"`
	Description             string `xml:"description,omitempty"`
	Category                string `xml:"category,omitempty"`
	FormatOnDatacenter      string `xml:"formatOnDatacenter,omitempty"`
	FormatOnComputeResource string `xml:"formatOnComputeResource,omitempty"`
	FormatOnHost            string `xml:"formatOnHost,omitempty"`
	FormatOnVm              string `xml:"formatOnVm,omitempty"`
	FullFormat              string `xml:"fullFormat,omitempty"`
	LongDescription         string `xml:"longDescription,omitempty"`
}

type ArrayOfEventDescriptionEventDetail struct {
	EventDescriptionEventDetail []*EventDescriptionEventDetail `xml:"EventDescriptionEventDetail,omitempty"`
}

type EventDescription struct {
	*DynamicData

	Category        []*ElementDescription          `xml:"category,omitempty"`
	EventInfo       []*EventDescriptionEventDetail `xml:"eventInfo,omitempty"`
	EnumeratedTypes []*EnumDescription             `xml:"enumeratedTypes,omitempty"`
}

type EventEx struct {
	*Event

	EventTypeId string                `xml:"eventTypeId,omitempty"`
	Severity    string                `xml:"severity,omitempty"`
	Message     string                `xml:"message,omitempty"`
	Arguments   []*KeyAnyValue        `xml:"arguments,omitempty"`
	ObjectId    string                `xml:"objectId,omitempty"`
	ObjectType  string                `xml:"objectType,omitempty"`
	ObjectName  string                `xml:"objectName,omitempty"`
	Fault       *LocalizedMethodFault `xml:"fault,omitempty"`
}

type EventFilterSpecByEntity struct {
	*DynamicData

	Entity    *ManagedObjectReference         `xml:"entity,omitempty"`
	Recursion *EventFilterSpecRecursionOption `xml:"recursion,omitempty"`
}

type EventFilterSpecByTime struct {
	*DynamicData

	BeginTime time.Time `xml:"beginTime,omitempty"`
	EndTime   time.Time `xml:"endTime,omitempty"`
}

type EventFilterSpecByUsername struct {
	*DynamicData

	SystemUser bool     `xml:"systemUser,omitempty"`
	UserList   []string `xml:"userList,omitempty"`
}

type EventFilterSpec struct {
	*DynamicData

	Entity             *EventFilterSpecByEntity   `xml:"entity,omitempty"`
	Time               *EventFilterSpecByTime     `xml:"time,omitempty"`
	UserName           *EventFilterSpecByUsername `xml:"userName,omitempty"`
	EventChainId       int32                      `xml:"eventChainId,omitempty"`
	Alarm              *ManagedObjectReference    `xml:"alarm,omitempty"`
	ScheduledTask      *ManagedObjectReference    `xml:"scheduledTask,omitempty"`
	DisableFullMessage bool                       `xml:"disableFullMessage,omitempty"`
	Category           []string                   `xml:"category,omitempty"`
	Type_              []string                   `xml:"type,omitempty"`
	Tag                []string                   `xml:"tag,omitempty"`
	EventTypeId        []string                   `xml:"eventTypeId,omitempty"`
}

type ExtExtendedProductInfo struct {
	*DynamicData

	CompanyUrl    string                  `xml:"companyUrl,omitempty"`
	ProductUrl    string                  `xml:"productUrl,omitempty"`
	ManagementUrl string                  `xml:"managementUrl,omitempty"`
	Self          *ManagedObjectReference `xml:"self,omitempty"`
}

type ManagedByInfo struct {
	*DynamicData

	ExtensionKey string `xml:"extensionKey,omitempty"`
	Type_        string `xml:"type,omitempty"`
}

type ExtManagedEntityInfo struct {
	*DynamicData

	Type_        string `xml:"type,omitempty"`
	SmallIconUrl string `xml:"smallIconUrl,omitempty"`
	IconUrl      string `xml:"iconUrl,omitempty"`
	Description  string `xml:"description,omitempty"`
}

type ArrayOfExtManagedEntityInfo struct {
	ExtManagedEntityInfo []*ExtManagedEntityInfo `xml:"ExtManagedEntityInfo,omitempty"`
}

type ExtSolutionManagerInfoTabInfo struct {
	*DynamicData

	Label string `xml:"label,omitempty"`
	Url   string `xml:"url,omitempty"`
}

type ArrayOfExtSolutionManagerInfoTabInfo struct {
	ExtSolutionManagerInfoTabInfo []*ExtSolutionManagerInfoTabInfo `xml:"ExtSolutionManagerInfoTabInfo,omitempty"`
}

type ExtSolutionManagerInfo struct {
	*DynamicData

	Tab          []*ExtSolutionManagerInfoTabInfo `xml:"tab,omitempty"`
	SmallIconUrl string                           `xml:"smallIconUrl,omitempty"`
}

type ActiveDirectoryFault struct {
	*VimFault

	ErrorCode int32 `xml:"errorCode,omitempty"`
}

type AdminDisabled struct {
	*HostConfigFault
}

type AdminNotDisabled struct {
	*HostConfigFault
}

type AffinityConfigured struct {
	*MigrationFault

	ConfiguredAffinity []string `xml:"configuredAffinity,omitempty"`
}

type AgentInstallFailed struct {
	*HostConnectFault

	Reason          string `xml:"reason,omitempty"`
	StatusCode      int32  `xml:"statusCode,omitempty"`
	InstallerOutput string `xml:"installerOutput,omitempty"`
}

type AlreadyBeingManaged struct {
	*HostConnectFault

	IpAddress string `xml:"ipAddress,omitempty"`
}

type AlreadyConnected struct {
	*HostConnectFault

	Name string `xml:"name,omitempty"`
}

type AlreadyExists struct {
	*VimFault

	Name string `xml:"name,omitempty"`
}

type AlreadyUpgraded struct {
	*VimFault
}

type AnswerFileUpdateFailure struct {
	*DynamicData

	UserInputPath *ProfilePropertyPath `xml:"userInputPath,omitempty"`
	ErrMsg        *LocalizableMessage  `xml:"errMsg,omitempty"`
}

type ArrayOfAnswerFileUpdateFailure struct {
	AnswerFileUpdateFailure []*AnswerFileUpdateFailure `xml:"AnswerFileUpdateFailure,omitempty"`
}

type AnswerFileUpdateFailed struct {
	*VimFault

	Failure []*AnswerFileUpdateFailure `xml:"failure,omitempty"`
}

type ApplicationQuiesceFault struct {
	*SnapshotFault
}

type AuthMinimumAdminPermission struct {
	*VimFault
}

type BackupBlobReadFailure struct {
	*DvsFault

	EntityName string                `xml:"entityName,omitempty"`
	EntityType string                `xml:"entityType,omitempty"`
	Fault      *LocalizedMethodFault `xml:"fault,omitempty"`
}

type BackupBlobWriteFailure struct {
	*DvsFault

	EntityName string                `xml:"entityName,omitempty"`
	EntityType string                `xml:"entityType,omitempty"`
	Fault      *LocalizedMethodFault `xml:"fault,omitempty"`
}

type BlockedByFirewall struct {
	*HostConfigFault
}

type CAMServerRefusedConnection struct {
	*InvalidCAMServer
}

type CannotAccessFile struct {
	*FileFault
}

type CannotAccessLocalSource struct {
	*VimFault
}

type CannotAccessNetwork struct {
	*CannotAccessVmDevice
}

type CannotAccessVmComponent struct {
	*VmConfigFault
}

type CannotAccessVmConfig struct {
	*CannotAccessVmComponent

	Reason *LocalizedMethodFault `xml:"reason,omitempty"`
}

type CannotAccessVmDevice struct {
	*CannotAccessVmComponent

	Device    string `xml:"device,omitempty"`
	Backing   string `xml:"backing,omitempty"`
	Connected bool   `xml:"connected,omitempty"`
}

type CannotAccessVmDisk struct {
	*CannotAccessVmDevice

	Fault *LocalizedMethodFault `xml:"fault,omitempty"`
}

type CannotAddHostWithFTVmAsStandalone struct {
	*HostConnectFault
}

type CannotAddHostWithFTVmToDifferentCluster struct {
	*HostConnectFault
}

type CannotAddHostWithFTVmToNonHACluster struct {
	*HostConnectFault
}

type CannotChangeDrsBehaviorForFtSecondary struct {
	*VmFaultToleranceIssue

	Vm     *ManagedObjectReference `xml:"vm,omitempty"`
	VmName string                  `xml:"vmName,omitempty"`
}

type CannotChangeHaSettingsForFtSecondary struct {
	*VmFaultToleranceIssue

	Vm     *ManagedObjectReference `xml:"vm,omitempty"`
	VmName string                  `xml:"vmName,omitempty"`
}

type CannotChangeVsanClusterUuid struct {
	*VsanFault
}

type CannotChangeVsanNodeUuid struct {
	*VsanFault
}

type CannotCreateFile struct {
	*FileFault
}

type CannotDecryptPasswords struct {
	*CustomizationFault
}

type CannotDeleteFile struct {
	*FileFault
}

type CannotDisableDrsOnClustersWithVApps struct {
	*RuntimeFault
}

type CannotDisableSnapshot struct {
	*VmConfigFault
}

type CannotDisconnectHostWithFaultToleranceVm struct {
	*VimFault

	HostName string `xml:"hostName,omitempty"`
}

type CannotModifyConfigCpuRequirements struct {
	*MigrationFault
}

type CannotMoveFaultToleranceVm struct {
	*VimFault

	MoveType string `xml:"moveType,omitempty"`
	VmName   string `xml:"vmName,omitempty"`
}

type CannotMoveHostWithFaultToleranceVm struct {
	*VimFault
}

type CannotMoveVmWithDeltaDisk struct {
	*MigrationFault

	Device string `xml:"device,omitempty"`
}

type CannotMoveVmWithNativeDeltaDisk struct {
	*MigrationFault
}

type CannotMoveVsanEnabledHost struct {
	*VsanFault
}

type CannotPlaceWithoutPrerequisiteMoves struct {
	*VimFault
}

type CannotPowerOffVmInCluster struct {
	*InvalidState

	Operation string                  `xml:"operation,omitempty"`
	Vm        *ManagedObjectReference `xml:"vm,omitempty"`
	VmName    string                  `xml:"vmName,omitempty"`
}

type CannotReconfigureVsanWhenHaEnabled struct {
	*VsanFault
}

type CannotUseNetwork struct {
	*VmConfigFault

	Device    string `xml:"device,omitempty"`
	Backing   string `xml:"backing,omitempty"`
	Connected bool   `xml:"connected,omitempty"`
	Reason    string `xml:"reason,omitempty"`
}

type ClockSkew struct {
	*HostConfigFault
}

type CloneFromSnapshotNotSupported struct {
	*MigrationFault
}

type CollectorAddressUnset struct {
	*DvsFault
}

type ConcurrentAccess struct {
	*VimFault
}

type ConflictingConfigurationConfig struct {
	*DynamicData

	Entity       *ManagedObjectReference `xml:"entity,omitempty"`
	PropertyPath string                  `xml:"propertyPath,omitempty"`
}

type ArrayOfConflictingConfigurationConfig struct {
	ConflictingConfigurationConfig []*ConflictingConfigurationConfig `xml:"ConflictingConfigurationConfig,omitempty"`
}

type ConflictingConfiguration struct {
	*DvsFault

	ConfigInConflict []*ConflictingConfigurationConfig `xml:"configInConflict,omitempty"`
}

type ConflictingDatastoreFound struct {
	*RuntimeFault

	Name string `xml:"name,omitempty"`
	Url  string `xml:"url,omitempty"`
}

type ConnectedIso struct {
	*OvfExport

	Cdrom    *VirtualCdrom `xml:"cdrom,omitempty"`
	Filename string        `xml:"filename,omitempty"`
}

type CpuCompatibilityUnknown struct {
	*CpuIncompatible
}

type CpuHotPlugNotSupported struct {
	*VmConfigFault
}

type CpuIncompatible struct {
	*VirtualHardwareCompatibilityIssue

	Level        int32                   `xml:"level,omitempty"`
	RegisterName string                  `xml:"registerName,omitempty"`
	RegisterBits string                  `xml:"registerBits,omitempty"`
	DesiredBits  string                  `xml:"desiredBits,omitempty"`
	Host         *ManagedObjectReference `xml:"host,omitempty"`
}

type CpuIncompatible1ECX struct {
	*CpuIncompatible

	Sse3      bool `xml:"sse3,omitempty"`
	Pclmulqdq bool `xml:"pclmulqdq,omitempty"`
	Ssse3     bool `xml:"ssse3,omitempty"`
	Sse41     bool `xml:"sse41,omitempty"`
	Sse42     bool `xml:"sse42,omitempty"`
	Aes       bool `xml:"aes,omitempty"`
	Other     bool `xml:"other,omitempty"`
	OtherOnly bool `xml:"otherOnly,omitempty"`
}

type CpuIncompatible81EDX struct {
	*CpuIncompatible

	Nx        bool `xml:"nx,omitempty"`
	Ffxsr     bool `xml:"ffxsr,omitempty"`
	Rdtscp    bool `xml:"rdtscp,omitempty"`
	Lm        bool `xml:"lm,omitempty"`
	Other     bool `xml:"other,omitempty"`
	OtherOnly bool `xml:"otherOnly,omitempty"`
}

type CustomizationFault struct {
	*VimFault
}

type CustomizationPending struct {
	*CustomizationFault
}

type DVPortNotSupported struct {
	*DeviceBackingNotSupported
}

type DasConfigFault struct {
	*VimFault

	Reason string   `xml:"reason,omitempty"`
	Output string   `xml:"output,omitempty"`
	Event  []*Event `xml:"event,omitempty"`
}

type DatabaseError struct {
	*RuntimeFault
}

type DatacenterMismatchArgument struct {
	*DynamicData

	Entity          *ManagedObjectReference `xml:"entity,omitempty"`
	InputDatacenter *ManagedObjectReference `xml:"inputDatacenter,omitempty"`
}

type ArrayOfDatacenterMismatchArgument struct {
	DatacenterMismatchArgument []*DatacenterMismatchArgument `xml:"DatacenterMismatchArgument,omitempty"`
}

type DatacenterMismatch struct {
	*MigrationFault

	InvalidArgument    []*DatacenterMismatchArgument `xml:"invalidArgument,omitempty"`
	ExpectedDatacenter *ManagedObjectReference       `xml:"expectedDatacenter,omitempty"`
}

type DatastoreNotWritableOnHost struct {
	*InvalidDatastore

	Host *ManagedObjectReference `xml:"host,omitempty"`
}

type DeltaDiskFormatNotSupported struct {
	*VmConfigFault

	Datastore       []*ManagedObjectReference `xml:"datastore,omitempty"`
	DeltaDiskFormat string                    `xml:"deltaDiskFormat,omitempty"`
}

type DestinationSwitchFull struct {
	*CannotAccessNetwork
}

type DestinationVsanDisabled struct {
	*CannotMoveVsanEnabledHost

	DestinationCluster string `xml:"destinationCluster,omitempty"`
}

type DeviceBackingNotSupported struct {
	*DeviceNotSupported

	Backing string `xml:"backing,omitempty"`
}

type DeviceControllerNotSupported struct {
	*DeviceNotSupported

	Controller string `xml:"controller,omitempty"`
}

type DeviceHotPlugNotSupported struct {
	*InvalidDeviceSpec
}

type DeviceNotFound struct {
	*InvalidDeviceSpec
}

type DeviceNotSupported struct {
	*VirtualHardwareCompatibilityIssue

	Device string `xml:"device,omitempty"`
	Reason string `xml:"reason,omitempty"`
}

type DeviceUnsupportedForVmPlatform struct {
	*InvalidDeviceSpec
}

type DeviceUnsupportedForVmVersion struct {
	*InvalidDeviceSpec

	CurrentVersion  string `xml:"currentVersion,omitempty"`
	ExpectedVersion string `xml:"expectedVersion,omitempty"`
}

type DirectoryNotEmpty struct {
	*FileFault
}

type DisableAdminNotSupported struct {
	*HostConfigFault
}

type DisallowedChangeByService struct {
	*RuntimeFault

	ServiceName      string `xml:"serviceName,omitempty"`
	DisallowedChange string `xml:"disallowedChange,omitempty"`
}

type DisallowedDiskModeChange struct {
	*InvalidDeviceSpec
}

type DisallowedMigrationDeviceAttached struct {
	*MigrationFault

	Fault *LocalizedMethodFault `xml:"fault,omitempty"`
}

type DisallowedOperationOnFailoverHost struct {
	*RuntimeFault

	Host     *ManagedObjectReference `xml:"host,omitempty"`
	Hostname string                  `xml:"hostname,omitempty"`
}

type DiskHasPartitions struct {
	*VsanDiskFault
}

type DiskIsLastRemainingNonSSD struct {
	*VsanDiskFault
}

type DiskIsNonLocal struct {
	*VsanDiskFault
}

type DiskIsUSB struct {
	*VsanDiskFault
}

type DiskMoveTypeNotSupported struct {
	*MigrationFault
}

type DiskNotSupported struct {
	*VirtualHardwareCompatibilityIssue

	Disk int32 `xml:"disk,omitempty"`
}

type DiskTooSmall struct {
	*VsanDiskFault
}

type DomainNotFound struct {
	*ActiveDirectoryFault

	DomainName string `xml:"domainName,omitempty"`
}

type DrsDisabledOnVm struct {
	*VimFault
}

type DrsVmotionIncompatibleFault struct {
	*VirtualHardwareCompatibilityIssue

	Host *ManagedObjectReference `xml:"host,omitempty"`
}

type DuplicateDisks struct {
	*VsanDiskFault
}

type DuplicateName struct {
	*VimFault

	Name   string                  `xml:"name,omitempty"`
	Object *ManagedObjectReference `xml:"object,omitempty"`
}

type DuplicateVsanNetworkInterface struct {
	*VsanFault

	Device string `xml:"device,omitempty"`
}

type DvsApplyOperationFaultFaultOnObject struct {
	*DynamicData

	ObjectId string                `xml:"objectId,omitempty"`
	Type_    string                `xml:"type,omitempty"`
	Fault    *LocalizedMethodFault `xml:"fault,omitempty"`
}

type ArrayOfDvsApplyOperationFaultFaultOnObject struct {
	DvsApplyOperationFaultFaultOnObject []*DvsApplyOperationFaultFaultOnObject `xml:"DvsApplyOperationFaultFaultOnObject,omitempty"`
}

type DvsApplyOperationFault struct {
	*DvsFault

	ObjectFault []*DvsApplyOperationFaultFaultOnObject `xml:"objectFault,omitempty"`
}

type DvsFault struct {
	*VimFault
}

type DvsNotAuthorized struct {
	*DvsFault

	SessionExtensionKey string `xml:"sessionExtensionKey,omitempty"`
	DvsExtensionKey     string `xml:"dvsExtensionKey,omitempty"`
}

type DvsOperationBulkFaultFaultOnHost struct {
	*DynamicData

	Host  *ManagedObjectReference `xml:"host,omitempty"`
	Fault *LocalizedMethodFault   `xml:"fault,omitempty"`
}

type ArrayOfDvsOperationBulkFaultFaultOnHost struct {
	DvsOperationBulkFaultFaultOnHost []*DvsOperationBulkFaultFaultOnHost `xml:"DvsOperationBulkFaultFaultOnHost,omitempty"`
}

type DvsOperationBulkFault struct {
	*DvsFault

	HostFault []*DvsOperationBulkFaultFaultOnHost `xml:"hostFault,omitempty"`
}

type DvsScopeViolated struct {
	*DvsFault

	Scope  []*ManagedObjectReference `xml:"scope,omitempty"`
	Entity *ManagedObjectReference   `xml:"entity,omitempty"`
}

type EVCAdmissionFailed struct {
	*NotSupportedHostInCluster

	Faults []*LocalizedMethodFault `xml:"faults,omitempty"`
}

type EVCAdmissionFailedCPUFeaturesForMode struct {
	*EVCAdmissionFailed

	CurrentEVCModeKey string `xml:"currentEVCModeKey,omitempty"`
}

type EVCAdmissionFailedCPUModel struct {
	*EVCAdmissionFailed
}

type EVCAdmissionFailedCPUModelForMode struct {
	*EVCAdmissionFailed

	CurrentEVCModeKey string `xml:"currentEVCModeKey,omitempty"`
}

type EVCAdmissionFailedCPUVendor struct {
	*EVCAdmissionFailed

	ClusterCPUVendor string `xml:"clusterCPUVendor,omitempty"`
	HostCPUVendor    string `xml:"hostCPUVendor,omitempty"`
}

type EVCAdmissionFailedCPUVendorUnknown struct {
	*EVCAdmissionFailed
}

type EVCAdmissionFailedHostDisconnected struct {
	*EVCAdmissionFailed
}

type EVCAdmissionFailedHostSoftware struct {
	*EVCAdmissionFailed
}

type EVCAdmissionFailedHostSoftwareForMode struct {
	*EVCAdmissionFailed
}

type EVCAdmissionFailedVmActive struct {
	*EVCAdmissionFailed
}

type EightHostLimitViolated struct {
	*VmConfigFault
}

type ExpiredAddonLicense struct {
	*ExpiredFeatureLicense
}

type ExpiredEditionLicense struct {
	*ExpiredFeatureLicense
}

type ExpiredFeatureLicense struct {
	*NotEnoughLicenses

	Feature        string    `xml:"feature,omitempty"`
	Count          int32     `xml:"count,omitempty"`
	ExpirationDate time.Time `xml:"expirationDate,omitempty"`
}

type ExtendedFault struct {
	*VimFault

	FaultTypeId string      `xml:"faultTypeId,omitempty"`
	Data        []*KeyValue `xml:"data,omitempty"`
}

type FailToEnableSPBM struct {
	*NotEnoughLicenses

	Cs                *ManagedObjectReference               `xml:"cs,omitempty"`
	CsName            string                                `xml:"csName,omitempty"`
	HostLicenseStates []*ComputeResourceHostSPBMLicenseInfo `xml:"hostLicenseStates,omitempty"`
}

type FailToLockFaultToleranceVMs struct {
	*RuntimeFault

	VmName          string                  `xml:"vmName,omitempty"`
	Vm              *ManagedObjectReference `xml:"vm,omitempty"`
	AlreadyLockedVm *ManagedObjectReference `xml:"alreadyLockedVm,omitempty"`
}

type FaultToleranceAntiAffinityViolated struct {
	*MigrationFault

	HostName string                  `xml:"hostName,omitempty"`
	Host     *ManagedObjectReference `xml:"host,omitempty"`
}

type FaultToleranceCannotEditMem struct {
	*VmConfigFault

	VmName string                  `xml:"vmName,omitempty"`
	Vm     *ManagedObjectReference `xml:"vm,omitempty"`
}

type FaultToleranceCpuIncompatible struct {
	*CpuIncompatible

	Model    bool `xml:"model,omitempty"`
	Family   bool `xml:"family,omitempty"`
	Stepping bool `xml:"stepping,omitempty"`
}

type FaultToleranceNeedsThickDisk struct {
	*MigrationFault

	VmName string `xml:"vmName,omitempty"`
}

type FaultToleranceNotLicensed struct {
	*VmFaultToleranceIssue

	HostName string `xml:"hostName,omitempty"`
}

type FaultToleranceNotSameBuild struct {
	*MigrationFault

	Build string `xml:"build,omitempty"`
}

type FaultTolerancePrimaryPowerOnNotAttempted struct {
	*VmFaultToleranceIssue

	SecondaryVm *ManagedObjectReference `xml:"secondaryVm,omitempty"`
	PrimaryVm   *ManagedObjectReference `xml:"primaryVm,omitempty"`
}

type FaultToleranceVmNotDasProtected struct {
	*VimFault

	Vm     *ManagedObjectReference `xml:"vm,omitempty"`
	VmName string                  `xml:"vmName,omitempty"`
}

type FcoeFault struct {
	*VimFault
}

type FcoeFaultPnicHasNoPortSet struct {
	*FcoeFault

	NicDevice string `xml:"nicDevice,omitempty"`
}

type FeatureRequirementsNotMet struct {
	*VirtualHardwareCompatibilityIssue

	FeatureRequirement []*VirtualMachineFeatureRequirement `xml:"featureRequirement,omitempty"`
	Vm                 *ManagedObjectReference             `xml:"vm,omitempty"`
	Host               *ManagedObjectReference             `xml:"host,omitempty"`
}

type FileAlreadyExists struct {
	*FileFault
}

type FileBackedPortNotSupported struct {
	*DeviceNotSupported
}

type FileFault struct {
	*VimFault

	File string `xml:"file,omitempty"`
}

type FileLocked struct {
	*FileFault
}

type FileNameTooLong struct {
	*FileFault
}

type FileNotFound struct {
	*FileFault
}

type FileNotWritable struct {
	*FileFault
}

type FileTooLarge struct {
	*FileFault

	Datastore   string `xml:"datastore,omitempty"`
	FileSize    int64  `xml:"fileSize,omitempty"`
	MaxFileSize int64  `xml:"maxFileSize,omitempty"`
}

type FilesystemQuiesceFault struct {
	*SnapshotFault
}

type FtIssuesOnHost struct {
	*VmFaultToleranceIssue

	Host     *ManagedObjectReference `xml:"host,omitempty"`
	HostName string                  `xml:"hostName,omitempty"`
	Errors   []*LocalizedMethodFault `xml:"errors,omitempty"`
}

type FullStorageVMotionNotSupported struct {
	*MigrationFeatureNotSupported
}

type GenericDrsFault struct {
	*VimFault

	HostFaults []*LocalizedMethodFault `xml:"hostFaults,omitempty"`
}

type GenericVmConfigFault struct {
	*VmConfigFault

	Reason string `xml:"reason,omitempty"`
}

type GuestAuthenticationChallenge struct {
	*GuestOperationsFault

	ServerChallenge *GuestAuthentication `xml:"serverChallenge,omitempty"`
	SessionID       int64                `xml:"sessionID,omitempty"`
}

type GuestComponentsOutOfDate struct {
	*GuestOperationsFault
}

type GuestOperationsFault struct {
	*VimFault
}

type GuestOperationsUnavailable struct {
	*GuestOperationsFault
}

type GuestPermissionDenied struct {
	*GuestOperationsFault
}

type GuestProcessNotFound struct {
	*GuestOperationsFault

	Pid int64 `xml:"pid,omitempty"`
}

type HAErrorsAtDest struct {
	*MigrationFault
}

type HostAccessRestrictedToManagementServer struct {
	*NotSupported

	ManagementServer string `xml:"managementServer,omitempty"`
}

type HostConfigFailed struct {
	*HostConfigFault

	Failure []*LocalizedMethodFault `xml:"failure,omitempty"`
}

type HostConfigFault struct {
	*VimFault
}

type HostConnectFault struct {
	*VimFault
}

type HostInDomain struct {
	*HostConfigFault
}

type HostIncompatibleForFaultTolerance struct {
	*VmFaultToleranceIssue

	HostName string `xml:"hostName,omitempty"`
	Reason   string `xml:"reason,omitempty"`
}

type HostIncompatibleForRecordReplay struct {
	*VimFault

	HostName string `xml:"hostName,omitempty"`
	Reason   string `xml:"reason,omitempty"`
}

type HostInventoryFull struct {
	*NotEnoughLicenses

	Capacity int32 `xml:"capacity,omitempty"`
}

type HostPowerOpFailed struct {
	*VimFault
}

type HotSnapshotMoveNotSupported struct {
	*SnapshotCopyNotSupported
}

type IDEDiskNotSupported struct {
	*DiskNotSupported
}

type IORMNotSupportedHostOnDatastore struct {
	*VimFault

	Datastore     *ManagedObjectReference   `xml:"datastore,omitempty"`
	DatastoreName string                    `xml:"datastoreName,omitempty"`
	Host          []*ManagedObjectReference `xml:"host,omitempty"`
}

type ImportHostAddFailure struct {
	*DvsFault

	HostIp []string `xml:"hostIp,omitempty"`
}

type ImportOperationBulkFaultFaultOnImport struct {
	*DynamicData

	EntityType string                `xml:"entityType,omitempty"`
	Key        string                `xml:"key,omitempty"`
	Fault      *LocalizedMethodFault `xml:"fault,omitempty"`
}

type ArrayOfImportOperationBulkFaultFaultOnImport struct {
	ImportOperationBulkFaultFaultOnImport []*ImportOperationBulkFaultFaultOnImport `xml:"ImportOperationBulkFaultFaultOnImport,omitempty"`
}

type ImportOperationBulkFault struct {
	*DvsFault

	ImportFaults []*ImportOperationBulkFaultFaultOnImport `xml:"importFaults,omitempty"`
}

type InUseFeatureManipulationDisallowed struct {
	*NotEnoughLicenses
}

type InaccessibleDatastore struct {
	*InvalidDatastore

	Detail string `xml:"detail,omitempty"`
}

type InaccessibleVFlashSource struct {
	*VimFault

	HostName string `xml:"hostName,omitempty"`
}

type IncompatibleDefaultDevice struct {
	*MigrationFault

	Device string `xml:"device,omitempty"`
}

type IncompatibleHostForFtSecondary struct {
	*VmFaultToleranceIssue

	Host  *ManagedObjectReference `xml:"host,omitempty"`
	Error []*LocalizedMethodFault `xml:"error,omitempty"`
}

type IncompatibleSetting struct {
	*InvalidArgument

	ConflictingProperty string `xml:"conflictingProperty,omitempty"`
}

type IncorrectFileType struct {
	*FileFault
}

type IncorrectHostInformation struct {
	*NotEnoughLicenses
}

type IndependentDiskVMotionNotSupported struct {
	*MigrationFeatureNotSupported
}

type InsufficientAgentVmsDeployed struct {
	*InsufficientResourcesFault

	HostName            string `xml:"hostName,omitempty"`
	RequiredNumAgentVms int32  `xml:"requiredNumAgentVms,omitempty"`
	CurrentNumAgentVms  int32  `xml:"currentNumAgentVms,omitempty"`
}

type InsufficientCpuResourcesFault struct {
	*InsufficientResourcesFault

	Unreserved int64 `xml:"unreserved,omitempty"`
	Requested  int64 `xml:"requested,omitempty"`
}

type InsufficientDisks struct {
	*VsanDiskFault
}

type InsufficientFailoverResourcesFault struct {
	*InsufficientResourcesFault
}

type InsufficientHostCapacityFault struct {
	*InsufficientResourcesFault

	Host *ManagedObjectReference `xml:"host,omitempty"`
}

type InsufficientHostCpuCapacityFault struct {
	*InsufficientHostCapacityFault

	Unreserved int64 `xml:"unreserved,omitempty"`
	Requested  int64 `xml:"requested,omitempty"`
}

type InsufficientHostMemoryCapacityFault struct {
	*InsufficientHostCapacityFault

	Unreserved int64 `xml:"unreserved,omitempty"`
	Requested  int64 `xml:"requested,omitempty"`
}

type InsufficientMemoryResourcesFault struct {
	*InsufficientResourcesFault

	Unreserved int64 `xml:"unreserved,omitempty"`
	Requested  int64 `xml:"requested,omitempty"`
}

type InsufficientPerCpuCapacity struct {
	*InsufficientHostCapacityFault
}

type InsufficientResourcesFault struct {
	*VimFault
}

type InsufficientStandbyCpuResource struct {
	*InsufficientStandbyResource

	Available int64 `xml:"available,omitempty"`
	Requested int64 `xml:"requested,omitempty"`
}

type InsufficientStandbyMemoryResource struct {
	*InsufficientStandbyResource

	Available int64 `xml:"available,omitempty"`
	Requested int64 `xml:"requested,omitempty"`
}

type InsufficientStandbyResource struct {
	*InsufficientResourcesFault
}

type InsufficientStorageSpace struct {
	*InsufficientResourcesFault
}

type InsufficientVFlashResourcesFault struct {
	*InsufficientResourcesFault

	FreeSpace      int64 `xml:"freeSpace,omitempty"`
	RequestedSpace int64 `xml:"requestedSpace,omitempty"`
}

type InvalidAffinitySettingFault struct {
	*VimFault
}

type InvalidBmcRole struct {
	*VimFault
}

type InvalidBundle struct {
	*PlatformConfigFault
}

type InvalidCAMCertificate struct {
	*InvalidCAMServer
}

type InvalidCAMServer struct {
	*ActiveDirectoryFault

	CamServer string `xml:"camServer,omitempty"`
}

type InvalidClientCertificate struct {
	*InvalidLogin
}

type InvalidController struct {
	*InvalidDeviceSpec

	ControllerKey int32 `xml:"controllerKey,omitempty"`
}

type InvalidDasConfigArgument struct {
	*InvalidArgument

	Entry       string `xml:"entry,omitempty"`
	ClusterName string `xml:"clusterName,omitempty"`
}

type InvalidDasRestartPriorityForFtVm struct {
	*InvalidArgument

	Vm     *ManagedObjectReference `xml:"vm,omitempty"`
	VmName string                  `xml:"vmName,omitempty"`
}

type InvalidDatastore struct {
	*VimFault

	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
	Name      string                  `xml:"name,omitempty"`
}

type InvalidDatastorePath struct {
	*InvalidDatastore

	DatastorePath string `xml:"datastorePath,omitempty"`
}

type InvalidDatastoreState struct {
	*InvalidState

	DatastoreName string `xml:"datastoreName,omitempty"`
}

type InvalidDeviceBacking struct {
	*InvalidDeviceSpec
}

type InvalidDeviceOperation struct {
	*InvalidDeviceSpec

	BadOp     *VirtualDeviceConfigSpecOperation     `xml:"badOp,omitempty"`
	BadFileOp *VirtualDeviceConfigSpecFileOperation `xml:"badFileOp,omitempty"`
}

type InvalidDeviceSpec struct {
	*InvalidVmConfig

	DeviceIndex int32 `xml:"deviceIndex,omitempty"`
}

type InvalidDiskFormat struct {
	*InvalidFormat
}

type InvalidDrsBehaviorForFtVm struct {
	*InvalidArgument

	Vm     *ManagedObjectReference `xml:"vm,omitempty"`
	VmName string                  `xml:"vmName,omitempty"`
}

type InvalidEditionLicense struct {
	*NotEnoughLicenses

	Feature string `xml:"feature,omitempty"`
}

type InvalidEvent struct {
	*VimFault
}

type InvalidFolder struct {
	*VimFault

	Target *ManagedObjectReference `xml:"target,omitempty"`
}

type InvalidFormat struct {
	*VmConfigFault
}

type InvalidGuestLogin struct {
	*GuestOperationsFault
}

type InvalidHostConnectionState struct {
	*InvalidHostState
}

type InvalidHostName struct {
	*HostConfigFault
}

type InvalidHostState struct {
	*InvalidState

	Host *ManagedObjectReference `xml:"host,omitempty"`
}

type InvalidIndexArgument struct {
	*InvalidArgument

	Key string `xml:"key,omitempty"`
}

type InvalidIpfixConfig struct {
	*DvsFault

	Property string `xml:"property,omitempty"`
}

type InvalidIpmiLoginInfo struct {
	*VimFault
}

type InvalidIpmiMacAddress struct {
	*VimFault

	UserProvidedMacAddress string `xml:"userProvidedMacAddress,omitempty"`
	ObservedMacAddress     string `xml:"observedMacAddress,omitempty"`
}

type InvalidLicense struct {
	*VimFault

	LicenseContent string `xml:"licenseContent,omitempty"`
}

type InvalidLocale struct {
	*VimFault
}

type InvalidLogin struct {
	*VimFault
}

type InvalidName struct {
	*VimFault

	Name   string                  `xml:"name,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
}

type InvalidNasCredentials struct {
	*NasConfigFault

	UserName string `xml:"userName,omitempty"`
}

type InvalidNetworkInType struct {
	*VAppPropertyFault
}

type InvalidNetworkResource struct {
	*NasConfigFault

	RemoteHost string `xml:"remoteHost,omitempty"`
	RemotePath string `xml:"remotePath,omitempty"`
}

type InvalidOperationOnSecondaryVm struct {
	*VmFaultToleranceIssue

	InstanceUuid string `xml:"instanceUuid,omitempty"`
}

type InvalidPowerState struct {
	*InvalidState

	RequestedState *VirtualMachinePowerState `xml:"requestedState,omitempty"`
	ExistingState  *VirtualMachinePowerState `xml:"existingState,omitempty"`
}

type InvalidPrivilege struct {
	*VimFault

	Privilege string `xml:"privilege,omitempty"`
}

type InvalidProfileReferenceHost struct {
	*RuntimeFault

	Reason  string                  `xml:"reason,omitempty"`
	Host    *ManagedObjectReference `xml:"host,omitempty"`
	Profile *ManagedObjectReference `xml:"profile,omitempty"`
}

type InvalidPropertyType struct {
	*VAppPropertyFault
}

type InvalidPropertyValue struct {
	*VAppPropertyFault
}

type InvalidResourcePoolStructureFault struct {
	*InsufficientResourcesFault
}

type InvalidSnapshotFormat struct {
	*InvalidFormat
}

type InvalidState struct {
	*VimFault
}

type InvalidVmConfig struct {
	*VmConfigFault

	Property string `xml:"property,omitempty"`
}

type InventoryHasStandardAloneHosts struct {
	*NotEnoughLicenses

	Hosts []string `xml:"hosts,omitempty"`
}

type IpHostnameGeneratorError struct {
	*CustomizationFault
}

type IscsiFault struct {
	*VimFault
}

type IscsiFaultInvalidVnic struct {
	*IscsiFault

	VnicDevice string `xml:"vnicDevice,omitempty"`
}

type IscsiFaultPnicInUse struct {
	*IscsiFault

	PnicDevice string `xml:"pnicDevice,omitempty"`
}

type IscsiFaultVnicAlreadyBound struct {
	*IscsiFault

	VnicDevice string `xml:"vnicDevice,omitempty"`
}

type IscsiFaultVnicHasActivePaths struct {
	*IscsiFault

	VnicDevice string `xml:"vnicDevice,omitempty"`
}

type IscsiFaultVnicHasMultipleUplinks struct {
	*IscsiFault

	VnicDevice string `xml:"vnicDevice,omitempty"`
}

type IscsiFaultVnicHasNoUplinks struct {
	*IscsiFault

	VnicDevice string `xml:"vnicDevice,omitempty"`
}

type IscsiFaultVnicHasWrongUplink struct {
	*IscsiFault

	VnicDevice string `xml:"vnicDevice,omitempty"`
}

type IscsiFaultVnicInUse struct {
	*IscsiFault

	VnicDevice string `xml:"vnicDevice,omitempty"`
}

type IscsiFaultVnicIsLastPath struct {
	*IscsiFault

	VnicDevice string `xml:"vnicDevice,omitempty"`
}

type IscsiFaultVnicNotBound struct {
	*IscsiFault

	VnicDevice string `xml:"vnicDevice,omitempty"`
}

type IscsiFaultVnicNotFound struct {
	*IscsiFault

	VnicDevice string `xml:"vnicDevice,omitempty"`
}

type LargeRDMConversionNotSupported struct {
	*MigrationFault

	Device string `xml:"device,omitempty"`
}

type LargeRDMNotSupportedOnDatastore struct {
	*VmConfigFault

	Device        string                  `xml:"device,omitempty"`
	Datastore     *ManagedObjectReference `xml:"datastore,omitempty"`
	DatastoreName string                  `xml:"datastoreName,omitempty"`
}

type LegacyNetworkInterfaceInUse struct {
	*CannotAccessNetwork
}

type LicenseAssignmentFailed struct {
	*RuntimeFault

	Reason string `xml:"reason,omitempty"`
}

type LicenseDowngradeDisallowed struct {
	*NotEnoughLicenses

	Edition  string         `xml:"edition,omitempty"`
	EntityId string         `xml:"entityId,omitempty"`
	Features []*KeyAnyValue `xml:"features,omitempty"`
}

type LicenseEntityNotFound struct {
	*VimFault

	EntityId string `xml:"entityId,omitempty"`
}

type LicenseExpired struct {
	*NotEnoughLicenses

	LicenseKey string `xml:"licenseKey,omitempty"`
}

type LicenseKeyEntityMismatch struct {
	*NotEnoughLicenses
}

type LicenseRestricted struct {
	*NotEnoughLicenses
}

type LicenseServerUnavailable struct {
	*VimFault

	LicenseServer string `xml:"licenseServer,omitempty"`
}

type LicenseSourceUnavailable struct {
	*NotEnoughLicenses

	LicenseSource *LicenseSource `xml:"licenseSource,omitempty"`
}

type LimitExceeded struct {
	*VimFault

	Property string `xml:"property,omitempty"`
	Limit    int32  `xml:"limit,omitempty"`
}

type LinuxVolumeNotClean struct {
	*CustomizationFault
}

type LogBundlingFailed struct {
	*VimFault
}

type MaintenanceModeFileMove struct {
	*MigrationFault
}

type MemoryHotPlugNotSupported struct {
	*VmConfigFault
}

type MemorySizeNotRecommended struct {
	*VirtualHardwareCompatibilityIssue

	MemorySizeMB    int32 `xml:"memorySizeMB,omitempty"`
	MinMemorySizeMB int32 `xml:"minMemorySizeMB,omitempty"`
	MaxMemorySizeMB int32 `xml:"maxMemorySizeMB,omitempty"`
}

type MemorySizeNotSupported struct {
	*VirtualHardwareCompatibilityIssue

	MemorySizeMB    int32 `xml:"memorySizeMB,omitempty"`
	MinMemorySizeMB int32 `xml:"minMemorySizeMB,omitempty"`
	MaxMemorySizeMB int32 `xml:"maxMemorySizeMB,omitempty"`
}

type MemorySizeNotSupportedByDatastore struct {
	*VirtualHardwareCompatibilityIssue

	Datastore       *ManagedObjectReference `xml:"datastore,omitempty"`
	MemorySizeMB    int32                   `xml:"memorySizeMB,omitempty"`
	MaxMemorySizeMB int32                   `xml:"maxMemorySizeMB,omitempty"`
}

type MemorySnapshotOnIndependentDisk struct {
	*SnapshotFault
}

type MethodAlreadyDisabledFault struct {
	*RuntimeFault

	SourceId string `xml:"sourceId,omitempty"`
}

type MethodDisabled struct {
	*RuntimeFault

	Source string `xml:"source,omitempty"`
}

type MigrationDisabled struct {
	*MigrationFault
}

type MigrationFault struct {
	*VimFault
}

type MigrationFeatureNotSupported struct {
	*MigrationFault

	AtSourceHost   bool                    `xml:"atSourceHost,omitempty"`
	FailedHostName string                  `xml:"failedHostName,omitempty"`
	FailedHost     *ManagedObjectReference `xml:"failedHost,omitempty"`
}

type MigrationNotReady struct {
	*MigrationFault

	Reason string `xml:"reason,omitempty"`
}

type MismatchedBundle struct {
	*VimFault

	BundleUuid        string `xml:"bundleUuid,omitempty"`
	HostUuid          string `xml:"hostUuid,omitempty"`
	BundleBuildNumber int32  `xml:"bundleBuildNumber,omitempty"`
	HostBuildNumber   int32  `xml:"hostBuildNumber,omitempty"`
}

type MismatchedNetworkPolicies struct {
	*MigrationFault

	Device    string `xml:"device,omitempty"`
	Backing   string `xml:"backing,omitempty"`
	Connected bool   `xml:"connected,omitempty"`
}

type MismatchedVMotionNetworkNames struct {
	*MigrationFault

	SourceNetwork string `xml:"sourceNetwork,omitempty"`
	DestNetwork   string `xml:"destNetwork,omitempty"`
}

type MissingBmcSupport struct {
	*VimFault
}

type MissingController struct {
	*InvalidDeviceSpec
}

type MissingIpPool struct {
	*VAppPropertyFault
}

type MissingLinuxCustResources struct {
	*CustomizationFault
}

type MissingNetworkIpConfig struct {
	*VAppPropertyFault
}

type MissingPowerOffConfiguration struct {
	*VAppConfigFault
}

type MissingPowerOnConfiguration struct {
	*VAppConfigFault
}

type MissingWindowsCustResources struct {
	*CustomizationFault
}

type MksConnectionLimitReached struct {
	*InvalidState

	ConnectionLimit int32 `xml:"connectionLimit,omitempty"`
}

type MountError struct {
	*CustomizationFault

	Vm        *ManagedObjectReference `xml:"vm,omitempty"`
	DiskIndex int32                   `xml:"diskIndex,omitempty"`
}

type MultipleCertificatesVerifyFaultThumbprintData struct {
	*DynamicData

	Port       int32  `xml:"port,omitempty"`
	Thumbprint string `xml:"thumbprint,omitempty"`
}

type ArrayOfMultipleCertificatesVerifyFaultThumbprintData struct {
	MultipleCertificatesVerifyFaultThumbprintData []*MultipleCertificatesVerifyFaultThumbprintData `xml:"MultipleCertificatesVerifyFaultThumbprintData,omitempty"`
}

type MultipleCertificatesVerifyFault struct {
	*HostConnectFault

	ThumbprintData []*MultipleCertificatesVerifyFaultThumbprintData `xml:"thumbprintData,omitempty"`
}

type MultipleSnapshotsNotSupported struct {
	*SnapshotFault
}

type NamespaceFull struct {
	*VimFault

	Name           string `xml:"name,omitempty"`
	CurrentMaxSize int64  `xml:"currentMaxSize,omitempty"`
	RequiredSize   int64  `xml:"requiredSize,omitempty"`
}

type NamespaceLimitReached struct {
	*VimFault

	Limit int32 `xml:"limit,omitempty"`
}

type NamespaceWriteProtected struct {
	*VimFault

	Name string `xml:"name,omitempty"`
}

type NasConfigFault struct {
	*HostConfigFault

	Name string `xml:"name,omitempty"`
}

type NasConnectionLimitReached struct {
	*NasConfigFault

	RemoteHost string `xml:"remoteHost,omitempty"`
	RemotePath string `xml:"remotePath,omitempty"`
}

type NasSessionCredentialConflict struct {
	*NasConfigFault

	RemoteHost string `xml:"remoteHost,omitempty"`
	RemotePath string `xml:"remotePath,omitempty"`
	UserName   string `xml:"userName,omitempty"`
}

type NasVolumeNotMounted struct {
	*NasConfigFault

	RemoteHost string `xml:"remoteHost,omitempty"`
	RemotePath string `xml:"remotePath,omitempty"`
}

type NetworkCopyFault struct {
	*FileFault
}

type NetworkDisruptedAndConfigRolledBack struct {
	*VimFault

	Host string `xml:"host,omitempty"`
}

type NetworkInaccessible struct {
	*NasConfigFault
}

type NetworksMayNotBeTheSame struct {
	*MigrationFault

	Name string `xml:"name,omitempty"`
}

type NicSettingMismatch struct {
	*CustomizationFault

	NumberOfNicsInSpec int32 `xml:"numberOfNicsInSpec,omitempty"`
	NumberOfNicsInVM   int32 `xml:"numberOfNicsInVM,omitempty"`
}

type NoActiveHostInCluster struct {
	*InvalidState

	ComputeResource *ManagedObjectReference `xml:"computeResource,omitempty"`
}

type NoAvailableIp struct {
	*VAppPropertyFault

	Network *ManagedObjectReference `xml:"network,omitempty"`
}

type NoClientCertificate struct {
	*VimFault
}

type NoCompatibleDatastore struct {
	*VimFault
}

type NoCompatibleHardAffinityHost struct {
	*VmConfigFault

	VmName string `xml:"vmName,omitempty"`
}

type NoCompatibleHost struct {
	*VimFault

	Host  []*ManagedObjectReference `xml:"host,omitempty"`
	Error []*LocalizedMethodFault   `xml:"error,omitempty"`
}

type NoCompatibleHostWithAccessToDevice struct {
	*NoCompatibleHost
}

type NoCompatibleSoftAffinityHost struct {
	*VmConfigFault

	VmName string `xml:"vmName,omitempty"`
}

type NoConnectedDatastore struct {
	*VimFault
}

type NoDiskFound struct {
	*VimFault
}

type NoDiskSpace struct {
	*FileFault

	Datastore string `xml:"datastore,omitempty"`
}

type NoDisksToCustomize struct {
	*CustomizationFault
}

type NoGateway struct {
	*HostConfigFault
}

type NoGuestHeartbeat struct {
	*MigrationFault
}

type NoHost struct {
	*HostConnectFault

	Name string `xml:"name,omitempty"`
}

type NoHostSuitableForFtSecondary struct {
	*VmFaultToleranceIssue

	Vm     *ManagedObjectReference `xml:"vm,omitempty"`
	VmName string                  `xml:"vmName,omitempty"`
}

type NoLicenseServerConfigured struct {
	*NotEnoughLicenses
}

type NoPeerHostFound struct {
	*HostPowerOpFailed
}

type NoPermission struct {
	*SecurityError

	Object      *ManagedObjectReference `xml:"object,omitempty"`
	PrivilegeId string                  `xml:"privilegeId,omitempty"`
}

type NoPermissionOnAD struct {
	*ActiveDirectoryFault
}

type NoPermissionOnHost struct {
	*HostConnectFault
}

type NoPermissionOnNasVolume struct {
	*NasConfigFault

	UserName string `xml:"userName,omitempty"`
}

type NoSubjectName struct {
	*VimFault
}

type NoVcManagedIpConfigured struct {
	*VAppPropertyFault
}

type NoVirtualNic struct {
	*HostConfigFault
}

type NoVmInVApp struct {
	*VAppConfigFault
}

type NonADUserRequired struct {
	*ActiveDirectoryFault
}

type NonHomeRDMVMotionNotSupported struct {
	*MigrationFeatureNotSupported

	Device string `xml:"device,omitempty"`
}

type NonPersistentDisksNotSupported struct {
	*DeviceNotSupported
}

type NonVmwareOuiMacNotSupportedHost struct {
	*NotSupportedHost

	HostName string `xml:"hostName,omitempty"`
}

type NotADirectory struct {
	*FileFault
}

type NotAFile struct {
	*FileFault
}

type NotAuthenticated struct {
	*NoPermission
}

type NotEnoughCpus struct {
	*VirtualHardwareCompatibilityIssue

	NumCpuDest int32 `xml:"numCpuDest,omitempty"`
	NumCpuVm   int32 `xml:"numCpuVm,omitempty"`
}

type NotEnoughLogicalCpus struct {
	*NotEnoughCpus

	Host *ManagedObjectReference `xml:"host,omitempty"`
}

type NotFound struct {
	*VimFault
}

type NotSupportedDeviceForFT struct {
	*VmFaultToleranceIssue

	Host        *ManagedObjectReference `xml:"host,omitempty"`
	HostName    string                  `xml:"hostName,omitempty"`
	Vm          *ManagedObjectReference `xml:"vm,omitempty"`
	VmName      string                  `xml:"vmName,omitempty"`
	DeviceType  string                  `xml:"deviceType,omitempty"`
	DeviceLabel string                  `xml:"deviceLabel,omitempty"`
}

type NotSupportedHost struct {
	*HostConnectFault

	ProductName    string `xml:"productName,omitempty"`
	ProductVersion string `xml:"productVersion,omitempty"`
}

type NotSupportedHostForVFlash struct {
	*NotSupportedHost

	HostName string `xml:"hostName,omitempty"`
}

type NotSupportedHostForVsan struct {
	*NotSupportedHost

	HostName string `xml:"hostName,omitempty"`
}

type NotSupportedHostInCluster struct {
	*NotSupportedHost
}

type NotSupportedHostInDvs struct {
	*NotSupportedHost

	SwitchProductSpec *DistributedVirtualSwitchProductSpec `xml:"switchProductSpec,omitempty"`
}

type NotSupportedHostInHACluster struct {
	*NotSupportedHost

	HostName string `xml:"hostName,omitempty"`
	Build    string `xml:"build,omitempty"`
}

type NotUserConfigurableProperty struct {
	*VAppPropertyFault
}

type NumVirtualCoresPerSocketNotSupported struct {
	*VirtualHardwareCompatibilityIssue

	MaxSupportedCoresPerSocketDest int32 `xml:"maxSupportedCoresPerSocketDest,omitempty"`
	NumCoresPerSocketVm            int32 `xml:"numCoresPerSocketVm,omitempty"`
}

type NumVirtualCpusExceedsLimit struct {
	*InsufficientResourcesFault

	MaxSupportedVcpus int32 `xml:"maxSupportedVcpus,omitempty"`
}

type NumVirtualCpusIncompatible struct {
	*VmConfigFault

	Reason string `xml:"reason,omitempty"`
	NumCpu int32  `xml:"numCpu,omitempty"`
}

type NumVirtualCpusNotSupported struct {
	*VirtualHardwareCompatibilityIssue

	MaxSupportedVcpusDest int32 `xml:"maxSupportedVcpusDest,omitempty"`
	NumCpuVm              int32 `xml:"numCpuVm,omitempty"`
}

type OperationDisabledByGuest struct {
	*GuestOperationsFault
}

type OperationDisallowedOnHost struct {
	*RuntimeFault
}

type OperationNotSupportedByGuest struct {
	*GuestOperationsFault
}

type OutOfBounds struct {
	*VimFault

	ArgumentName string `xml:"argumentName,omitempty"`
}

type OvfAttribute struct {
	*OvfInvalidPackage

	ElementName   string `xml:"elementName,omitempty"`
	AttributeName string `xml:"attributeName,omitempty"`
}

type OvfConnectedDevice struct {
	*OvfHardwareExport
}

type OvfConnectedDeviceFloppy struct {
	*OvfConnectedDevice

	Filename string `xml:"filename,omitempty"`
}

type OvfConnectedDeviceIso struct {
	*OvfConnectedDevice

	Filename string `xml:"filename,omitempty"`
}

type OvfConstraint struct {
	*OvfInvalidPackage

	Name string `xml:"name,omitempty"`
}

type OvfConsumerCallbackFault struct {
	*OvfFault

	ExtensionKey  string `xml:"extensionKey,omitempty"`
	ExtensionName string `xml:"extensionName,omitempty"`
}

type OvfConsumerCommunicationError struct {
	*OvfConsumerCallbackFault

	Description string `xml:"description,omitempty"`
}

type OvfConsumerFault struct {
	*OvfConsumerCallbackFault

	ErrorKey string      `xml:"errorKey,omitempty"`
	Message  string      `xml:"message,omitempty"`
	Params   []*KeyValue `xml:"params,omitempty"`
}

type OvfConsumerInvalidSection struct {
	*OvfConsumerCallbackFault

	LineNumber  int32  `xml:"lineNumber,omitempty"`
	Description string `xml:"description,omitempty"`
}

type OvfConsumerPowerOnFault struct {
	*InvalidState

	ExtensionKey  string `xml:"extensionKey,omitempty"`
	ExtensionName string `xml:"extensionName,omitempty"`
	Description   string `xml:"description,omitempty"`
}

type OvfConsumerUndeclaredSection struct {
	*OvfConsumerCallbackFault

	QualifiedSectionType string `xml:"qualifiedSectionType,omitempty"`
}

type OvfConsumerUndefinedPrefix struct {
	*OvfConsumerCallbackFault

	Prefix string `xml:"prefix,omitempty"`
}

type OvfConsumerValidationFault struct {
	*VmConfigFault

	ExtensionKey  string `xml:"extensionKey,omitempty"`
	ExtensionName string `xml:"extensionName,omitempty"`
	Message       string `xml:"message,omitempty"`
}

type OvfCpuCompatibility struct {
	*OvfImport

	RegisterName         string `xml:"registerName,omitempty"`
	Level                int32  `xml:"level,omitempty"`
	RegisterValue        string `xml:"registerValue,omitempty"`
	DesiredRegisterValue string `xml:"desiredRegisterValue,omitempty"`
}

type OvfCpuCompatibilityCheckNotSupported struct {
	*OvfImport
}

type OvfDiskMappingNotFound struct {
	*OvfSystemFault

	DiskName string `xml:"diskName,omitempty"`
	VmName   string `xml:"vmName,omitempty"`
}

type OvfDiskOrderConstraint struct {
	*OvfConstraint
}

type OvfDuplicateElement struct {
	*OvfElement
}

type OvfDuplicatedElementBoundary struct {
	*OvfElement

	Boundary string `xml:"boundary,omitempty"`
}

type OvfDuplicatedPropertyIdExport struct {
	*OvfExport

	Fqid string `xml:"fqid,omitempty"`
}

type OvfDuplicatedPropertyIdImport struct {
	*OvfExport
}

type OvfElement struct {
	*OvfInvalidPackage

	Name string `xml:"name,omitempty"`
}

type OvfElementInvalidValue struct {
	*OvfElement

	Value string `xml:"value,omitempty"`
}

type OvfExport struct {
	*OvfFault
}

type OvfExportFailed struct {
	*OvfExport
}

type OvfFault struct {
	*VimFault
}

type OvfHardwareCheck struct {
	*OvfImport
}

type OvfHardwareExport struct {
	*OvfExport

	Device *VirtualDevice `xml:"device,omitempty"`
	VmPath string         `xml:"vmPath,omitempty"`
}

type OvfHostResourceConstraint struct {
	*OvfConstraint

	Value string `xml:"value,omitempty"`
}

type OvfHostValueNotParsed struct {
	*OvfSystemFault

	Property string `xml:"property,omitempty"`
	Value    string `xml:"value,omitempty"`
}

type OvfImport struct {
	*OvfFault
}

type OvfImportFailed struct {
	*OvfImport
}

type OvfInternalError struct {
	*OvfSystemFault
}

type OvfInvalidPackage struct {
	*OvfFault

	LineNumber int32 `xml:"lineNumber,omitempty"`
}

type OvfInvalidValue struct {
	*OvfAttribute

	Value string `xml:"value,omitempty"`
}

type OvfInvalidValueConfiguration struct {
	*OvfInvalidValue
}

type OvfInvalidValueEmpty struct {
	*OvfInvalidValue
}

type OvfInvalidValueFormatMalformed struct {
	*OvfInvalidValue
}

type OvfInvalidValueReference struct {
	*OvfInvalidValue
}

type OvfInvalidVmName struct {
	*OvfUnsupportedPackage

	Name string `xml:"name,omitempty"`
}

type OvfMappedOsId struct {
	*OvfImport

	OvfId             int32  `xml:"ovfId,omitempty"`
	OvfDescription    string `xml:"ovfDescription,omitempty"`
	TargetDescription string `xml:"targetDescription,omitempty"`
}

type OvfMissingAttribute struct {
	*OvfAttribute
}

type OvfMissingElement struct {
	*OvfElement
}

type OvfMissingElementNormalBoundary struct {
	*OvfMissingElement

	Boundary string `xml:"boundary,omitempty"`
}

type OvfMissingHardware struct {
	*OvfImport

	Name         string `xml:"name,omitempty"`
	ResourceType int32  `xml:"resourceType,omitempty"`
}

type OvfNetworkMappingNotSupported struct {
	*OvfImport
}

type OvfNoHostNic struct {
	*OvfUnsupportedPackage
}

type OvfNoSpaceOnController struct {
	*OvfUnsupportedElement

	Parent string `xml:"parent,omitempty"`
}

type OvfNoSupportedHardwareFamily struct {
	*OvfUnsupportedPackage

	Version string `xml:"version,omitempty"`
}

type OvfProperty struct {
	*OvfInvalidPackage

	Type_ string `xml:"type,omitempty"`
	Value string `xml:"value,omitempty"`
}

type OvfPropertyExport struct {
	*OvfExport

	Type_ string `xml:"type,omitempty"`
	Value string `xml:"value,omitempty"`
}

type OvfPropertyNetwork struct {
	*OvfProperty
}

type OvfPropertyNetworkExport struct {
	*OvfExport

	Network string `xml:"network,omitempty"`
}

type OvfPropertyQualifier struct {
	*OvfProperty

	Qualifier string `xml:"qualifier,omitempty"`
}

type OvfPropertyQualifierDuplicate struct {
	*OvfProperty

	Qualifier string `xml:"qualifier,omitempty"`
}

type OvfPropertyQualifierIgnored struct {
	*OvfProperty

	Qualifier string `xml:"qualifier,omitempty"`
}

type OvfPropertyType struct {
	*OvfProperty
}

type OvfPropertyValue struct {
	*OvfProperty
}

type OvfSystemFault struct {
	*OvfFault
}

type OvfToXmlUnsupportedElement struct {
	*OvfSystemFault

	Name string `xml:"name,omitempty"`
}

type OvfUnableToExportDisk struct {
	*OvfHardwareExport

	DiskName string `xml:"diskName,omitempty"`
}

type OvfUnexpectedElement struct {
	*OvfElement
}

type OvfUnknownDevice struct {
	*OvfSystemFault

	Device *VirtualDevice `xml:"device,omitempty"`
	VmName string         `xml:"vmName,omitempty"`
}

type OvfUnknownDeviceBacking struct {
	*OvfHardwareExport

	Backing *VirtualDeviceBackingInfo `xml:"backing,omitempty"`
}

type OvfUnknownEntity struct {
	*OvfSystemFault

	LineNumber int32 `xml:"lineNumber,omitempty"`
}

type OvfUnsupportedAttribute struct {
	*OvfUnsupportedPackage

	ElementName   string `xml:"elementName,omitempty"`
	AttributeName string `xml:"attributeName,omitempty"`
}

type OvfUnsupportedAttributeValue struct {
	*OvfUnsupportedAttribute

	Value string `xml:"value,omitempty"`
}

type OvfUnsupportedDeviceBackingInfo struct {
	*OvfSystemFault

	ElementName string `xml:"elementName,omitempty"`
	InstanceId  string `xml:"instanceId,omitempty"`
	DeviceName  string `xml:"deviceName,omitempty"`
	BackingName string `xml:"backingName,omitempty"`
}

type OvfUnsupportedDeviceBackingOption struct {
	*OvfSystemFault

	ElementName string `xml:"elementName,omitempty"`
	InstanceId  string `xml:"instanceId,omitempty"`
	DeviceName  string `xml:"deviceName,omitempty"`
	BackingName string `xml:"backingName,omitempty"`
}

type OvfUnsupportedDeviceExport struct {
	*OvfHardwareExport
}

type OvfUnsupportedDiskProvisioning struct {
	*OvfImport

	DiskProvisioning          string `xml:"diskProvisioning,omitempty"`
	SupportedDiskProvisioning string `xml:"supportedDiskProvisioning,omitempty"`
}

type OvfUnsupportedElement struct {
	*OvfUnsupportedPackage

	Name string `xml:"name,omitempty"`
}

type OvfUnsupportedElementValue struct {
	*OvfUnsupportedElement

	Value string `xml:"value,omitempty"`
}

type OvfUnsupportedPackage struct {
	*OvfFault

	LineNumber int32 `xml:"lineNumber,omitempty"`
}

type OvfUnsupportedSection struct {
	*OvfUnsupportedElement

	Info string `xml:"info,omitempty"`
}

type OvfUnsupportedSubType struct {
	*OvfUnsupportedPackage

	ElementName   string `xml:"elementName,omitempty"`
	InstanceId    string `xml:"instanceId,omitempty"`
	DeviceType    int32  `xml:"deviceType,omitempty"`
	DeviceSubType string `xml:"deviceSubType,omitempty"`
}

type OvfUnsupportedType struct {
	*OvfUnsupportedPackage

	Name       string `xml:"name,omitempty"`
	InstanceId string `xml:"instanceId,omitempty"`
	DeviceType int32  `xml:"deviceType,omitempty"`
}

type OvfWrongElement struct {
	*OvfElement
}

type OvfWrongNamespace struct {
	*OvfInvalidPackage

	NamespaceName string `xml:"namespaceName,omitempty"`
}

type OvfXmlFormat struct {
	*OvfInvalidPackage

	Description string `xml:"description,omitempty"`
}

type PatchAlreadyInstalled struct {
	*PatchNotApplicable
}

type PatchBinariesNotFound struct {
	*VimFault

	PatchID string   `xml:"patchID,omitempty"`
	Binary  []string `xml:"binary,omitempty"`
}

type PatchInstallFailed struct {
	*PlatformConfigFault

	RolledBack bool `xml:"rolledBack,omitempty"`
}

type PatchIntegrityError struct {
	*PlatformConfigFault
}

type PatchMetadataCorrupted struct {
	*PatchMetadataInvalid
}

type PatchMetadataInvalid struct {
	*VimFault

	PatchID  string   `xml:"patchID,omitempty"`
	MetaData []string `xml:"metaData,omitempty"`
}

type PatchMetadataNotFound struct {
	*PatchMetadataInvalid
}

type PatchMissingDependencies struct {
	*PatchNotApplicable

	PrerequisitePatch []string `xml:"prerequisitePatch,omitempty"`
	PrerequisiteLib   []string `xml:"prerequisiteLib,omitempty"`
}

type PatchNotApplicable struct {
	*VimFault

	PatchID string `xml:"patchID,omitempty"`
}

type PatchSuperseded struct {
	*PatchNotApplicable

	Supersede []string `xml:"supersede,omitempty"`
}

type PhysCompatRDMNotSupported struct {
	*RDMNotSupported
}

type PlatformConfigFault struct {
	*HostConfigFault

	Text string `xml:"text,omitempty"`
}

type PowerOnFtSecondaryFailed struct {
	*VmFaultToleranceIssue

	Vm              *ManagedObjectReference          `xml:"vm,omitempty"`
	VmName          string                           `xml:"vmName,omitempty"`
	HostSelectionBy *FtIssuesOnHostHostSelectionType `xml:"hostSelectionBy,omitempty"`
	HostErrors      []*LocalizedMethodFault          `xml:"hostErrors,omitempty"`
	RootCause       *LocalizedMethodFault            `xml:"rootCause,omitempty"`
}

type PowerOnFtSecondaryTimedout struct {
	*Timedout

	Vm      *ManagedObjectReference `xml:"vm,omitempty"`
	VmName  string                  `xml:"vmName,omitempty"`
	Timeout int32                   `xml:"timeout,omitempty"`
}

type ProfileUpdateFailedUpdateFailure struct {
	*DynamicData

	ProfilePath *ProfilePropertyPath `xml:"profilePath,omitempty"`
	ErrMsg      *LocalizableMessage  `xml:"errMsg,omitempty"`
}

type ArrayOfProfileUpdateFailedUpdateFailure struct {
	ProfileUpdateFailedUpdateFailure []*ProfileUpdateFailedUpdateFailure `xml:"ProfileUpdateFailedUpdateFailure,omitempty"`
}

type ProfileUpdateFailed struct {
	*VimFault

	Failure []*ProfileUpdateFailedUpdateFailure `xml:"failure,omitempty"`
}

type QuestionPending struct {
	*InvalidState

	Text string `xml:"text,omitempty"`
}

type QuiesceDatastoreIOForHAFailed struct {
	*ResourceInUse

	Host     *ManagedObjectReference `xml:"host,omitempty"`
	HostName string                  `xml:"hostName,omitempty"`
	Ds       *ManagedObjectReference `xml:"ds,omitempty"`
	DsName   string                  `xml:"dsName,omitempty"`
}

type RDMConversionNotSupported struct {
	*MigrationFault

	Device string `xml:"device,omitempty"`
}

type RDMNotPreserved struct {
	*MigrationFault

	Device string `xml:"device,omitempty"`
}

type RDMNotSupported struct {
	*DeviceNotSupported
}

type RDMNotSupportedOnDatastore struct {
	*VmConfigFault

	Device        string                  `xml:"device,omitempty"`
	Datastore     *ManagedObjectReference `xml:"datastore,omitempty"`
	DatastoreName string                  `xml:"datastoreName,omitempty"`
}

type RDMPointsToInaccessibleDisk struct {
	*CannotAccessVmDisk
}

type RawDiskNotSupported struct {
	*DeviceNotSupported
}

type ReadHostResourcePoolTreeFailed struct {
	*HostConnectFault
}

type ReadOnlyDisksWithLegacyDestination struct {
	*MigrationFault

	RoDiskCount   int32 `xml:"roDiskCount,omitempty"`
	TimeoutDanger bool  `xml:"timeoutDanger,omitempty"`
}

type RebootRequired struct {
	*VimFault

	Patch string `xml:"patch,omitempty"`
}

type RecordReplayDisabled struct {
	*VimFault
}

type RemoteDeviceNotSupported struct {
	*DeviceNotSupported
}

type RemoveFailed struct {
	*VimFault
}

type ReplicationConfigFault struct {
	*ReplicationFault
}

type ReplicationDiskConfigFault struct {
	*ReplicationConfigFault

	Reason string                  `xml:"reason,omitempty"`
	VmRef  *ManagedObjectReference `xml:"vmRef,omitempty"`
	Key    int32                   `xml:"key,omitempty"`
}

type ReplicationFault struct {
	*VimFault
}

type ReplicationIncompatibleWithFT struct {
	*ReplicationFault
}

type ReplicationInvalidOptions struct {
	*ReplicationFault

	Options string                  `xml:"options,omitempty"`
	Entity  *ManagedObjectReference `xml:"entity,omitempty"`
}

type ReplicationNotSupportedOnHost struct {
	*ReplicationFault
}

type ReplicationVmConfigFault struct {
	*ReplicationConfigFault

	Reason string                  `xml:"reason,omitempty"`
	VmRef  *ManagedObjectReference `xml:"vmRef,omitempty"`
}

type ReplicationVmFault struct {
	*ReplicationFault

	Reason     string                  `xml:"reason,omitempty"`
	State      string                  `xml:"state,omitempty"`
	InstanceId string                  `xml:"instanceId,omitempty"`
	Vm         *ManagedObjectReference `xml:"vm,omitempty"`
}

type ResourceInUse struct {
	*VimFault

	Type_ string `xml:"type,omitempty"`
	Name  string `xml:"name,omitempty"`
}

type ResourceNotAvailable struct {
	*VimFault

	ContainerType string `xml:"containerType,omitempty"`
	ContainerName string `xml:"containerName,omitempty"`
	Type_         string `xml:"type,omitempty"`
}

type RestrictedVersion struct {
	*SecurityError
}

type RollbackFailure struct {
	*DvsFault

	EntityName string `xml:"entityName,omitempty"`
	EntityType string `xml:"entityType,omitempty"`
}

type RuleViolation struct {
	*VmConfigFault

	Host *ManagedObjectReference `xml:"host,omitempty"`
	Rule *ClusterRuleInfo        `xml:"rule,omitempty"`
}

type SSLDisabledFault struct {
	*HostConnectFault
}

type SSLVerifyFault struct {
	*HostConnectFault

	SelfSigned bool   `xml:"selfSigned,omitempty"`
	Thumbprint string `xml:"thumbprint,omitempty"`
}

type SSPIChallenge struct {
	*VimFault

	Base64Token string `xml:"base64Token,omitempty"`
}

type SecondaryVmAlreadyDisabled struct {
	*VmFaultToleranceIssue

	InstanceUuid string `xml:"instanceUuid,omitempty"`
}

type SecondaryVmAlreadyEnabled struct {
	*VmFaultToleranceIssue

	InstanceUuid string `xml:"instanceUuid,omitempty"`
}

type SecondaryVmAlreadyRegistered struct {
	*VmFaultToleranceIssue

	InstanceUuid string `xml:"instanceUuid,omitempty"`
}

type SecondaryVmNotRegistered struct {
	*VmFaultToleranceIssue

	InstanceUuid string `xml:"instanceUuid,omitempty"`
}

type SharedBusControllerNotSupported struct {
	*DeviceNotSupported
}

type ShrinkDiskFault struct {
	*VimFault

	DiskId int32 `xml:"diskId,omitempty"`
}

type SnapshotCloneNotSupported struct {
	*SnapshotCopyNotSupported
}

type SnapshotCopyNotSupported struct {
	*MigrationFault
}

type SnapshotDisabled struct {
	*SnapshotFault
}

type SnapshotFault struct {
	*VimFault
}

type SnapshotIncompatibleDeviceInVm struct {
	*SnapshotFault

	Fault *LocalizedMethodFault `xml:"fault,omitempty"`
}

type SnapshotLocked struct {
	*SnapshotFault
}

type SnapshotMoveFromNonHomeNotSupported struct {
	*SnapshotCopyNotSupported
}

type SnapshotMoveNotSupported struct {
	*SnapshotCopyNotSupported
}

type SnapshotMoveToNonHomeNotSupported struct {
	*SnapshotCopyNotSupported
}

type SnapshotNoChange struct {
	*SnapshotFault
}

type SnapshotRevertIssue struct {
	*MigrationFault

	SnapshotName string   `xml:"snapshotName,omitempty"`
	Event        []*Event `xml:"event,omitempty"`
	Errors       bool     `xml:"errors,omitempty"`
}

type SoftRuleVioCorrectionDisallowed struct {
	*VmConfigFault

	VmName string `xml:"vmName,omitempty"`
}

type SoftRuleVioCorrectionImpact struct {
	*VmConfigFault

	VmName string `xml:"vmName,omitempty"`
}

type SsdDiskNotAvailable struct {
	*VimFault

	DevicePath string `xml:"devicePath,omitempty"`
}

type StorageDrsCannotMoveDiskInMultiWriterMode struct {
	*VimFault
}

type StorageDrsCannotMoveFTVm struct {
	*VimFault
}

type StorageDrsCannotMoveIndependentDisk struct {
	*VimFault
}

type StorageDrsCannotMoveManuallyPlacedSwapFile struct {
	*VimFault
}

type StorageDrsCannotMoveManuallyPlacedVm struct {
	*VimFault
}

type StorageDrsCannotMoveSharedDisk struct {
	*VimFault
}

type StorageDrsCannotMoveTemplate struct {
	*VimFault
}

type StorageDrsCannotMoveVmInUserFolder struct {
	*VimFault
}

type StorageDrsCannotMoveVmWithMountedCDROM struct {
	*VimFault
}

type StorageDrsCannotMoveVmWithNoFilesInLayout struct {
	*VimFault
}

type StorageDrsDatacentersCannotShareDatastore struct {
	*VimFault
}

type StorageDrsDisabledOnVm struct {
	*VimFault
}

type StorageDrsIolbDisabledInternally struct {
	*VimFault
}

type StorageDrsUnableToMoveFiles struct {
	*VimFault
}

type StorageVMotionNotSupported struct {
	*MigrationFeatureNotSupported
}

type StorageVmotionIncompatible struct {
	*VirtualHardwareCompatibilityIssue

	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
}

type SuspendedRelocateNotSupported struct {
	*MigrationFault
}

type SwapDatastoreNotWritableOnHost struct {
	*DatastoreNotWritableOnHost
}

type SwapDatastoreUnset struct {
	*VimFault
}

type SwapPlacementOverrideNotSupported struct {
	*InvalidVmConfig
}

type SwitchIpUnset struct {
	*DvsFault
}

type SwitchNotInUpgradeMode struct {
	*DvsFault
}

type TaskInProgress struct {
	*VimFault

	Task *ManagedObjectReference `xml:"task,omitempty"`
}

type ThirdPartyLicenseAssignmentFailed struct {
	*RuntimeFault

	Host   *ManagedObjectReference `xml:"host,omitempty"`
	Module string                  `xml:"module,omitempty"`
	Reason string                  `xml:"reason,omitempty"`
}

type Timedout struct {
	*VimFault
}

type TooManyConcurrentNativeClones struct {
	*FileFault
}

type TooManyConsecutiveOverrides struct {
	*VimFault
}

type TooManyDevices struct {
	*InvalidVmConfig
}

type TooManyDisksOnLegacyHost struct {
	*MigrationFault

	DiskCount     int32 `xml:"diskCount,omitempty"`
	TimeoutDanger bool  `xml:"timeoutDanger,omitempty"`
}

type TooManyGuestLogons struct {
	*GuestOperationsFault
}

type TooManyHosts struct {
	*HostConnectFault
}

type TooManyNativeCloneLevels struct {
	*FileFault
}

type TooManyNativeClonesOnFile struct {
	*FileFault
}

type TooManySnapshotLevels struct {
	*SnapshotFault
}

type ToolsAlreadyUpgraded struct {
	*VmToolsUpgradeFault
}

type ToolsAutoUpgradeNotSupported struct {
	*VmToolsUpgradeFault
}

type ToolsImageCopyFailed struct {
	*VmToolsUpgradeFault
}

type ToolsImageNotAvailable struct {
	*VmToolsUpgradeFault
}

type ToolsImageSignatureCheckFailed struct {
	*VmToolsUpgradeFault
}

type ToolsInstallationInProgress struct {
	*MigrationFault
}

type ToolsUnavailable struct {
	*VimFault
}

type ToolsUpgradeCancelled struct {
	*VmToolsUpgradeFault
}

type UnSupportedDatastoreForVFlash struct {
	*UnsupportedDatastore

	DatastoreName string `xml:"datastoreName,omitempty"`
	Type_         string `xml:"type,omitempty"`
}

type UncommittedUndoableDisk struct {
	*MigrationFault
}

type UnconfiguredPropertyValue struct {
	*InvalidPropertyValue
}

type UncustomizableGuest struct {
	*CustomizationFault

	UncustomizableGuestOS string `xml:"uncustomizableGuestOS,omitempty"`
}

type UnexpectedCustomizationFault struct {
	*CustomizationFault
}

type UnrecognizedHost struct {
	*VimFault

	HostName string `xml:"hostName,omitempty"`
}

type UnsharedSwapVMotionNotSupported struct {
	*MigrationFeatureNotSupported
}

type UnsupportedDatastore struct {
	*VmConfigFault

	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
}

type UnsupportedGuest struct {
	*InvalidVmConfig

	UnsupportedGuestOS string `xml:"unsupportedGuestOS,omitempty"`
}

type UnsupportedVimApiVersion struct {
	*VimFault

	Version string `xml:"version,omitempty"`
}

type UnsupportedVmxLocation struct {
	*VmConfigFault
}

type UnusedVirtualDiskBlocksNotScrubbed struct {
	*DeviceBackingNotSupported
}

type UserNotFound struct {
	*VimFault

	Principal  string `xml:"principal,omitempty"`
	Unresolved bool   `xml:"unresolved,omitempty"`
}

type VAppConfigFault struct {
	*VimFault
}

type VAppNotRunning struct {
	*VmConfigFault
}

type VAppOperationInProgress struct {
	*RuntimeFault
}

type VAppPropertyFault struct {
	*VmConfigFault

	Id       string `xml:"id,omitempty"`
	Category string `xml:"category,omitempty"`
	Label    string `xml:"label,omitempty"`
	Type_    string `xml:"type,omitempty"`
	Value    string `xml:"value,omitempty"`
}

type VAppTaskInProgress struct {
	*TaskInProgress
}

type VFlashModuleNotSupported struct {
	*VmConfigFault

	VmName     string `xml:"vmName,omitempty"`
	ModuleName string `xml:"moduleName,omitempty"`
	Reason     string `xml:"reason,omitempty"`
	HostName   string `xml:"hostName,omitempty"`
}

type VFlashModuleVersionIncompatible struct {
	*VimFault

	ModuleName             string `xml:"moduleName,omitempty"`
	VmRequestModuleVersion string `xml:"vmRequestModuleVersion,omitempty"`
	HostMinSupportedVerson string `xml:"hostMinSupportedVerson,omitempty"`
	HostModuleVersion      string `xml:"hostModuleVersion,omitempty"`
}

type VMINotSupported struct {
	*DeviceNotSupported
}

type VMOnConflictDVPort struct {
	*CannotAccessNetwork
}

type VMOnVirtualIntranet struct {
	*CannotAccessNetwork
}

type VMotionAcrossNetworkNotSupported struct {
	*MigrationFeatureNotSupported
}

type VMotionInterfaceIssue struct {
	*MigrationFault

	AtSourceHost     bool                    `xml:"atSourceHost,omitempty"`
	FailedHost       string                  `xml:"failedHost,omitempty"`
	FailedHostEntity *ManagedObjectReference `xml:"failedHostEntity,omitempty"`
}

type VMotionLinkCapacityLow struct {
	*VMotionInterfaceIssue

	Network string `xml:"network,omitempty"`
}

type VMotionLinkDown struct {
	*VMotionInterfaceIssue

	Network string `xml:"network,omitempty"`
}

type VMotionNotConfigured struct {
	*VMotionInterfaceIssue
}

type VMotionNotLicensed struct {
	*VMotionInterfaceIssue
}

type VMotionNotSupported struct {
	*VMotionInterfaceIssue
}

type VMotionProtocolIncompatible struct {
	*MigrationFault
}

type VimFault struct {
	*MethodFault
}

type VirtualDiskBlocksNotFullyProvisioned struct {
	*DeviceBackingNotSupported
}

type VirtualDiskModeNotSupported struct {
	*DeviceNotSupported

	Mode string `xml:"mode,omitempty"`
}

type VirtualEthernetCardNotSupported struct {
	*DeviceNotSupported
}

type VirtualHardwareCompatibilityIssue struct {
	*VmConfigFault
}

type VirtualHardwareVersionNotSupported struct {
	*VirtualHardwareCompatibilityIssue

	HostName string                  `xml:"hostName,omitempty"`
	Host     *ManagedObjectReference `xml:"host,omitempty"`
}

type VmAlreadyExistsInDatacenter struct {
	*InvalidFolder

	Host     *ManagedObjectReference   `xml:"host,omitempty"`
	Hostname string                    `xml:"hostname,omitempty"`
	Vm       []*ManagedObjectReference `xml:"vm,omitempty"`
}

type VmConfigFault struct {
	*VimFault
}

type VmConfigIncompatibleForFaultTolerance struct {
	*VmConfigFault

	Fault *LocalizedMethodFault `xml:"fault,omitempty"`
}

type VmConfigIncompatibleForRecordReplay struct {
	*VmConfigFault

	Fault *LocalizedMethodFault `xml:"fault,omitempty"`
}

type VmFaultToleranceConfigIssue struct {
	*VmFaultToleranceIssue

	Reason     string                  `xml:"reason,omitempty"`
	EntityName string                  `xml:"entityName,omitempty"`
	Entity     *ManagedObjectReference `xml:"entity,omitempty"`
}

type VmFaultToleranceConfigIssueWrapper struct {
	*VmFaultToleranceIssue

	EntityName string                  `xml:"entityName,omitempty"`
	Entity     *ManagedObjectReference `xml:"entity,omitempty"`
	Error      *LocalizedMethodFault   `xml:"error,omitempty"`
}

type VmFaultToleranceInvalidFileBacking struct {
	*VmFaultToleranceIssue

	BackingType     string `xml:"backingType,omitempty"`
	BackingFilename string `xml:"backingFilename,omitempty"`
}

type VmFaultToleranceIssue struct {
	*VimFault
}

type VmFaultToleranceOpIssuesList struct {
	*VmFaultToleranceIssue

	Errors   []*LocalizedMethodFault `xml:"errors,omitempty"`
	Warnings []*LocalizedMethodFault `xml:"warnings,omitempty"`
}

type VmFaultToleranceTooManyVMsOnHost struct {
	*InsufficientResourcesFault

	HostName    string `xml:"hostName,omitempty"`
	MaxNumFtVms int32  `xml:"maxNumFtVms,omitempty"`
}

type VmHostAffinityRuleViolation struct {
	*VmConfigFault

	VmName   string `xml:"vmName,omitempty"`
	HostName string `xml:"hostName,omitempty"`
}

type VmLimitLicense struct {
	*NotEnoughLicenses

	Limit int32 `xml:"limit,omitempty"`
}

type VmMetadataManagerFault struct {
	*VimFault
}

type VmMonitorIncompatibleForFaultTolerance struct {
	*VimFault
}

type VmPowerOnDisabled struct {
	*InvalidState
}

type VmToolsUpgradeFault struct {
	*VimFault
}

type VmValidateMaxDevice struct {
	*VimFault

	Device string `xml:"device,omitempty"`
	Max    int32  `xml:"max,omitempty"`
	Count  int32  `xml:"count,omitempty"`
}

type VmWwnConflict struct {
	*InvalidVmConfig

	Vm   *ManagedObjectReference `xml:"vm,omitempty"`
	Host *ManagedObjectReference `xml:"host,omitempty"`
	Name string                  `xml:"name,omitempty"`
	Wwn  int64                   `xml:"wwn,omitempty"`
}

type VmfsAlreadyMounted struct {
	*VmfsMountFault
}

type VmfsAmbiguousMount struct {
	*VmfsMountFault
}

type VmfsMountFault struct {
	*HostConfigFault

	Uuid string `xml:"uuid,omitempty"`
}

type VmotionInterfaceNotEnabled struct {
	*HostPowerOpFailed
}

type VolumeEditorError struct {
	*CustomizationFault
}

type VramLimitLicense struct {
	*NotEnoughLicenses

	Limit int32 `xml:"limit,omitempty"`
}

type VsanClusterUuidMismatch struct {
	*CannotMoveVsanEnabledHost

	HostClusterUuid        string `xml:"hostClusterUuid,omitempty"`
	DestinationClusterUuid string `xml:"destinationClusterUuid,omitempty"`
}

type VsanDiskFault struct {
	*VsanFault

	Device string `xml:"device,omitempty"`
}

type VsanFault struct {
	*VimFault
}

type VspanDestPortConflict struct {
	*DvsFault

	VspanSessionKey1 string `xml:"vspanSessionKey1,omitempty"`
	VspanSessionKey2 string `xml:"vspanSessionKey2,omitempty"`
	PortKey          string `xml:"portKey,omitempty"`
}

type VspanPortConflict struct {
	*DvsFault

	VspanSessionKey1 string `xml:"vspanSessionKey1,omitempty"`
	VspanSessionKey2 string `xml:"vspanSessionKey2,omitempty"`
	PortKey          string `xml:"portKey,omitempty"`
}

type VspanPortMoveFault struct {
	*DvsFault

	SrcPortgroupName  string `xml:"srcPortgroupName,omitempty"`
	DestPortgroupName string `xml:"destPortgroupName,omitempty"`
	PortKey           string `xml:"portKey,omitempty"`
}

type VspanPortPromiscChangeFault struct {
	*DvsFault

	PortKey string `xml:"portKey,omitempty"`
}

type VspanPortgroupPromiscChangeFault struct {
	*DvsFault

	PortgroupName string `xml:"portgroupName,omitempty"`
}

type VspanPortgroupTypeChangeFault struct {
	*DvsFault

	PortgroupName string `xml:"portgroupName,omitempty"`
}

type VspanPromiscuousPortNotSupported struct {
	*DvsFault

	VspanSessionKey string `xml:"vspanSessionKey,omitempty"`
	PortKey         string `xml:"portKey,omitempty"`
}

type VspanSameSessionPortConflict struct {
	*DvsFault

	VspanSessionKey string `xml:"vspanSessionKey,omitempty"`
	PortKey         string `xml:"portKey,omitempty"`
}

type WakeOnLanNotSupported struct {
	*VirtualHardwareCompatibilityIssue
}

type WakeOnLanNotSupportedByVmotionNIC struct {
	*HostPowerOpFailed
}

type WillLoseHAProtection struct {
	*MigrationFault

	Resolution string `xml:"resolution,omitempty"`
}

type WillModifyConfigCpuRequirements struct {
	*MigrationFault
}

type WillResetSnapshotDirectory struct {
	*MigrationFault
}

type WipeDiskFault struct {
	*VimFault
}

type HostActiveDirectoryInfo struct {
	*HostDirectoryStoreInfo

	JoinedDomain           string   `xml:"joinedDomain,omitempty"`
	TrustedDomain          []string `xml:"trustedDomain,omitempty"`
	DomainMembershipStatus string   `xml:"domainMembershipStatus,omitempty"`
}

type HostActiveDirectorySpec struct {
	*DynamicData

	DomainName string `xml:"domainName,omitempty"`
	UserName   string `xml:"userName,omitempty"`
	Password   string `xml:"password,omitempty"`
	CamServer  string `xml:"camServer,omitempty"`
	Thumbprint string `xml:"thumbprint,omitempty"`
}

type HostActiveDirectory struct {
	*DynamicData

	ChangeOperation string                   `xml:"changeOperation,omitempty"`
	Spec            *HostActiveDirectorySpec `xml:"spec,omitempty"`
}

type ArrayOfHostActiveDirectory struct {
	HostActiveDirectory []*HostActiveDirectory `xml:"HostActiveDirectory,omitempty"`
}

type HostAuthenticationManagerInfo struct {
	*DynamicData

	AuthConfig []*HostAuthenticationStoreInfo `xml:"authConfig,omitempty"`
}

type HostAuthenticationStoreInfo struct {
	*DynamicData

	Enabled bool `xml:"enabled,omitempty"`
}

type ArrayOfHostAuthenticationStoreInfo struct {
	HostAuthenticationStoreInfo []*HostAuthenticationStoreInfo `xml:"HostAuthenticationStoreInfo,omitempty"`
}

type AutoStartDefaults struct {
	*DynamicData

	Enabled          bool   `xml:"enabled,omitempty"`
	StartDelay       int32  `xml:"startDelay,omitempty"`
	StopDelay        int32  `xml:"stopDelay,omitempty"`
	WaitForHeartbeat bool   `xml:"waitForHeartbeat,omitempty"`
	StopAction       string `xml:"stopAction,omitempty"`
}

type AutoStartPowerInfo struct {
	*DynamicData

	Key              *ManagedObjectReference        `xml:"key,omitempty"`
	StartOrder       int32                          `xml:"startOrder,omitempty"`
	StartDelay       int32                          `xml:"startDelay,omitempty"`
	WaitForHeartbeat *AutoStartWaitHeartbeatSetting `xml:"waitForHeartbeat,omitempty"`
	StartAction      string                         `xml:"startAction,omitempty"`
	StopDelay        int32                          `xml:"stopDelay,omitempty"`
	StopAction       string                         `xml:"stopAction,omitempty"`
}

type ArrayOfAutoStartPowerInfo struct {
	AutoStartPowerInfo []*AutoStartPowerInfo `xml:"AutoStartPowerInfo,omitempty"`
}

type HostAutoStartManagerConfig struct {
	*DynamicData

	Defaults  *AutoStartDefaults    `xml:"defaults,omitempty"`
	PowerInfo []*AutoStartPowerInfo `xml:"powerInfo,omitempty"`
}

type HostBootDeviceInfo struct {
	*DynamicData

	BootDevices          []*HostBootDevice `xml:"bootDevices,omitempty"`
	CurrentBootDeviceKey string            `xml:"currentBootDeviceKey,omitempty"`
}

type HostBootDevice struct {
	*DynamicData

	Key         string `xml:"key,omitempty"`
	Description string `xml:"description,omitempty"`
}

type ArrayOfHostBootDevice struct {
	HostBootDevice []*HostBootDevice `xml:"HostBootDevice,omitempty"`
}

type HostCacheConfigurationSpec struct {
	*DynamicData

	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
	SwapSize  int64                   `xml:"swapSize,omitempty"`
}

type HostCacheConfigurationInfo struct {
	*DynamicData

	Key      *ManagedObjectReference `xml:"key,omitempty"`
	SwapSize int64                   `xml:"swapSize,omitempty"`
}

type ArrayOfHostCacheConfigurationInfo struct {
	HostCacheConfigurationInfo []*HostCacheConfigurationInfo `xml:"HostCacheConfigurationInfo,omitempty"`
}

type HostCapability struct {
	*DynamicData

	RecursiveResourcePoolsSupported           bool             `xml:"recursiveResourcePoolsSupported,omitempty"`
	CpuMemoryResourceConfigurationSupported   bool             `xml:"cpuMemoryResourceConfigurationSupported,omitempty"`
	RebootSupported                           bool             `xml:"rebootSupported,omitempty"`
	ShutdownSupported                         bool             `xml:"shutdownSupported,omitempty"`
	VmotionSupported                          bool             `xml:"vmotionSupported,omitempty"`
	StandbySupported                          bool             `xml:"standbySupported,omitempty"`
	IpmiSupported                             bool             `xml:"ipmiSupported,omitempty"`
	MaxSupportedVMs                           int32            `xml:"maxSupportedVMs,omitempty"`
	MaxRunningVMs                             int32            `xml:"maxRunningVMs,omitempty"`
	MaxSupportedVcpus                         int32            `xml:"maxSupportedVcpus,omitempty"`
	MaxRegisteredVMs                          int32            `xml:"maxRegisteredVMs,omitempty"`
	DatastorePrincipalSupported               bool             `xml:"datastorePrincipalSupported,omitempty"`
	SanSupported                              bool             `xml:"sanSupported,omitempty"`
	NfsSupported                              bool             `xml:"nfsSupported,omitempty"`
	IscsiSupported                            bool             `xml:"iscsiSupported,omitempty"`
	VlanTaggingSupported                      bool             `xml:"vlanTaggingSupported,omitempty"`
	NicTeamingSupported                       bool             `xml:"nicTeamingSupported,omitempty"`
	HighGuestMemSupported                     bool             `xml:"highGuestMemSupported,omitempty"`
	MaintenanceModeSupported                  bool             `xml:"maintenanceModeSupported,omitempty"`
	SuspendedRelocateSupported                bool             `xml:"suspendedRelocateSupported,omitempty"`
	RestrictedSnapshotRelocateSupported       bool             `xml:"restrictedSnapshotRelocateSupported,omitempty"`
	PerVmSwapFiles                            bool             `xml:"perVmSwapFiles,omitempty"`
	LocalSwapDatastoreSupported               bool             `xml:"localSwapDatastoreSupported,omitempty"`
	UnsharedSwapVMotionSupported              bool             `xml:"unsharedSwapVMotionSupported,omitempty"`
	BackgroundSnapshotsSupported              bool             `xml:"backgroundSnapshotsSupported,omitempty"`
	PreAssignedPCIUnitNumbersSupported        bool             `xml:"preAssignedPCIUnitNumbersSupported,omitempty"`
	ScreenshotSupported                       bool             `xml:"screenshotSupported,omitempty"`
	ScaledScreenshotSupported                 bool             `xml:"scaledScreenshotSupported,omitempty"`
	StorageVMotionSupported                   bool             `xml:"storageVMotionSupported,omitempty"`
	VmotionWithStorageVMotionSupported        bool             `xml:"vmotionWithStorageVMotionSupported,omitempty"`
	VmotionAcrossNetworkSupported             bool             `xml:"vmotionAcrossNetworkSupported,omitempty"`
	HbrNicSelectionSupported                  bool             `xml:"hbrNicSelectionSupported,omitempty"`
	RecordReplaySupported                     bool             `xml:"recordReplaySupported,omitempty"`
	FtSupported                               bool             `xml:"ftSupported,omitempty"`
	ReplayUnsupportedReason                   string           `xml:"replayUnsupportedReason,omitempty"`
	ReplayCompatibilityIssues                 []string         `xml:"replayCompatibilityIssues,omitempty"`
	FtCompatibilityIssues                     []string         `xml:"ftCompatibilityIssues,omitempty"`
	LoginBySSLThumbprintSupported             bool             `xml:"loginBySSLThumbprintSupported,omitempty"`
	CloneFromSnapshotSupported                bool             `xml:"cloneFromSnapshotSupported,omitempty"`
	DeltaDiskBackingsSupported                bool             `xml:"deltaDiskBackingsSupported,omitempty"`
	PerVMNetworkTrafficShapingSupported       bool             `xml:"perVMNetworkTrafficShapingSupported,omitempty"`
	TpmSupported                              bool             `xml:"tpmSupported,omitempty"`
	SupportedCpuFeature                       []*HostCpuIdInfo `xml:"supportedCpuFeature,omitempty"`
	VirtualExecUsageSupported                 bool             `xml:"virtualExecUsageSupported,omitempty"`
	StorageIORMSupported                      bool             `xml:"storageIORMSupported,omitempty"`
	VmDirectPathGen2Supported                 bool             `xml:"vmDirectPathGen2Supported,omitempty"`
	VmDirectPathGen2UnsupportedReason         []string         `xml:"vmDirectPathGen2UnsupportedReason,omitempty"`
	VmDirectPathGen2UnsupportedReasonExtended string           `xml:"vmDirectPathGen2UnsupportedReasonExtended,omitempty"`
	SupportedVmfsMajorVersion                 []int32          `xml:"supportedVmfsMajorVersion,omitempty"`
	VStorageCapable                           bool             `xml:"vStorageCapable,omitempty"`
	SnapshotRelayoutSupported                 bool             `xml:"snapshotRelayoutSupported,omitempty"`
	FirewallIpRulesSupported                  bool             `xml:"firewallIpRulesSupported,omitempty"`
	ServicePackageInfoSupported               bool             `xml:"servicePackageInfoSupported,omitempty"`
	MaxHostRunningVms                         int32            `xml:"maxHostRunningVms,omitempty"`
	MaxHostSupportedVcpus                     int32            `xml:"maxHostSupportedVcpus,omitempty"`
	VmfsDatastoreMountCapable                 bool             `xml:"vmfsDatastoreMountCapable,omitempty"`
	EightPlusHostVmfsSharedAccessSupported    bool             `xml:"eightPlusHostVmfsSharedAccessSupported,omitempty"`
	NestedHVSupported                         bool             `xml:"nestedHVSupported,omitempty"`
	VPMCSupported                             bool             `xml:"vPMCSupported,omitempty"`
	InterVMCommunicationThroughVMCISupported  bool             `xml:"interVMCommunicationThroughVMCISupported,omitempty"`
	ScheduledHardwareUpgradeSupported         bool             `xml:"scheduledHardwareUpgradeSupported,omitempty"`
	FeatureCapabilitiesSupported              bool             `xml:"featureCapabilitiesSupported,omitempty"`
	LatencySensitivitySupported               bool             `xml:"latencySensitivitySupported,omitempty"`
	StoragePolicySupported                    bool             `xml:"storagePolicySupported,omitempty"`
	Accel3dSupported                          bool             `xml:"accel3dSupported,omitempty"`
	ReliableMemoryAware                       bool             `xml:"reliableMemoryAware,omitempty"`
	MultipleNetworkStackInstanceSupported     bool             `xml:"multipleNetworkStackInstanceSupported,omitempty"`
	VsanSupported                             bool             `xml:"vsanSupported,omitempty"`
	VFlashSupported                           bool             `xml:"vFlashSupported,omitempty"`
}

type HostConfigChange struct {
	*DynamicData
}

type HostConfigInfo struct {
	*DynamicData

	Host                      *ManagedObjectReference              `xml:"host,omitempty"`
	Product                   *AboutInfo                           `xml:"product,omitempty"`
	HyperThread               *HostHyperThreadScheduleInfo         `xml:"hyperThread,omitempty"`
	ConsoleReservation        *ServiceConsoleReservationInfo       `xml:"consoleReservation,omitempty"`
	VirtualMachineReservation *VirtualMachineMemoryReservationInfo `xml:"virtualMachineReservation,omitempty"`
	StorageDevice             *HostStorageDeviceInfo               `xml:"storageDevice,omitempty"`
	MultipathState            *HostMultipathStateInfo              `xml:"multipathState,omitempty"`
	FileSystemVolume          *HostFileSystemVolumeInfo            `xml:"fileSystemVolume,omitempty"`
	SystemFile                []string                             `xml:"systemFile,omitempty"`
	Network                   *HostNetworkInfo                     `xml:"network,omitempty"`
	Vmotion                   *HostVMotionInfo                     `xml:"vmotion,omitempty"`
	VirtualNicManagerInfo     *HostVirtualNicManagerInfo           `xml:"virtualNicManagerInfo,omitempty"`
	Capabilities              *HostNetCapabilities                 `xml:"capabilities,omitempty"`
	DatastoreCapabilities     *HostDatastoreSystemCapabilities     `xml:"datastoreCapabilities,omitempty"`
	OffloadCapabilities       *HostNetOffloadCapabilities          `xml:"offloadCapabilities,omitempty"`
	Service                   *HostServiceInfo                     `xml:"service,omitempty"`
	Firewall                  *HostFirewallInfo                    `xml:"firewall,omitempty"`
	AutoStart                 *HostAutoStartManagerConfig          `xml:"autoStart,omitempty"`
	ActiveDiagnosticPartition *HostDiagnosticPartition             `xml:"activeDiagnosticPartition,omitempty"`
	Option                    []*OptionValue                       `xml:"option,omitempty"`
	OptionDef                 []*OptionDef                         `xml:"optionDef,omitempty"`
	DatastorePrincipal        string                               `xml:"datastorePrincipal,omitempty"`
	LocalSwapDatastore        *ManagedObjectReference              `xml:"localSwapDatastore,omitempty"`
	SystemSwapConfiguration   *HostSystemSwapConfiguration         `xml:"systemSwapConfiguration,omitempty"`
	SystemResources           *HostSystemResourceInfo              `xml:"systemResources,omitempty"`
	DateTimeInfo              *HostDateTimeInfo                    `xml:"dateTimeInfo,omitempty"`
	Flags                     *HostFlagInfo                        `xml:"flags,omitempty"`
	AdminDisabled             bool                                 `xml:"adminDisabled,omitempty"`
	Ipmi                      *HostIpmiInfo                        `xml:"ipmi,omitempty"`
	SslThumbprintInfo         *HostSslThumbprintInfo               `xml:"sslThumbprintInfo,omitempty"`
	SslThumbprintData         []*HostSslThumbprintInfo             `xml:"sslThumbprintData,omitempty"`
	Certificate               []int8                               `xml:"certificate,omitempty"`
	PciPassthruInfo           []*HostPciPassthruInfo               `xml:"pciPassthruInfo,omitempty"`
	AuthenticationManagerInfo *HostAuthenticationManagerInfo       `xml:"authenticationManagerInfo,omitempty"`
	FeatureVersion            []*HostFeatureVersionInfo            `xml:"featureVersion,omitempty"`
	PowerSystemCapability     *PowerSystemCapability               `xml:"powerSystemCapability,omitempty"`
	PowerSystemInfo           *PowerSystemInfo                     `xml:"powerSystemInfo,omitempty"`
	CacheConfigurationInfo    []*HostCacheConfigurationInfo        `xml:"cacheConfigurationInfo,omitempty"`
	WakeOnLanCapable          bool                                 `xml:"wakeOnLanCapable,omitempty"`
	FeatureCapability         []*HostFeatureCapability             `xml:"featureCapability,omitempty"`
	MaskedFeatureCapability   []*HostFeatureCapability             `xml:"maskedFeatureCapability,omitempty"`
	VFlashConfigInfo          *HostVFlashManagerVFlashConfigInfo   `xml:"vFlashConfigInfo,omitempty"`
	VsanHostConfig            *VsanHostConfigInfo                  `xml:"vsanHostConfig,omitempty"`
	GraphicsInfo              []*HostGraphicsInfo                  `xml:"graphicsInfo,omitempty"`
}

type HostConfigManager struct {
	*DynamicData

	CpuScheduler              *ManagedObjectReference `xml:"cpuScheduler,omitempty"`
	DatastoreSystem           *ManagedObjectReference `xml:"datastoreSystem,omitempty"`
	MemoryManager             *ManagedObjectReference `xml:"memoryManager,omitempty"`
	StorageSystem             *ManagedObjectReference `xml:"storageSystem,omitempty"`
	NetworkSystem             *ManagedObjectReference `xml:"networkSystem,omitempty"`
	VmotionSystem             *ManagedObjectReference `xml:"vmotionSystem,omitempty"`
	VirtualNicManager         *ManagedObjectReference `xml:"virtualNicManager,omitempty"`
	ServiceSystem             *ManagedObjectReference `xml:"serviceSystem,omitempty"`
	FirewallSystem            *ManagedObjectReference `xml:"firewallSystem,omitempty"`
	AdvancedOption            *ManagedObjectReference `xml:"advancedOption,omitempty"`
	DiagnosticSystem          *ManagedObjectReference `xml:"diagnosticSystem,omitempty"`
	AutoStartManager          *ManagedObjectReference `xml:"autoStartManager,omitempty"`
	SnmpSystem                *ManagedObjectReference `xml:"snmpSystem,omitempty"`
	DateTimeSystem            *ManagedObjectReference `xml:"dateTimeSystem,omitempty"`
	PatchManager              *ManagedObjectReference `xml:"patchManager,omitempty"`
	ImageConfigManager        *ManagedObjectReference `xml:"imageConfigManager,omitempty"`
	BootDeviceSystem          *ManagedObjectReference `xml:"bootDeviceSystem,omitempty"`
	FirmwareSystem            *ManagedObjectReference `xml:"firmwareSystem,omitempty"`
	HealthStatusSystem        *ManagedObjectReference `xml:"healthStatusSystem,omitempty"`
	PciPassthruSystem         *ManagedObjectReference `xml:"pciPassthruSystem,omitempty"`
	LicenseManager            *ManagedObjectReference `xml:"licenseManager,omitempty"`
	KernelModuleSystem        *ManagedObjectReference `xml:"kernelModuleSystem,omitempty"`
	AuthenticationManager     *ManagedObjectReference `xml:"authenticationManager,omitempty"`
	PowerSystem               *ManagedObjectReference `xml:"powerSystem,omitempty"`
	CacheConfigurationManager *ManagedObjectReference `xml:"cacheConfigurationManager,omitempty"`
	EsxAgentHostManager       *ManagedObjectReference `xml:"esxAgentHostManager,omitempty"`
	IscsiManager              *ManagedObjectReference `xml:"iscsiManager,omitempty"`
	VFlashManager             *ManagedObjectReference `xml:"vFlashManager,omitempty"`
	VsanSystem                *ManagedObjectReference `xml:"vsanSystem,omitempty"`
	GraphicsManager           *ManagedObjectReference `xml:"graphicsManager,omitempty"`
	VsanInternalSystem        *ManagedObjectReference `xml:"vsanInternalSystem,omitempty"`
}

type HostConfigSpec struct {
	*DynamicData

	NasDatastore             []*HostNasVolumeConfig                   `xml:"nasDatastore,omitempty"`
	Network                  *HostNetworkConfig                       `xml:"network,omitempty"`
	NicTypeSelection         []*HostVirtualNicManagerNicTypeSelection `xml:"nicTypeSelection,omitempty"`
	Service                  []*HostServiceConfig                     `xml:"service,omitempty"`
	Firewall                 *HostFirewallConfig                      `xml:"firewall,omitempty"`
	Option                   []*OptionValue                           `xml:"option,omitempty"`
	DatastorePrincipal       string                                   `xml:"datastorePrincipal,omitempty"`
	DatastorePrincipalPasswd string                                   `xml:"datastorePrincipalPasswd,omitempty"`
	Datetime                 *HostDateTimeConfig                      `xml:"datetime,omitempty"`
	StorageDevice            *HostStorageDeviceInfo                   `xml:"storageDevice,omitempty"`
	License                  *HostLicenseSpec                         `xml:"license,omitempty"`
	Security                 *HostSecuritySpec                        `xml:"security,omitempty"`
	UserAccount              []*HostAccountSpec                       `xml:"userAccount,omitempty"`
	UsergroupAccount         []*HostAccountSpec                       `xml:"usergroupAccount,omitempty"`
	Memory                   *HostMemorySpec                          `xml:"memory,omitempty"`
	ActiveDirectory          []*HostActiveDirectory                   `xml:"activeDirectory,omitempty"`
	GenericConfig            []*KeyAnyValue                           `xml:"genericConfig,omitempty"`
}

type HostConnectInfoNetworkInfo struct {
	*DynamicData

	Summary *NetworkSummary `xml:"summary,omitempty"`
}

type ArrayOfHostConnectInfoNetworkInfo struct {
	HostConnectInfoNetworkInfo []*HostConnectInfoNetworkInfo `xml:"HostConnectInfoNetworkInfo,omitempty"`
}

type HostNewNetworkConnectInfo struct {
	*HostConnectInfoNetworkInfo
}

type HostDatastoreConnectInfo struct {
	*DynamicData

	Summary *DatastoreSummary `xml:"summary,omitempty"`
}

type ArrayOfHostDatastoreConnectInfo struct {
	HostDatastoreConnectInfo []*HostDatastoreConnectInfo `xml:"HostDatastoreConnectInfo,omitempty"`
}

type HostDatastoreExistsConnectInfo struct {
	*HostDatastoreConnectInfo

	NewDatastoreName string `xml:"newDatastoreName,omitempty"`
}

type HostDatastoreNameConflictConnectInfo struct {
	*HostDatastoreConnectInfo

	NewDatastoreName string `xml:"newDatastoreName,omitempty"`
}

type HostLicenseConnectInfo struct {
	*DynamicData

	License    *LicenseManagerLicenseInfo    `xml:"license,omitempty"`
	Evaluation *LicenseManagerEvaluationInfo `xml:"evaluation,omitempty"`
	Resource   *HostLicensableResourceInfo   `xml:"resource,omitempty"`
}

type HostConnectInfo struct {
	*DynamicData

	ServerIp               string                        `xml:"serverIp,omitempty"`
	InDasCluster           bool                          `xml:"inDasCluster,omitempty"`
	Host                   *HostListSummary              `xml:"host,omitempty"`
	Vm                     []*VirtualMachineSummary      `xml:"vm,omitempty"`
	VimAccountNameRequired bool                          `xml:"vimAccountNameRequired,omitempty"`
	ClusterSupported       bool                          `xml:"clusterSupported,omitempty"`
	Network                []*HostConnectInfoNetworkInfo `xml:"network,omitempty"`
	Datastore              []*HostDatastoreConnectInfo   `xml:"datastore,omitempty"`
	License                *HostLicenseConnectInfo       `xml:"license,omitempty"`
}

type HostConnectSpec struct {
	*DynamicData

	HostName           string                  `xml:"hostName,omitempty"`
	Port               int32                   `xml:"port,omitempty"`
	SslThumbprint      string                  `xml:"sslThumbprint,omitempty"`
	UserName           string                  `xml:"userName,omitempty"`
	Password           string                  `xml:"password,omitempty"`
	VmFolder           *ManagedObjectReference `xml:"vmFolder,omitempty"`
	Force              bool                    `xml:"force,omitempty"`
	VimAccountName     string                  `xml:"vimAccountName,omitempty"`
	VimAccountPassword string                  `xml:"vimAccountPassword,omitempty"`
	ManagementIp       string                  `xml:"managementIp,omitempty"`
}

type HostCpuIdInfo struct {
	*DynamicData

	Level  int32  `xml:"level,omitempty"`
	Vendor string `xml:"vendor,omitempty"`
	Eax    string `xml:"eax,omitempty"`
	Ebx    string `xml:"ebx,omitempty"`
	Ecx    string `xml:"ecx,omitempty"`
	Edx    string `xml:"edx,omitempty"`
}

type ArrayOfHostCpuIdInfo struct {
	HostCpuIdInfo []*HostCpuIdInfo `xml:"HostCpuIdInfo,omitempty"`
}

type HostHyperThreadScheduleInfo struct {
	*DynamicData

	Available bool `xml:"available,omitempty"`
	Active    bool `xml:"active,omitempty"`
	Config    bool `xml:"config,omitempty"`
}

type FileQueryFlags struct {
	*DynamicData

	FileType     bool `xml:"fileType,omitempty"`
	FileSize     bool `xml:"fileSize,omitempty"`
	Modification bool `xml:"modification,omitempty"`
	FileOwner    bool `xml:"fileOwner,omitempty"`
}

type FileInfo struct {
	*DynamicData

	Path         string    `xml:"path,omitempty"`
	FileSize     int64     `xml:"fileSize,omitempty"`
	Modification time.Time `xml:"modification,omitempty"`
	Owner        string    `xml:"owner,omitempty"`
}

type ArrayOfFileInfo struct {
	FileInfo []*FileInfo `xml:"FileInfo,omitempty"`
}

type FileQuery struct {
	*DynamicData
}

type ArrayOfFileQuery struct {
	FileQuery []*FileQuery `xml:"FileQuery,omitempty"`
}

type VmConfigFileQueryFilter struct {
	*DynamicData

	MatchConfigVersion []int32 `xml:"matchConfigVersion,omitempty"`
}

type VmConfigFileQueryFlags struct {
	*DynamicData

	ConfigVersion bool `xml:"configVersion,omitempty"`
}

type VmConfigFileQuery struct {
	*FileQuery

	Filter  *VmConfigFileQueryFilter `xml:"filter,omitempty"`
	Details *VmConfigFileQueryFlags  `xml:"details,omitempty"`
}

type TemplateConfigFileQuery struct {
	*VmConfigFileQuery
}

type VmDiskFileQueryFilter struct {
	*DynamicData

	DiskType             []string `xml:"diskType,omitempty"`
	MatchHardwareVersion []int32  `xml:"matchHardwareVersion,omitempty"`
	ControllerType       []string `xml:"controllerType,omitempty"`
	Thin                 bool     `xml:"thin,omitempty"`
}

type VmDiskFileQueryFlags struct {
	*DynamicData

	DiskType        bool `xml:"diskType,omitempty"`
	CapacityKb      bool `xml:"capacityKb,omitempty"`
	HardwareVersion bool `xml:"hardwareVersion,omitempty"`
	ControllerType  bool `xml:"controllerType,omitempty"`
	DiskExtents     bool `xml:"diskExtents,omitempty"`
	Thin            bool `xml:"thin,omitempty"`
}

type VmDiskFileQuery struct {
	*FileQuery

	Filter  *VmDiskFileQueryFilter `xml:"filter,omitempty"`
	Details *VmDiskFileQueryFlags  `xml:"details,omitempty"`
}

type FolderFileQuery struct {
	*FileQuery
}

type VmSnapshotFileQuery struct {
	*FileQuery
}

type IsoImageFileQuery struct {
	*FileQuery
}

type FloppyImageFileQuery struct {
	*FileQuery
}

type VmNvramFileQuery struct {
	*FileQuery
}

type VmLogFileQuery struct {
	*FileQuery
}

type VmConfigFileInfo struct {
	*FileInfo

	ConfigVersion int32 `xml:"configVersion,omitempty"`
}

type TemplateConfigFileInfo struct {
	*VmConfigFileInfo
}

type VmDiskFileInfo struct {
	*FileInfo

	DiskType        string   `xml:"diskType,omitempty"`
	CapacityKb      int64    `xml:"capacityKb,omitempty"`
	HardwareVersion int32    `xml:"hardwareVersion,omitempty"`
	ControllerType  string   `xml:"controllerType,omitempty"`
	DiskExtents     []string `xml:"diskExtents,omitempty"`
	Thin            bool     `xml:"thin,omitempty"`
}

type FolderFileInfo struct {
	*FileInfo
}

type VmSnapshotFileInfo struct {
	*FileInfo
}

type IsoImageFileInfo struct {
	*FileInfo
}

type FloppyImageFileInfo struct {
	*FileInfo
}

type VmNvramFileInfo struct {
	*FileInfo
}

type VmLogFileInfo struct {
	*FileInfo
}

type HostDatastoreBrowserSearchSpec struct {
	*DynamicData

	Query                 []*FileQuery    `xml:"query,omitempty"`
	Details               *FileQueryFlags `xml:"details,omitempty"`
	SearchCaseInsensitive bool            `xml:"searchCaseInsensitive,omitempty"`
	MatchPattern          []string        `xml:"matchPattern,omitempty"`
	SortFoldersFirst      bool            `xml:"sortFoldersFirst,omitempty"`
}

type HostDatastoreBrowserSearchResults struct {
	*DynamicData

	Datastore  *ManagedObjectReference `xml:"datastore,omitempty"`
	FolderPath string                  `xml:"folderPath,omitempty"`
	File       []*FileInfo             `xml:"file,omitempty"`
}

type ArrayOfHostDatastoreBrowserSearchResults struct {
	HostDatastoreBrowserSearchResults []*HostDatastoreBrowserSearchResults `xml:"HostDatastoreBrowserSearchResults,omitempty"`
}

type HostDatastoreSystemCapabilities struct {
	*DynamicData

	NfsMountCreationRequired     bool `xml:"nfsMountCreationRequired,omitempty"`
	NfsMountCreationSupported    bool `xml:"nfsMountCreationSupported,omitempty"`
	LocalDatastoreSupported      bool `xml:"localDatastoreSupported,omitempty"`
	VmfsExtentExpansionSupported bool `xml:"vmfsExtentExpansionSupported,omitempty"`
}

type VmfsDatastoreInfo struct {
	*DatastoreInfo

	MaxPhysicalRDMFileSize int64           `xml:"maxPhysicalRDMFileSize,omitempty"`
	MaxVirtualRDMFileSize  int64           `xml:"maxVirtualRDMFileSize,omitempty"`
	Vmfs                   *HostVmfsVolume `xml:"vmfs,omitempty"`
}

type NasDatastoreInfo struct {
	*DatastoreInfo

	Nas *HostNasVolume `xml:"nas,omitempty"`
}

type LocalDatastoreInfo struct {
	*DatastoreInfo

	Path string `xml:"path,omitempty"`
}

type VmfsDatastoreSpec struct {
	*DynamicData

	DiskUuid string `xml:"diskUuid,omitempty"`
}

type VmfsDatastoreCreateSpec struct {
	*VmfsDatastoreSpec

	Partition *HostDiskPartitionSpec   `xml:"partition,omitempty"`
	Vmfs      *HostVmfsSpec            `xml:"vmfs,omitempty"`
	Extent    []*HostScsiDiskPartition `xml:"extent,omitempty"`
}

type VmfsDatastoreExtendSpec struct {
	*VmfsDatastoreSpec

	Partition *HostDiskPartitionSpec   `xml:"partition,omitempty"`
	Extent    []*HostScsiDiskPartition `xml:"extent,omitempty"`
}

type VmfsDatastoreExpandSpec struct {
	*VmfsDatastoreSpec

	Partition *HostDiskPartitionSpec `xml:"partition,omitempty"`
	Extent    *HostScsiDiskPartition `xml:"extent,omitempty"`
}

type VmfsDatastoreBaseOption struct {
	*DynamicData

	Layout                *HostDiskPartitionLayout `xml:"layout,omitempty"`
	PartitionFormatChange bool                     `xml:"partitionFormatChange,omitempty"`
}

type VmfsDatastoreSingleExtentOption struct {
	*VmfsDatastoreBaseOption

	VmfsExtent *HostDiskPartitionBlockRange `xml:"vmfsExtent,omitempty"`
}

type VmfsDatastoreAllExtentOption struct {
	*VmfsDatastoreSingleExtentOption
}

type VmfsDatastoreMultipleExtentOption struct {
	*VmfsDatastoreBaseOption

	VmfsExtent []*HostDiskPartitionBlockRange `xml:"vmfsExtent,omitempty"`
}

type VmfsDatastoreOption struct {
	*DynamicData

	Info *VmfsDatastoreBaseOption `xml:"info,omitempty"`
	Spec *VmfsDatastoreSpec       `xml:"spec,omitempty"`
}

type ArrayOfVmfsDatastoreOption struct {
	VmfsDatastoreOption []*VmfsDatastoreOption `xml:"VmfsDatastoreOption,omitempty"`
}

type HostDateTimeConfig struct {
	*DynamicData

	TimeZone  string         `xml:"timeZone,omitempty"`
	NtpConfig *HostNtpConfig `xml:"ntpConfig,omitempty"`
}

type HostDateTimeInfo struct {
	*DynamicData

	TimeZone  *HostDateTimeSystemTimeZone `xml:"timeZone,omitempty"`
	NtpConfig *HostNtpConfig              `xml:"ntpConfig,omitempty"`
}

type HostDateTimeSystemTimeZone struct {
	*DynamicData

	Key         string `xml:"key,omitempty"`
	Name        string `xml:"name,omitempty"`
	Description string `xml:"description,omitempty"`
	GmtOffset   int32  `xml:"gmtOffset,omitempty"`
}

type ArrayOfHostDateTimeSystemTimeZone struct {
	HostDateTimeSystemTimeZone []*HostDateTimeSystemTimeZone `xml:"HostDateTimeSystemTimeZone,omitempty"`
}

type HostDevice struct {
	*DynamicData

	DeviceName string `xml:"deviceName,omitempty"`
	DeviceType string `xml:"deviceType,omitempty"`
}

type HostDhcpServiceSpec struct {
	*DynamicData

	VirtualSwitch        string `xml:"virtualSwitch,omitempty"`
	DefaultLeaseDuration int32  `xml:"defaultLeaseDuration,omitempty"`
	LeaseBeginIp         string `xml:"leaseBeginIp,omitempty"`
	LeaseEndIp           string `xml:"leaseEndIp,omitempty"`
	MaxLeaseDuration     int32  `xml:"maxLeaseDuration,omitempty"`
	UnlimitedLease       bool   `xml:"unlimitedLease,omitempty"`
	IpSubnetAddr         string `xml:"ipSubnetAddr,omitempty"`
	IpSubnetMask         string `xml:"ipSubnetMask,omitempty"`
}

type HostDhcpServiceConfig struct {
	*DynamicData

	ChangeOperation string               `xml:"changeOperation,omitempty"`
	Key             string               `xml:"key,omitempty"`
	Spec            *HostDhcpServiceSpec `xml:"spec,omitempty"`
}

type ArrayOfHostDhcpServiceConfig struct {
	HostDhcpServiceConfig []*HostDhcpServiceConfig `xml:"HostDhcpServiceConfig,omitempty"`
}

type HostDhcpService struct {
	*DynamicData

	Key  string               `xml:"key,omitempty"`
	Spec *HostDhcpServiceSpec `xml:"spec,omitempty"`
}

type ArrayOfHostDhcpService struct {
	HostDhcpService []*HostDhcpService `xml:"HostDhcpService,omitempty"`
}

type HostDiagnosticPartitionCreateOption struct {
	*DynamicData

	StorageType    string        `xml:"storageType,omitempty"`
	DiagnosticType string        `xml:"diagnosticType,omitempty"`
	Disk           *HostScsiDisk `xml:"disk,omitempty"`
}

type ArrayOfHostDiagnosticPartitionCreateOption struct {
	HostDiagnosticPartitionCreateOption []*HostDiagnosticPartitionCreateOption `xml:"HostDiagnosticPartitionCreateOption,omitempty"`
}

type HostDiagnosticPartitionCreateSpec struct {
	*DynamicData

	StorageType    string                 `xml:"storageType,omitempty"`
	DiagnosticType string                 `xml:"diagnosticType,omitempty"`
	Id             *HostScsiDiskPartition `xml:"id,omitempty"`
	Partition      *HostDiskPartitionSpec `xml:"partition,omitempty"`
	Active         bool                   `xml:"active,omitempty"`
}

type HostDiagnosticPartitionCreateDescription struct {
	*DynamicData

	Layout   *HostDiskPartitionLayout           `xml:"layout,omitempty"`
	DiskUuid string                             `xml:"diskUuid,omitempty"`
	Spec     *HostDiagnosticPartitionCreateSpec `xml:"spec,omitempty"`
}

type HostDiagnosticPartition struct {
	*DynamicData

	StorageType    string                 `xml:"storageType,omitempty"`
	DiagnosticType string                 `xml:"diagnosticType,omitempty"`
	Slots          int32                  `xml:"slots,omitempty"`
	Id             *HostScsiDiskPartition `xml:"id,omitempty"`
}

type ArrayOfHostDiagnosticPartition struct {
	HostDiagnosticPartition []*HostDiagnosticPartition `xml:"HostDiagnosticPartition,omitempty"`
}

type HostDirectoryStoreInfo struct {
	*HostAuthenticationStoreInfo
}

type HostDiskConfigurationResult struct {
	*DynamicData

	DevicePath string                `xml:"devicePath,omitempty"`
	Success    bool                  `xml:"success,omitempty"`
	Fault      *LocalizedMethodFault `xml:"fault,omitempty"`
}

type ArrayOfHostDiskConfigurationResult struct {
	HostDiskConfigurationResult []*HostDiskConfigurationResult `xml:"HostDiskConfigurationResult,omitempty"`
}

type HostDiskDimensionsChs struct {
	*DynamicData

	Cylinder int64 `xml:"cylinder,omitempty"`
	Head     int32 `xml:"head,omitempty"`
	Sector   int32 `xml:"sector,omitempty"`
}

type HostDiskDimensionsLba struct {
	*DynamicData

	BlockSize int32 `xml:"blockSize,omitempty"`
	Block     int64 `xml:"block,omitempty"`
}

type HostDiskDimensions struct {
	*DynamicData
}

type HostDiskPartitionAttributes struct {
	*DynamicData

	Partition          int32  `xml:"partition,omitempty"`
	StartSector        int64  `xml:"startSector,omitempty"`
	EndSector          int64  `xml:"endSector,omitempty"`
	Type_              string `xml:"type,omitempty"`
	Guid               string `xml:"guid,omitempty"`
	Logical            bool   `xml:"logical,omitempty"`
	Attributes         int8   `xml:"attributes,omitempty"`
	PartitionAlignment int64  `xml:"partitionAlignment,omitempty"`
}

type ArrayOfHostDiskPartitionAttributes struct {
	HostDiskPartitionAttributes []*HostDiskPartitionAttributes `xml:"HostDiskPartitionAttributes,omitempty"`
}

type HostDiskPartitionBlockRange struct {
	*DynamicData

	Partition int32                  `xml:"partition,omitempty"`
	Type_     string                 `xml:"type,omitempty"`
	Start     *HostDiskDimensionsLba `xml:"start,omitempty"`
	End       *HostDiskDimensionsLba `xml:"end,omitempty"`
}

type ArrayOfHostDiskPartitionBlockRange struct {
	HostDiskPartitionBlockRange []*HostDiskPartitionBlockRange `xml:"HostDiskPartitionBlockRange,omitempty"`
}

type HostDiskPartitionSpec struct {
	*DynamicData

	PartitionFormat string                         `xml:"partitionFormat,omitempty"`
	Chs             *HostDiskDimensionsChs         `xml:"chs,omitempty"`
	TotalSectors    int64                          `xml:"totalSectors,omitempty"`
	Partition       []*HostDiskPartitionAttributes `xml:"partition,omitempty"`
}

type HostDiskPartitionLayout struct {
	*DynamicData

	Total     *HostDiskDimensionsLba         `xml:"total,omitempty"`
	Partition []*HostDiskPartitionBlockRange `xml:"partition,omitempty"`
}

type HostDiskPartitionInfo struct {
	*DynamicData

	DeviceName string                   `xml:"deviceName,omitempty"`
	Spec       *HostDiskPartitionSpec   `xml:"spec,omitempty"`
	Layout     *HostDiskPartitionLayout `xml:"layout,omitempty"`
}

type ArrayOfHostDiskPartitionInfo struct {
	HostDiskPartitionInfo []*HostDiskPartitionInfo `xml:"HostDiskPartitionInfo,omitempty"`
}

type HostDnsConfig struct {
	*DynamicData

	Dhcp             bool     `xml:"dhcp,omitempty"`
	VirtualNicDevice string   `xml:"virtualNicDevice,omitempty"`
	HostName         string   `xml:"hostName,omitempty"`
	DomainName       string   `xml:"domainName,omitempty"`
	Address          []string `xml:"address,omitempty"`
	SearchDomain     []string `xml:"searchDomain,omitempty"`
}

type HostDnsConfigSpec struct {
	*HostDnsConfig

	VirtualNicConnection *HostVirtualNicConnection `xml:"virtualNicConnection,omitempty"`
}

type HostEsxAgentHostManagerConfigInfo struct {
	*DynamicData

	AgentVmDatastore *ManagedObjectReference `xml:"agentVmDatastore,omitempty"`
	AgentVmNetwork   *ManagedObjectReference `xml:"agentVmNetwork,omitempty"`
}

type FcoeConfigVlanRange struct {
	*DynamicData

	VlanLow  int32 `xml:"vlanLow,omitempty"`
	VlanHigh int32 `xml:"vlanHigh,omitempty"`
}

type ArrayOfFcoeConfigVlanRange struct {
	FcoeConfigVlanRange []*FcoeConfigVlanRange `xml:"FcoeConfigVlanRange,omitempty"`
}

type FcoeConfigFcoeCapabilities struct {
	*DynamicData

	PriorityClass    bool `xml:"priorityClass,omitempty"`
	SourceMacAddress bool `xml:"sourceMacAddress,omitempty"`
	VlanRange        bool `xml:"vlanRange,omitempty"`
}

type FcoeConfigFcoeSpecification struct {
	*DynamicData

	UnderlyingPnic string                 `xml:"underlyingPnic,omitempty"`
	PriorityClass  int32                  `xml:"priorityClass,omitempty"`
	SourceMac      string                 `xml:"sourceMac,omitempty"`
	VlanRange      []*FcoeConfigVlanRange `xml:"vlanRange,omitempty"`
}

type FcoeConfig struct {
	*DynamicData

	PriorityClass int32                       `xml:"priorityClass,omitempty"`
	SourceMac     string                      `xml:"sourceMac,omitempty"`
	VlanRange     []*FcoeConfigVlanRange      `xml:"vlanRange,omitempty"`
	Capabilities  *FcoeConfigFcoeCapabilities `xml:"capabilities,omitempty"`
	FcoeActive    bool                        `xml:"fcoeActive,omitempty"`
}

type HostFeatureCapability struct {
	*DynamicData

	Key         string `xml:"key,omitempty"`
	FeatureName string `xml:"featureName,omitempty"`
	Value       string `xml:"value,omitempty"`
}

type ArrayOfHostFeatureCapability struct {
	HostFeatureCapability []*HostFeatureCapability `xml:"HostFeatureCapability,omitempty"`
}

type HostFeatureMask struct {
	*DynamicData

	Key         string `xml:"key,omitempty"`
	FeatureName string `xml:"featureName,omitempty"`
	Value       string `xml:"value,omitempty"`
}

type ArrayOfHostFeatureMask struct {
	HostFeatureMask []*HostFeatureMask `xml:"HostFeatureMask,omitempty"`
}

type HostFeatureVersionInfo struct {
	*DynamicData

	Key   string `xml:"key,omitempty"`
	Value string `xml:"value,omitempty"`
}

type ArrayOfHostFeatureVersionInfo struct {
	HostFeatureVersionInfo []*HostFeatureVersionInfo `xml:"HostFeatureVersionInfo,omitempty"`
}

type ModeInfo struct {
	*DynamicData

	Browse string `xml:"browse,omitempty"`
	Read   string `xml:"read,omitempty"`
	Modify string `xml:"modify,omitempty"`
	Use    string `xml:"use,omitempty"`
	Admin  string `xml:"admin,omitempty"`
	Full   string `xml:"full,omitempty"`
}

type HostFileAccess struct {
	*DynamicData

	Who  string `xml:"who,omitempty"`
	What string `xml:"what,omitempty"`
}

type HostFileSystemVolumeInfo struct {
	*DynamicData

	VolumeTypeList []string                   `xml:"volumeTypeList,omitempty"`
	MountInfo      []*HostFileSystemMountInfo `xml:"mountInfo,omitempty"`
}

type HostFileSystemMountInfo struct {
	*DynamicData

	MountInfo       *HostMountInfo        `xml:"mountInfo,omitempty"`
	Volume          *HostFileSystemVolume `xml:"volume,omitempty"`
	VStorageSupport string                `xml:"vStorageSupport,omitempty"`
}

type ArrayOfHostFileSystemMountInfo struct {
	HostFileSystemMountInfo []*HostFileSystemMountInfo `xml:"HostFileSystemMountInfo,omitempty"`
}

type HostFileSystemVolume struct {
	*DynamicData

	Type_    string `xml:"type,omitempty"`
	Name     string `xml:"name,omitempty"`
	Capacity int64  `xml:"capacity,omitempty"`
}

type HostNasVolumeSpec struct {
	*DynamicData

	RemoteHost string `xml:"remoteHost,omitempty"`
	RemotePath string `xml:"remotePath,omitempty"`
	LocalPath  string `xml:"localPath,omitempty"`
	AccessMode string `xml:"accessMode,omitempty"`
	Type_      string `xml:"type,omitempty"`
	UserName   string `xml:"userName,omitempty"`
	Password   string `xml:"password,omitempty"`
}

type HostNasVolumeConfig struct {
	*DynamicData

	ChangeOperation string             `xml:"changeOperation,omitempty"`
	Spec            *HostNasVolumeSpec `xml:"spec,omitempty"`
}

type ArrayOfHostNasVolumeConfig struct {
	HostNasVolumeConfig []*HostNasVolumeConfig `xml:"HostNasVolumeConfig,omitempty"`
}

type HostNasVolume struct {
	*HostFileSystemVolume

	RemoteHost string `xml:"remoteHost,omitempty"`
	RemotePath string `xml:"remotePath,omitempty"`
	UserName   string `xml:"userName,omitempty"`
}

type HostLocalFileSystemVolumeSpec struct {
	*DynamicData

	Device    string `xml:"device,omitempty"`
	LocalPath string `xml:"localPath,omitempty"`
}

type HostLocalFileSystemVolume struct {
	*HostFileSystemVolume

	Device string `xml:"device,omitempty"`
}

type HostVfatVolume struct {
	*HostFileSystemVolume
}

type HostFirewallConfigRuleSetConfig struct {
	*DynamicData

	RulesetId    string                     `xml:"rulesetId,omitempty"`
	Enabled      bool                       `xml:"enabled,omitempty"`
	AllowedHosts *HostFirewallRulesetIpList `xml:"allowedHosts,omitempty"`
}

type ArrayOfHostFirewallConfigRuleSetConfig struct {
	HostFirewallConfigRuleSetConfig []*HostFirewallConfigRuleSetConfig `xml:"HostFirewallConfigRuleSetConfig,omitempty"`
}

type HostFirewallConfig struct {
	*DynamicData

	Rule                  []*HostFirewallConfigRuleSetConfig `xml:"rule,omitempty"`
	DefaultBlockingPolicy *HostFirewallDefaultPolicy         `xml:"defaultBlockingPolicy,omitempty"`
}

type HostFirewallDefaultPolicy struct {
	*DynamicData

	IncomingBlocked bool `xml:"incomingBlocked,omitempty"`
	OutgoingBlocked bool `xml:"outgoingBlocked,omitempty"`
}

type HostFirewallInfo struct {
	*DynamicData

	DefaultPolicy *HostFirewallDefaultPolicy `xml:"defaultPolicy,omitempty"`
	Ruleset       []*HostFirewallRuleset     `xml:"ruleset,omitempty"`
}

type HostFlagInfo struct {
	*DynamicData

	BackgroundSnapshotsEnabled bool `xml:"backgroundSnapshotsEnabled,omitempty"`
}

type HostForceMountedInfo struct {
	*DynamicData

	Persist bool `xml:"persist,omitempty"`
	Mounted bool `xml:"mounted,omitempty"`
}

type HostGraphicsInfo struct {
	*DynamicData

	DeviceName     string                    `xml:"deviceName,omitempty"`
	VendorName     string                    `xml:"vendorName,omitempty"`
	PciId          string                    `xml:"pciId,omitempty"`
	GraphicsType   string                    `xml:"graphicsType,omitempty"`
	MemorySizeInKB int64                     `xml:"memorySizeInKB,omitempty"`
	Vm             []*ManagedObjectReference `xml:"vm,omitempty"`
}

type ArrayOfHostGraphicsInfo struct {
	HostGraphicsInfo []*HostGraphicsInfo `xml:"HostGraphicsInfo,omitempty"`
}

type HostHardwareInfo struct {
	*DynamicData

	SystemInfo             *HostSystemInfo             `xml:"systemInfo,omitempty"`
	CpuPowerManagementInfo *HostCpuPowerManagementInfo `xml:"cpuPowerManagementInfo,omitempty"`
	CpuInfo                *HostCpuInfo                `xml:"cpuInfo,omitempty"`
	CpuPkg                 []*HostCpuPackage           `xml:"cpuPkg,omitempty"`
	MemorySize             int64                       `xml:"memorySize,omitempty"`
	NumaInfo               *HostNumaInfo               `xml:"numaInfo,omitempty"`
	SmcPresent             bool                        `xml:"smcPresent,omitempty"`
	PciDevice              []*HostPciDevice            `xml:"pciDevice,omitempty"`
	CpuFeature             []*HostCpuIdInfo            `xml:"cpuFeature,omitempty"`
	BiosInfo               *HostBIOSInfo               `xml:"biosInfo,omitempty"`
	ReliableMemoryInfo     *HostReliableMemoryInfo     `xml:"reliableMemoryInfo,omitempty"`
}

type HostSystemInfo struct {
	*DynamicData

	Vendor               string                          `xml:"vendor,omitempty"`
	Model                string                          `xml:"model,omitempty"`
	Uuid                 string                          `xml:"uuid,omitempty"`
	OtherIdentifyingInfo []*HostSystemIdentificationInfo `xml:"otherIdentifyingInfo,omitempty"`
}

type HostCpuPowerManagementInfo struct {
	*DynamicData

	CurrentPolicy   string `xml:"currentPolicy,omitempty"`
	HardwareSupport string `xml:"hardwareSupport,omitempty"`
}

type HostCpuInfo struct {
	*DynamicData

	NumCpuPackages int16 `xml:"numCpuPackages,omitempty"`
	NumCpuCores    int16 `xml:"numCpuCores,omitempty"`
	NumCpuThreads  int16 `xml:"numCpuThreads,omitempty"`
	Hz             int64 `xml:"hz,omitempty"`
}

type HostCpuPackage struct {
	*DynamicData

	Index       int16            `xml:"index,omitempty"`
	Vendor      string           `xml:"vendor,omitempty"`
	Hz          int64            `xml:"hz,omitempty"`
	BusHz       int64            `xml:"busHz,omitempty"`
	Description string           `xml:"description,omitempty"`
	ThreadId    []int16          `xml:"threadId,omitempty"`
	CpuFeature  []*HostCpuIdInfo `xml:"cpuFeature,omitempty"`
}

type ArrayOfHostCpuPackage struct {
	HostCpuPackage []*HostCpuPackage `xml:"HostCpuPackage,omitempty"`
}

type HostNumaInfo struct {
	*DynamicData

	Type_    string          `xml:"type,omitempty"`
	NumNodes int32           `xml:"numNodes,omitempty"`
	NumaNode []*HostNumaNode `xml:"numaNode,omitempty"`
}

type HostNumaNode struct {
	*DynamicData

	TypeId            int8    `xml:"typeId,omitempty"`
	CpuID             []int16 `xml:"cpuID,omitempty"`
	MemoryRangeBegin  int64   `xml:"memoryRangeBegin,omitempty"`
	MemoryRangeLength int64   `xml:"memoryRangeLength,omitempty"`
}

type ArrayOfHostNumaNode struct {
	HostNumaNode []*HostNumaNode `xml:"HostNumaNode,omitempty"`
}

type HostBIOSInfo struct {
	*DynamicData

	BiosVersion string    `xml:"biosVersion,omitempty"`
	ReleaseDate time.Time `xml:"releaseDate,omitempty"`
}

type HostReliableMemoryInfo struct {
	*DynamicData

	MemorySize int64 `xml:"memorySize,omitempty"`
}

type HostHardwareElementInfo struct {
	*DynamicData

	Name   string              `xml:"name,omitempty"`
	Status *ElementDescription `xml:"status,omitempty"`
}

type ArrayOfHostHardwareElementInfo struct {
	HostHardwareElementInfo []*HostHardwareElementInfo `xml:"HostHardwareElementInfo,omitempty"`
}

type HostStorageOperationalInfo struct {
	*DynamicData

	Property string `xml:"property,omitempty"`
	Value    string `xml:"value,omitempty"`
}

type ArrayOfHostStorageOperationalInfo struct {
	HostStorageOperationalInfo []*HostStorageOperationalInfo `xml:"HostStorageOperationalInfo,omitempty"`
}

type HostStorageElementInfo struct {
	*HostHardwareElementInfo

	OperationalInfo []*HostStorageOperationalInfo `xml:"operationalInfo,omitempty"`
}

type ArrayOfHostStorageElementInfo struct {
	HostStorageElementInfo []*HostStorageElementInfo `xml:"HostStorageElementInfo,omitempty"`
}

type HostHardwareStatusInfo struct {
	*DynamicData

	MemoryStatusInfo  []*HostHardwareElementInfo `xml:"memoryStatusInfo,omitempty"`
	CpuStatusInfo     []*HostHardwareElementInfo `xml:"cpuStatusInfo,omitempty"`
	StorageStatusInfo []*HostStorageElementInfo  `xml:"storageStatusInfo,omitempty"`
}

type HealthSystemRuntime struct {
	*DynamicData

	SystemHealthInfo   *HostSystemHealthInfo   `xml:"systemHealthInfo,omitempty"`
	HardwareStatusInfo *HostHardwareStatusInfo `xml:"hardwareStatusInfo,omitempty"`
}

type HostHostBusAdapter struct {
	*DynamicData

	Key    string `xml:"key,omitempty"`
	Device string `xml:"device,omitempty"`
	Bus    int32  `xml:"bus,omitempty"`
	Status string `xml:"status,omitempty"`
	Model  string `xml:"model,omitempty"`
	Driver string `xml:"driver,omitempty"`
	Pci    string `xml:"pci,omitempty"`
}

type ArrayOfHostHostBusAdapter struct {
	HostHostBusAdapter []*HostHostBusAdapter `xml:"HostHostBusAdapter,omitempty"`
}

type HostParallelScsiHba struct {
	*HostHostBusAdapter
}

type HostBlockHba struct {
	*HostHostBusAdapter
}

type HostFibreChannelHba struct {
	*HostHostBusAdapter

	PortWorldWideName int64                 `xml:"portWorldWideName,omitempty"`
	NodeWorldWideName int64                 `xml:"nodeWorldWideName,omitempty"`
	PortType          *FibreChannelPortType `xml:"portType,omitempty"`
	Speed             int64                 `xml:"speed,omitempty"`
}

type HostInternetScsiHbaParamValue struct {
	*OptionValue

	IsInherited bool `xml:"isInherited,omitempty"`
}

type ArrayOfHostInternetScsiHbaParamValue struct {
	HostInternetScsiHbaParamValue []*HostInternetScsiHbaParamValue `xml:"HostInternetScsiHbaParamValue,omitempty"`
}

type HostInternetScsiHbaDiscoveryCapabilities struct {
	*DynamicData

	ISnsDiscoverySettable         bool `xml:"iSnsDiscoverySettable,omitempty"`
	SlpDiscoverySettable          bool `xml:"slpDiscoverySettable,omitempty"`
	StaticTargetDiscoverySettable bool `xml:"staticTargetDiscoverySettable,omitempty"`
	SendTargetsDiscoverySettable  bool `xml:"sendTargetsDiscoverySettable,omitempty"`
}

type HostInternetScsiHbaDiscoveryProperties struct {
	*DynamicData

	ISnsDiscoveryEnabled         bool   `xml:"iSnsDiscoveryEnabled,omitempty"`
	ISnsDiscoveryMethod          string `xml:"iSnsDiscoveryMethod,omitempty"`
	ISnsHost                     string `xml:"iSnsHost,omitempty"`
	SlpDiscoveryEnabled          bool   `xml:"slpDiscoveryEnabled,omitempty"`
	SlpDiscoveryMethod           string `xml:"slpDiscoveryMethod,omitempty"`
	SlpHost                      string `xml:"slpHost,omitempty"`
	StaticTargetDiscoveryEnabled bool   `xml:"staticTargetDiscoveryEnabled,omitempty"`
	SendTargetsDiscoveryEnabled  bool   `xml:"sendTargetsDiscoveryEnabled,omitempty"`
}

type HostInternetScsiHbaAuthenticationCapabilities struct {
	*DynamicData

	ChapAuthSettable         bool `xml:"chapAuthSettable,omitempty"`
	Krb5AuthSettable         bool `xml:"krb5AuthSettable,omitempty"`
	SrpAuthSettable          bool `xml:"srpAuthSettable,omitempty"`
	SpkmAuthSettable         bool `xml:"spkmAuthSettable,omitempty"`
	MutualChapSettable       bool `xml:"mutualChapSettable,omitempty"`
	TargetChapSettable       bool `xml:"targetChapSettable,omitempty"`
	TargetMutualChapSettable bool `xml:"targetMutualChapSettable,omitempty"`
}

type HostInternetScsiHbaAuthenticationProperties struct {
	*DynamicData

	ChapAuthEnabled              bool   `xml:"chapAuthEnabled,omitempty"`
	ChapName                     string `xml:"chapName,omitempty"`
	ChapSecret                   string `xml:"chapSecret,omitempty"`
	ChapAuthenticationType       string `xml:"chapAuthenticationType,omitempty"`
	ChapInherited                bool   `xml:"chapInherited,omitempty"`
	MutualChapName               string `xml:"mutualChapName,omitempty"`
	MutualChapSecret             string `xml:"mutualChapSecret,omitempty"`
	MutualChapAuthenticationType string `xml:"mutualChapAuthenticationType,omitempty"`
	MutualChapInherited          bool   `xml:"mutualChapInherited,omitempty"`
}

type HostInternetScsiHbaDigestCapabilities struct {
	*DynamicData

	HeaderDigestSettable       bool `xml:"headerDigestSettable,omitempty"`
	DataDigestSettable         bool `xml:"dataDigestSettable,omitempty"`
	TargetHeaderDigestSettable bool `xml:"targetHeaderDigestSettable,omitempty"`
	TargetDataDigestSettable   bool `xml:"targetDataDigestSettable,omitempty"`
}

type HostInternetScsiHbaDigestProperties struct {
	*DynamicData

	HeaderDigestType      string `xml:"headerDigestType,omitempty"`
	HeaderDigestInherited bool   `xml:"headerDigestInherited,omitempty"`
	DataDigestType        string `xml:"dataDigestType,omitempty"`
	DataDigestInherited   bool   `xml:"dataDigestInherited,omitempty"`
}

type HostInternetScsiHbaIPCapabilities struct {
	*DynamicData

	AddressSettable                   bool `xml:"addressSettable,omitempty"`
	IpConfigurationMethodSettable     bool `xml:"ipConfigurationMethodSettable,omitempty"`
	SubnetMaskSettable                bool `xml:"subnetMaskSettable,omitempty"`
	DefaultGatewaySettable            bool `xml:"defaultGatewaySettable,omitempty"`
	PrimaryDnsServerAddressSettable   bool `xml:"primaryDnsServerAddressSettable,omitempty"`
	AlternateDnsServerAddressSettable bool `xml:"alternateDnsServerAddressSettable,omitempty"`
	Ipv6Supported                     bool `xml:"ipv6Supported,omitempty"`
	ArpRedirectSettable               bool `xml:"arpRedirectSettable,omitempty"`
	MtuSettable                       bool `xml:"mtuSettable,omitempty"`
	HostNameAsTargetAddress           bool `xml:"hostNameAsTargetAddress,omitempty"`
	NameAliasSettable                 bool `xml:"nameAliasSettable,omitempty"`
}

type HostInternetScsiHbaIPProperties struct {
	*DynamicData

	Mac                       string `xml:"mac,omitempty"`
	Address                   string `xml:"address,omitempty"`
	DhcpConfigurationEnabled  bool   `xml:"dhcpConfigurationEnabled,omitempty"`
	SubnetMask                string `xml:"subnetMask,omitempty"`
	DefaultGateway            string `xml:"defaultGateway,omitempty"`
	PrimaryDnsServerAddress   string `xml:"primaryDnsServerAddress,omitempty"`
	AlternateDnsServerAddress string `xml:"alternateDnsServerAddress,omitempty"`
	Ipv6Address               string `xml:"ipv6Address,omitempty"`
	Ipv6SubnetMask            string `xml:"ipv6SubnetMask,omitempty"`
	Ipv6DefaultGateway        string `xml:"ipv6DefaultGateway,omitempty"`
	ArpRedirectEnabled        bool   `xml:"arpRedirectEnabled,omitempty"`
	Mtu                       int32  `xml:"mtu,omitempty"`
	JumboFramesEnabled        bool   `xml:"jumboFramesEnabled,omitempty"`
}

type HostInternetScsiHbaSendTarget struct {
	*DynamicData

	Address                  string                                       `xml:"address,omitempty"`
	Port                     int32                                        `xml:"port,omitempty"`
	AuthenticationProperties *HostInternetScsiHbaAuthenticationProperties `xml:"authenticationProperties,omitempty"`
	DigestProperties         *HostInternetScsiHbaDigestProperties         `xml:"digestProperties,omitempty"`
	SupportedAdvancedOptions []*OptionDef                                 `xml:"supportedAdvancedOptions,omitempty"`
	AdvancedOptions          []*HostInternetScsiHbaParamValue             `xml:"advancedOptions,omitempty"`
	Parent                   string                                       `xml:"parent,omitempty"`
}

type ArrayOfHostInternetScsiHbaSendTarget struct {
	HostInternetScsiHbaSendTarget []*HostInternetScsiHbaSendTarget `xml:"HostInternetScsiHbaSendTarget,omitempty"`
}

type HostInternetScsiHbaStaticTarget struct {
	*DynamicData

	Address                  string                                       `xml:"address,omitempty"`
	Port                     int32                                        `xml:"port,omitempty"`
	IScsiName                string                                       `xml:"iScsiName,omitempty"`
	DiscoveryMethod          string                                       `xml:"discoveryMethod,omitempty"`
	AuthenticationProperties *HostInternetScsiHbaAuthenticationProperties `xml:"authenticationProperties,omitempty"`
	DigestProperties         *HostInternetScsiHbaDigestProperties         `xml:"digestProperties,omitempty"`
	SupportedAdvancedOptions []*OptionDef                                 `xml:"supportedAdvancedOptions,omitempty"`
	AdvancedOptions          []*HostInternetScsiHbaParamValue             `xml:"advancedOptions,omitempty"`
	Parent                   string                                       `xml:"parent,omitempty"`
}

type ArrayOfHostInternetScsiHbaStaticTarget struct {
	HostInternetScsiHbaStaticTarget []*HostInternetScsiHbaStaticTarget `xml:"HostInternetScsiHbaStaticTarget,omitempty"`
}

type HostInternetScsiHbaTargetSet struct {
	*DynamicData

	StaticTargets []*HostInternetScsiHbaStaticTarget `xml:"staticTargets,omitempty"`
	SendTargets   []*HostInternetScsiHbaSendTarget   `xml:"sendTargets,omitempty"`
}

type HostInternetScsiHba struct {
	*HostHostBusAdapter

	IsSoftwareBased            bool                                           `xml:"isSoftwareBased,omitempty"`
	CanBeDisabled              bool                                           `xml:"canBeDisabled,omitempty"`
	NetworkBindingSupport      *HostInternetScsiHbaNetworkBindingSupportType  `xml:"networkBindingSupport,omitempty"`
	DiscoveryCapabilities      *HostInternetScsiHbaDiscoveryCapabilities      `xml:"discoveryCapabilities,omitempty"`
	DiscoveryProperties        *HostInternetScsiHbaDiscoveryProperties        `xml:"discoveryProperties,omitempty"`
	AuthenticationCapabilities *HostInternetScsiHbaAuthenticationCapabilities `xml:"authenticationCapabilities,omitempty"`
	AuthenticationProperties   *HostInternetScsiHbaAuthenticationProperties   `xml:"authenticationProperties,omitempty"`
	DigestCapabilities         *HostInternetScsiHbaDigestCapabilities         `xml:"digestCapabilities,omitempty"`
	DigestProperties           *HostInternetScsiHbaDigestProperties           `xml:"digestProperties,omitempty"`
	IpCapabilities             *HostInternetScsiHbaIPCapabilities             `xml:"ipCapabilities,omitempty"`
	IpProperties               *HostInternetScsiHbaIPProperties               `xml:"ipProperties,omitempty"`
	SupportedAdvancedOptions   []*OptionDef                                   `xml:"supportedAdvancedOptions,omitempty"`
	AdvancedOptions            []*HostInternetScsiHbaParamValue               `xml:"advancedOptions,omitempty"`
	IScsiName                  string                                         `xml:"iScsiName,omitempty"`
	IScsiAlias                 string                                         `xml:"iScsiAlias,omitempty"`
	ConfiguredSendTarget       []*HostInternetScsiHbaSendTarget               `xml:"configuredSendTarget,omitempty"`
	ConfiguredStaticTarget     []*HostInternetScsiHbaStaticTarget             `xml:"configuredStaticTarget,omitempty"`
	MaxSpeedMb                 int32                                          `xml:"maxSpeedMb,omitempty"`
	CurrentSpeedMb             int32                                          `xml:"currentSpeedMb,omitempty"`
}

type HostFibreChannelOverEthernetHbaLinkInfo struct {
	*DynamicData

	VnportMac string `xml:"vnportMac,omitempty"`
	FcfMac    string `xml:"fcfMac,omitempty"`
	VlanId    int32  `xml:"vlanId,omitempty"`
}

type HostFibreChannelOverEthernetHba struct {
	*HostFibreChannelHba

	UnderlyingNic    string                                   `xml:"underlyingNic,omitempty"`
	LinkInfo         *HostFibreChannelOverEthernetHbaLinkInfo `xml:"linkInfo,omitempty"`
	IsSoftwareFcoe   bool                                     `xml:"isSoftwareFcoe,omitempty"`
	MarkedForRemoval bool                                     `xml:"markedForRemoval,omitempty"`
}

type HostProxySwitchSpec struct {
	*DynamicData

	Backing *DistributedVirtualSwitchHostMemberBacking `xml:"backing,omitempty"`
}

type HostProxySwitchConfig struct {
	*DynamicData

	ChangeOperation string               `xml:"changeOperation,omitempty"`
	Uuid            string               `xml:"uuid,omitempty"`
	Spec            *HostProxySwitchSpec `xml:"spec,omitempty"`
}

type ArrayOfHostProxySwitchConfig struct {
	HostProxySwitchConfig []*HostProxySwitchConfig `xml:"HostProxySwitchConfig,omitempty"`
}

type HostProxySwitchHostLagConfig struct {
	*DynamicData

	LagKey     string      `xml:"lagKey,omitempty"`
	LagName    string      `xml:"lagName,omitempty"`
	UplinkPort []*KeyValue `xml:"uplinkPort,omitempty"`
}

type ArrayOfHostProxySwitchHostLagConfig struct {
	HostProxySwitchHostLagConfig []*HostProxySwitchHostLagConfig `xml:"HostProxySwitchHostLagConfig,omitempty"`
}

type HostProxySwitch struct {
	*DynamicData

	DvsUuid                     string                          `xml:"dvsUuid,omitempty"`
	DvsName                     string                          `xml:"dvsName,omitempty"`
	Key                         string                          `xml:"key,omitempty"`
	NumPorts                    int32                           `xml:"numPorts,omitempty"`
	ConfigNumPorts              int32                           `xml:"configNumPorts,omitempty"`
	NumPortsAvailable           int32                           `xml:"numPortsAvailable,omitempty"`
	UplinkPort                  []*KeyValue                     `xml:"uplinkPort,omitempty"`
	Mtu                         int32                           `xml:"mtu,omitempty"`
	Pnic                        []string                        `xml:"pnic,omitempty"`
	Spec                        *HostProxySwitchSpec            `xml:"spec,omitempty"`
	HostLag                     []*HostProxySwitchHostLagConfig `xml:"hostLag,omitempty"`
	NetworkReservationSupported bool                            `xml:"networkReservationSupported,omitempty"`
}

type ArrayOfHostProxySwitch struct {
	HostProxySwitch []*HostProxySwitch `xml:"HostProxySwitch,omitempty"`
}

type HostImageProfileSummary struct {
	*DynamicData

	Name   string `xml:"name,omitempty"`
	Vendor string `xml:"vendor,omitempty"`
}

type HostIpConfigIpV6Address struct {
	*DynamicData

	IpAddress    string    `xml:"ipAddress,omitempty"`
	PrefixLength int32     `xml:"prefixLength,omitempty"`
	Origin       string    `xml:"origin,omitempty"`
	DadState     string    `xml:"dadState,omitempty"`
	Lifetime     time.Time `xml:"lifetime,omitempty"`
	Operation    string    `xml:"operation,omitempty"`
}

type ArrayOfHostIpConfigIpV6Address struct {
	HostIpConfigIpV6Address []*HostIpConfigIpV6Address `xml:"HostIpConfigIpV6Address,omitempty"`
}

type HostIpConfigIpV6AddressConfiguration struct {
	*DynamicData

	IpV6Address              []*HostIpConfigIpV6Address `xml:"ipV6Address,omitempty"`
	AutoConfigurationEnabled bool                       `xml:"autoConfigurationEnabled,omitempty"`
	DhcpV6Enabled            bool                       `xml:"dhcpV6Enabled,omitempty"`
}

type HostIpConfig struct {
	*DynamicData

	Dhcp       bool                                  `xml:"dhcp,omitempty"`
	IpAddress  string                                `xml:"ipAddress,omitempty"`
	SubnetMask string                                `xml:"subnetMask,omitempty"`
	IpV6Config *HostIpConfigIpV6AddressConfiguration `xml:"ipV6Config,omitempty"`
}

type HostIpRouteConfig struct {
	*DynamicData

	DefaultGateway     string `xml:"defaultGateway,omitempty"`
	GatewayDevice      string `xml:"gatewayDevice,omitempty"`
	IpV6DefaultGateway string `xml:"ipV6DefaultGateway,omitempty"`
	IpV6GatewayDevice  string `xml:"ipV6GatewayDevice,omitempty"`
}

type HostIpRouteConfigSpec struct {
	*HostIpRouteConfig

	GatewayDeviceConnection     *HostVirtualNicConnection `xml:"gatewayDeviceConnection,omitempty"`
	IpV6GatewayDeviceConnection *HostVirtualNicConnection `xml:"ipV6GatewayDeviceConnection,omitempty"`
}

type HostIpRouteEntry struct {
	*DynamicData

	Network      string `xml:"network,omitempty"`
	PrefixLength int32  `xml:"prefixLength,omitempty"`
	Gateway      string `xml:"gateway,omitempty"`
	DeviceName   string `xml:"deviceName,omitempty"`
}

type ArrayOfHostIpRouteEntry struct {
	HostIpRouteEntry []*HostIpRouteEntry `xml:"HostIpRouteEntry,omitempty"`
}

type HostIpRouteOp struct {
	*DynamicData

	ChangeOperation string            `xml:"changeOperation,omitempty"`
	Route           *HostIpRouteEntry `xml:"route,omitempty"`
}

type ArrayOfHostIpRouteOp struct {
	HostIpRouteOp []*HostIpRouteOp `xml:"HostIpRouteOp,omitempty"`
}

type HostIpRouteTableConfig struct {
	*DynamicData

	IpRoute   []*HostIpRouteOp `xml:"ipRoute,omitempty"`
	Ipv6Route []*HostIpRouteOp `xml:"ipv6Route,omitempty"`
}

type HostIpRouteTableInfo struct {
	*DynamicData

	IpRoute   []*HostIpRouteEntry `xml:"ipRoute,omitempty"`
	Ipv6Route []*HostIpRouteEntry `xml:"ipv6Route,omitempty"`
}

type HostIpmiInfo struct {
	*DynamicData

	BmcIpAddress  string `xml:"bmcIpAddress,omitempty"`
	BmcMacAddress string `xml:"bmcMacAddress,omitempty"`
	Login         string `xml:"login,omitempty"`
	Password      string `xml:"password,omitempty"`
}

type IscsiStatus struct {
	*DynamicData

	Reason []*LocalizedMethodFault `xml:"reason,omitempty"`
}

type IscsiPortInfo struct {
	*DynamicData

	VnicDevice       string          `xml:"vnicDevice,omitempty"`
	Vnic             *HostVirtualNic `xml:"vnic,omitempty"`
	PnicDevice       string          `xml:"pnicDevice,omitempty"`
	Pnic             *PhysicalNic    `xml:"pnic,omitempty"`
	SwitchName       string          `xml:"switchName,omitempty"`
	SwitchUuid       string          `xml:"switchUuid,omitempty"`
	PortgroupName    string          `xml:"portgroupName,omitempty"`
	PortgroupKey     string          `xml:"portgroupKey,omitempty"`
	PortKey          string          `xml:"portKey,omitempty"`
	ComplianceStatus *IscsiStatus    `xml:"complianceStatus,omitempty"`
	PathStatus       string          `xml:"pathStatus,omitempty"`
}

type ArrayOfIscsiPortInfo struct {
	IscsiPortInfo []*IscsiPortInfo `xml:"IscsiPortInfo,omitempty"`
}

type IscsiDependencyEntity struct {
	*DynamicData

	PnicDevice string `xml:"pnicDevice,omitempty"`
	VnicDevice string `xml:"vnicDevice,omitempty"`
	VmhbaName  string `xml:"vmhbaName,omitempty"`
}

type ArrayOfIscsiDependencyEntity struct {
	IscsiDependencyEntity []*IscsiDependencyEntity `xml:"IscsiDependencyEntity,omitempty"`
}

type IscsiMigrationDependency struct {
	*DynamicData

	MigrationAllowed bool                     `xml:"migrationAllowed,omitempty"`
	DisallowReason   *IscsiStatus             `xml:"disallowReason,omitempty"`
	Dependency       []*IscsiDependencyEntity `xml:"dependency,omitempty"`
}

type KernelModuleSectionInfo struct {
	*DynamicData

	Address int64 `xml:"address,omitempty"`
	Length  int32 `xml:"length,omitempty"`
}

type KernelModuleInfo struct {
	*DynamicData

	Id              int32                    `xml:"id,omitempty"`
	Name            string                   `xml:"name,omitempty"`
	Version         string                   `xml:"version,omitempty"`
	Filename        string                   `xml:"filename,omitempty"`
	OptionString    string                   `xml:"optionString,omitempty"`
	Loaded          bool                     `xml:"loaded,omitempty"`
	Enabled         bool                     `xml:"enabled,omitempty"`
	UseCount        int32                    `xml:"useCount,omitempty"`
	ReadOnlySection *KernelModuleSectionInfo `xml:"readOnlySection,omitempty"`
	WritableSection *KernelModuleSectionInfo `xml:"writableSection,omitempty"`
	TextSection     *KernelModuleSectionInfo `xml:"textSection,omitempty"`
	DataSection     *KernelModuleSectionInfo `xml:"dataSection,omitempty"`
	BssSection      *KernelModuleSectionInfo `xml:"bssSection,omitempty"`
}

type ArrayOfKernelModuleInfo struct {
	KernelModuleInfo []*KernelModuleInfo `xml:"KernelModuleInfo,omitempty"`
}

type HostLicenseSpec struct {
	*DynamicData

	Source             *LicenseSource `xml:"source,omitempty"`
	EditionKey         string         `xml:"editionKey,omitempty"`
	DisabledFeatureKey []string       `xml:"disabledFeatureKey,omitempty"`
	EnabledFeatureKey  []string       `xml:"enabledFeatureKey,omitempty"`
}

type LinkDiscoveryProtocolConfig struct {
	*DynamicData

	Protocol  string `xml:"protocol,omitempty"`
	Operation string `xml:"operation,omitempty"`
}

type HostAccountSpec struct {
	*DynamicData

	Id          string `xml:"id,omitempty"`
	Password    string `xml:"password,omitempty"`
	Description string `xml:"description,omitempty"`
}

type ArrayOfHostAccountSpec struct {
	HostAccountSpec []*HostAccountSpec `xml:"HostAccountSpec,omitempty"`
}

type HostPosixAccountSpec struct {
	*HostAccountSpec

	PosixId     int32 `xml:"posixId,omitempty"`
	ShellAccess bool  `xml:"shellAccess,omitempty"`
}

type HostLocalAuthenticationInfo struct {
	*HostAuthenticationStoreInfo
}

type HostLowLevelProvisioningManagerVmRecoveryInfo struct {
	*DynamicData

	Version      string                    `xml:"version,omitempty"`
	BiosUUID     string                    `xml:"biosUUID,omitempty"`
	InstanceUUID string                    `xml:"instanceUUID,omitempty"`
	FtInfo       *FaultToleranceConfigInfo `xml:"ftInfo,omitempty"`
}

type HostLowLevelProvisioningManagerVmMigrationStatus struct {
	*DynamicData

	MigrationId          int64  `xml:"migrationId,omitempty"`
	Type_                string `xml:"type,omitempty"`
	Source               bool   `xml:"source,omitempty"`
	ConsideredSuccessful bool   `xml:"consideredSuccessful,omitempty"`
}

type HostLowLevelProvisioningManagerDiskLayoutSpec struct {
	*DynamicData

	ControllerType string `xml:"controllerType,omitempty"`
	BusNumber      int32  `xml:"busNumber,omitempty"`
	UnitNumber     int32  `xml:"unitNumber,omitempty"`
	SrcFilename    string `xml:"srcFilename,omitempty"`
	DstFilename    string `xml:"dstFilename,omitempty"`
}

type ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec struct {
	HostLowLevelProvisioningManagerDiskLayoutSpec []*HostLowLevelProvisioningManagerDiskLayoutSpec `xml:"HostLowLevelProvisioningManagerDiskLayoutSpec,omitempty"`
}

type HostLowLevelProvisioningManagerSnapshotLayoutSpec struct {
	*DynamicData

	Id          int32                                            `xml:"id,omitempty"`
	SrcFilename string                                           `xml:"srcFilename,omitempty"`
	DstFilename string                                           `xml:"dstFilename,omitempty"`
	Disk        []*HostLowLevelProvisioningManagerDiskLayoutSpec `xml:"disk,omitempty"`
}

type ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec struct {
	HostLowLevelProvisioningManagerSnapshotLayoutSpec []*HostLowLevelProvisioningManagerSnapshotLayoutSpec `xml:"HostLowLevelProvisioningManagerSnapshotLayoutSpec,omitempty"`
}

type HostMaintenanceSpec struct {
	*DynamicData

	VsanMode *VsanHostDecommissionMode `xml:"vsanMode,omitempty"`
}

type ServiceConsoleReservationInfo struct {
	*DynamicData

	ServiceConsoleReservedCfg int64 `xml:"serviceConsoleReservedCfg,omitempty"`
	ServiceConsoleReserved    int64 `xml:"serviceConsoleReserved,omitempty"`
	Unreserved                int64 `xml:"unreserved,omitempty"`
}

type VirtualMachineMemoryReservationInfo struct {
	*DynamicData

	VirtualMachineMin      int64  `xml:"virtualMachineMin,omitempty"`
	VirtualMachineMax      int64  `xml:"virtualMachineMax,omitempty"`
	VirtualMachineReserved int64  `xml:"virtualMachineReserved,omitempty"`
	AllocationPolicy       string `xml:"allocationPolicy,omitempty"`
}

type VirtualMachineMemoryReservationSpec struct {
	*DynamicData

	VirtualMachineReserved int64  `xml:"virtualMachineReserved,omitempty"`
	AllocationPolicy       string `xml:"allocationPolicy,omitempty"`
}

type HostMemorySpec struct {
	*DynamicData

	ServiceConsoleReservation int64 `xml:"serviceConsoleReservation,omitempty"`
}

type HostMountInfo struct {
	*DynamicData

	Path               string `xml:"path,omitempty"`
	AccessMode         string `xml:"accessMode,omitempty"`
	Mounted            bool   `xml:"mounted,omitempty"`
	Accessible         bool   `xml:"accessible,omitempty"`
	InaccessibleReason string `xml:"inaccessibleReason,omitempty"`
}

type HostMultipathInfoLogicalUnitPolicy struct {
	*DynamicData

	Policy string `xml:"policy,omitempty"`
}

type HostMultipathInfoLogicalUnitStorageArrayTypePolicy struct {
	*DynamicData

	Policy string `xml:"policy,omitempty"`
}

type HostMultipathInfoFixedLogicalUnitPolicy struct {
	*HostMultipathInfoLogicalUnitPolicy

	Prefer string `xml:"prefer,omitempty"`
}

type HostMultipathInfoLogicalUnit struct {
	*DynamicData

	Key                    string                                              `xml:"key,omitempty"`
	Id                     string                                              `xml:"id,omitempty"`
	Lun                    string                                              `xml:"lun,omitempty"`
	Path                   []*HostMultipathInfoPath                            `xml:"path,omitempty"`
	Policy                 *HostMultipathInfoLogicalUnitPolicy                 `xml:"policy,omitempty"`
	StorageArrayTypePolicy *HostMultipathInfoLogicalUnitStorageArrayTypePolicy `xml:"storageArrayTypePolicy,omitempty"`
}

type ArrayOfHostMultipathInfoLogicalUnit struct {
	HostMultipathInfoLogicalUnit []*HostMultipathInfoLogicalUnit `xml:"HostMultipathInfoLogicalUnit,omitempty"`
}

type HostMultipathInfoPath struct {
	*DynamicData

	Key           string               `xml:"key,omitempty"`
	Name          string               `xml:"name,omitempty"`
	PathState     string               `xml:"pathState,omitempty"`
	State         string               `xml:"state,omitempty"`
	IsWorkingPath bool                 `xml:"isWorkingPath,omitempty"`
	Adapter       string               `xml:"adapter,omitempty"`
	Lun           string               `xml:"lun,omitempty"`
	Transport     *HostTargetTransport `xml:"transport,omitempty"`
}

type ArrayOfHostMultipathInfoPath struct {
	HostMultipathInfoPath []*HostMultipathInfoPath `xml:"HostMultipathInfoPath,omitempty"`
}

type HostMultipathInfo struct {
	*DynamicData

	Lun []*HostMultipathInfoLogicalUnit `xml:"lun,omitempty"`
}

type HostMultipathStateInfoPath struct {
	*DynamicData

	Name      string `xml:"name,omitempty"`
	PathState string `xml:"pathState,omitempty"`
}

type ArrayOfHostMultipathStateInfoPath struct {
	HostMultipathStateInfoPath []*HostMultipathStateInfoPath `xml:"HostMultipathStateInfoPath,omitempty"`
}

type HostMultipathStateInfo struct {
	*DynamicData

	Path []*HostMultipathStateInfoPath `xml:"path,omitempty"`
}

type HostNatServicePortForwardSpec struct {
	*DynamicData

	Type_          string `xml:"type,omitempty"`
	Name           string `xml:"name,omitempty"`
	HostPort       int32  `xml:"hostPort,omitempty"`
	GuestPort      int32  `xml:"guestPort,omitempty"`
	GuestIpAddress string `xml:"guestIpAddress,omitempty"`
}

type ArrayOfHostNatServicePortForwardSpec struct {
	HostNatServicePortForwardSpec []*HostNatServicePortForwardSpec `xml:"HostNatServicePortForwardSpec,omitempty"`
}

type HostNatServiceNameServiceSpec struct {
	*DynamicData

	DnsAutoDetect bool     `xml:"dnsAutoDetect,omitempty"`
	DnsPolicy     string   `xml:"dnsPolicy,omitempty"`
	DnsRetries    int32    `xml:"dnsRetries,omitempty"`
	DnsTimeout    int32    `xml:"dnsTimeout,omitempty"`
	DnsNameServer []string `xml:"dnsNameServer,omitempty"`
	NbdsTimeout   int32    `xml:"nbdsTimeout,omitempty"`
	NbnsRetries   int32    `xml:"nbnsRetries,omitempty"`
	NbnsTimeout   int32    `xml:"nbnsTimeout,omitempty"`
}

type HostNatServiceSpec struct {
	*DynamicData

	VirtualSwitch    string                           `xml:"virtualSwitch,omitempty"`
	ActiveFtp        bool                             `xml:"activeFtp,omitempty"`
	AllowAnyOui      bool                             `xml:"allowAnyOui,omitempty"`
	ConfigPort       bool                             `xml:"configPort,omitempty"`
	IpGatewayAddress string                           `xml:"ipGatewayAddress,omitempty"`
	UdpTimeout       int32                            `xml:"udpTimeout,omitempty"`
	PortForward      []*HostNatServicePortForwardSpec `xml:"portForward,omitempty"`
	NameService      *HostNatServiceNameServiceSpec   `xml:"nameService,omitempty"`
}

type HostNatServiceConfig struct {
	*DynamicData

	ChangeOperation string              `xml:"changeOperation,omitempty"`
	Key             string              `xml:"key,omitempty"`
	Spec            *HostNatServiceSpec `xml:"spec,omitempty"`
}

type ArrayOfHostNatServiceConfig struct {
	HostNatServiceConfig []*HostNatServiceConfig `xml:"HostNatServiceConfig,omitempty"`
}

type HostNatService struct {
	*DynamicData

	Key  string              `xml:"key,omitempty"`
	Spec *HostNatServiceSpec `xml:"spec,omitempty"`
}

type ArrayOfHostNatService struct {
	HostNatService []*HostNatService `xml:"HostNatService,omitempty"`
}

type HostNetCapabilities struct {
	*DynamicData

	CanSetPhysicalNicLinkSpeed bool     `xml:"canSetPhysicalNicLinkSpeed,omitempty"`
	SupportsNicTeaming         bool     `xml:"supportsNicTeaming,omitempty"`
	NicTeamingPolicy           []string `xml:"nicTeamingPolicy,omitempty"`
	SupportsVlan               bool     `xml:"supportsVlan,omitempty"`
	UsesServiceConsoleNic      bool     `xml:"usesServiceConsoleNic,omitempty"`
	SupportsNetworkHints       bool     `xml:"supportsNetworkHints,omitempty"`
	MaxPortGroupsPerVswitch    int32    `xml:"maxPortGroupsPerVswitch,omitempty"`
	VswitchConfigSupported     bool     `xml:"vswitchConfigSupported,omitempty"`
	VnicConfigSupported        bool     `xml:"vnicConfigSupported,omitempty"`
	IpRouteConfigSupported     bool     `xml:"ipRouteConfigSupported,omitempty"`
	DnsConfigSupported         bool     `xml:"dnsConfigSupported,omitempty"`
	DhcpOnVnicSupported        bool     `xml:"dhcpOnVnicSupported,omitempty"`
	IpV6Supported              bool     `xml:"ipV6Supported,omitempty"`
}

type HostNetOffloadCapabilities struct {
	*DynamicData

	CsumOffload     bool `xml:"csumOffload,omitempty"`
	TcpSegmentation bool `xml:"tcpSegmentation,omitempty"`
	ZeroCopyXmit    bool `xml:"zeroCopyXmit,omitempty"`
}

type HostNetStackInstance struct {
	*DynamicData

	Key                             string                  `xml:"key,omitempty"`
	Name                            string                  `xml:"name,omitempty"`
	DnsConfig                       *HostDnsConfig          `xml:"dnsConfig,omitempty"`
	IpRouteConfig                   *HostIpRouteConfig      `xml:"ipRouteConfig,omitempty"`
	RequestedMaxNumberOfConnections int32                   `xml:"requestedMaxNumberOfConnections,omitempty"`
	CongestionControlAlgorithm      string                  `xml:"congestionControlAlgorithm,omitempty"`
	IpV6Enabled                     bool                    `xml:"ipV6Enabled,omitempty"`
	RouteTableConfig                *HostIpRouteTableConfig `xml:"routeTableConfig,omitempty"`
}

type ArrayOfHostNetStackInstance struct {
	HostNetStackInstance []*HostNetStackInstance `xml:"HostNetStackInstance,omitempty"`
}

type HostNetworkConfigResult struct {
	*DynamicData

	VnicDevice        []string `xml:"vnicDevice,omitempty"`
	ConsoleVnicDevice []string `xml:"consoleVnicDevice,omitempty"`
}

type HostNetworkConfigNetStackSpec struct {
	*DynamicData

	NetStackInstance *HostNetStackInstance `xml:"netStackInstance,omitempty"`
	Operation        string                `xml:"operation,omitempty"`
}

type ArrayOfHostNetworkConfigNetStackSpec struct {
	HostNetworkConfigNetStackSpec []*HostNetworkConfigNetStackSpec `xml:"HostNetworkConfigNetStackSpec,omitempty"`
}

type HostNetworkConfig struct {
	*DynamicData

	Vswitch              []*HostVirtualSwitchConfig       `xml:"vswitch,omitempty"`
	ProxySwitch          []*HostProxySwitchConfig         `xml:"proxySwitch,omitempty"`
	Portgroup            []*HostPortGroupConfig           `xml:"portgroup,omitempty"`
	Pnic                 []*PhysicalNicConfig             `xml:"pnic,omitempty"`
	Vnic                 []*HostVirtualNicConfig          `xml:"vnic,omitempty"`
	ConsoleVnic          []*HostVirtualNicConfig          `xml:"consoleVnic,omitempty"`
	DnsConfig            *HostDnsConfig                   `xml:"dnsConfig,omitempty"`
	IpRouteConfig        *HostIpRouteConfig               `xml:"ipRouteConfig,omitempty"`
	ConsoleIpRouteConfig *HostIpRouteConfig               `xml:"consoleIpRouteConfig,omitempty"`
	RouteTableConfig     *HostIpRouteTableConfig          `xml:"routeTableConfig,omitempty"`
	Dhcp                 []*HostDhcpServiceConfig         `xml:"dhcp,omitempty"`
	Nat                  []*HostNatServiceConfig          `xml:"nat,omitempty"`
	IpV6Enabled          bool                             `xml:"ipV6Enabled,omitempty"`
	NetStackSpec         []*HostNetworkConfigNetStackSpec `xml:"netStackSpec,omitempty"`
}

type HostNetworkInfo struct {
	*DynamicData

	Vswitch              []*HostVirtualSwitch     `xml:"vswitch,omitempty"`
	ProxySwitch          []*HostProxySwitch       `xml:"proxySwitch,omitempty"`
	Portgroup            []*HostPortGroup         `xml:"portgroup,omitempty"`
	Pnic                 []*PhysicalNic           `xml:"pnic,omitempty"`
	Vnic                 []*HostVirtualNic        `xml:"vnic,omitempty"`
	ConsoleVnic          []*HostVirtualNic        `xml:"consoleVnic,omitempty"`
	DnsConfig            *HostDnsConfig           `xml:"dnsConfig,omitempty"`
	IpRouteConfig        *HostIpRouteConfig       `xml:"ipRouteConfig,omitempty"`
	ConsoleIpRouteConfig *HostIpRouteConfig       `xml:"consoleIpRouteConfig,omitempty"`
	RouteTableInfo       *HostIpRouteTableInfo    `xml:"routeTableInfo,omitempty"`
	Dhcp                 []*HostDhcpService       `xml:"dhcp,omitempty"`
	Nat                  []*HostNatService        `xml:"nat,omitempty"`
	IpV6Enabled          bool                     `xml:"ipV6Enabled,omitempty"`
	AtBootIpV6Enabled    bool                     `xml:"atBootIpV6Enabled,omitempty"`
	NetStackInstance     []*HostNetStackInstance  `xml:"netStackInstance,omitempty"`
	OpaqueSwitch         []*HostOpaqueSwitch      `xml:"opaqueSwitch,omitempty"`
	OpaqueNetwork        []*HostOpaqueNetworkInfo `xml:"opaqueNetwork,omitempty"`
}

type HostNetworkSecurityPolicy struct {
	*DynamicData

	AllowPromiscuous bool `xml:"allowPromiscuous,omitempty"`
	MacChanges       bool `xml:"macChanges,omitempty"`
	ForgedTransmits  bool `xml:"forgedTransmits,omitempty"`
}

type HostNetworkTrafficShapingPolicy struct {
	*DynamicData

	Enabled          bool  `xml:"enabled,omitempty"`
	AverageBandwidth int64 `xml:"averageBandwidth,omitempty"`
	PeakBandwidth    int64 `xml:"peakBandwidth,omitempty"`
	BurstSize        int64 `xml:"burstSize,omitempty"`
}

type HostNicFailureCriteria struct {
	*DynamicData

	CheckSpeed        string `xml:"checkSpeed,omitempty"`
	Speed             int32  `xml:"speed,omitempty"`
	CheckDuplex       bool   `xml:"checkDuplex,omitempty"`
	FullDuplex        bool   `xml:"fullDuplex,omitempty"`
	CheckErrorPercent bool   `xml:"checkErrorPercent,omitempty"`
	Percentage        int32  `xml:"percentage,omitempty"`
	CheckBeacon       bool   `xml:"checkBeacon,omitempty"`
}

type HostNicOrderPolicy struct {
	*DynamicData

	ActiveNic  []string `xml:"activeNic,omitempty"`
	StandbyNic []string `xml:"standbyNic,omitempty"`
}

type HostNicTeamingPolicy struct {
	*DynamicData

	Policy          string                  `xml:"policy,omitempty"`
	ReversePolicy   bool                    `xml:"reversePolicy,omitempty"`
	NotifySwitches  bool                    `xml:"notifySwitches,omitempty"`
	RollingOrder    bool                    `xml:"rollingOrder,omitempty"`
	FailureCriteria *HostNicFailureCriteria `xml:"failureCriteria,omitempty"`
	NicOrder        *HostNicOrderPolicy     `xml:"nicOrder,omitempty"`
}

type HostNetworkPolicy struct {
	*DynamicData

	Security      *HostNetworkSecurityPolicy       `xml:"security,omitempty"`
	NicTeaming    *HostNicTeamingPolicy            `xml:"nicTeaming,omitempty"`
	OffloadPolicy *HostNetOffloadCapabilities      `xml:"offloadPolicy,omitempty"`
	ShapingPolicy *HostNetworkTrafficShapingPolicy `xml:"shapingPolicy,omitempty"`
}

type HostNtpConfig struct {
	*DynamicData

	Server []string `xml:"server,omitempty"`
}

type HostNumericSensorInfo struct {
	*DynamicData

	Name           string              `xml:"name,omitempty"`
	HealthState    *ElementDescription `xml:"healthState,omitempty"`
	CurrentReading int64               `xml:"currentReading,omitempty"`
	UnitModifier   int32               `xml:"unitModifier,omitempty"`
	BaseUnits      string              `xml:"baseUnits,omitempty"`
	RateUnits      string              `xml:"rateUnits,omitempty"`
	SensorType     string              `xml:"sensorType,omitempty"`
}

type ArrayOfHostNumericSensorInfo struct {
	HostNumericSensorInfo []*HostNumericSensorInfo `xml:"HostNumericSensorInfo,omitempty"`
}

type HostOpaqueNetworkInfo struct {
	*DynamicData

	OpaqueNetworkId   string `xml:"opaqueNetworkId,omitempty"`
	OpaqueNetworkName string `xml:"opaqueNetworkName,omitempty"`
	OpaqueNetworkType string `xml:"opaqueNetworkType,omitempty"`
}

type ArrayOfHostOpaqueNetworkInfo struct {
	HostOpaqueNetworkInfo []*HostOpaqueNetworkInfo `xml:"HostOpaqueNetworkInfo,omitempty"`
}

type HostOpaqueSwitch struct {
	*DynamicData

	Key  string   `xml:"key,omitempty"`
	Name string   `xml:"name,omitempty"`
	Pnic []string `xml:"pnic,omitempty"`
}

type ArrayOfHostOpaqueSwitch struct {
	HostOpaqueSwitch []*HostOpaqueSwitch `xml:"HostOpaqueSwitch,omitempty"`
}

type HostPatchManagerResult struct {
	*DynamicData

	Version   string                    `xml:"version,omitempty"`
	Status    []*HostPatchManagerStatus `xml:"status,omitempty"`
	XmlResult string                    `xml:"xmlResult,omitempty"`
}

type HostPatchManagerStatusPrerequisitePatch struct {
	*DynamicData

	Id           string   `xml:"id,omitempty"`
	InstallState []string `xml:"installState,omitempty"`
}

type ArrayOfHostPatchManagerStatusPrerequisitePatch struct {
	HostPatchManagerStatusPrerequisitePatch []*HostPatchManagerStatusPrerequisitePatch `xml:"HostPatchManagerStatusPrerequisitePatch,omitempty"`
}

type HostPatchManagerStatus struct {
	*DynamicData

	Id                 string                                     `xml:"id,omitempty"`
	Applicable         bool                                       `xml:"applicable,omitempty"`
	Reason             []string                                   `xml:"reason,omitempty"`
	Integrity          string                                     `xml:"integrity,omitempty"`
	Installed          bool                                       `xml:"installed,omitempty"`
	InstallState       []string                                   `xml:"installState,omitempty"`
	PrerequisitePatch  []*HostPatchManagerStatusPrerequisitePatch `xml:"prerequisitePatch,omitempty"`
	RestartRequired    bool                                       `xml:"restartRequired,omitempty"`
	ReconnectRequired  bool                                       `xml:"reconnectRequired,omitempty"`
	VmOffRequired      bool                                       `xml:"vmOffRequired,omitempty"`
	SupersededPatchIds []string                                   `xml:"supersededPatchIds,omitempty"`
}

type ArrayOfHostPatchManagerStatus struct {
	HostPatchManagerStatus []*HostPatchManagerStatus `xml:"HostPatchManagerStatus,omitempty"`
}

type HostPatchManagerLocator struct {
	*DynamicData

	Url   string `xml:"url,omitempty"`
	Proxy string `xml:"proxy,omitempty"`
}

type HostPatchManagerPatchManagerOperationSpec struct {
	*DynamicData

	Proxy     string `xml:"proxy,omitempty"`
	Port      int32  `xml:"port,omitempty"`
	UserName  string `xml:"userName,omitempty"`
	Password  string `xml:"password,omitempty"`
	CmdOption string `xml:"cmdOption,omitempty"`
}

type HostPathSelectionPolicyOption struct {
	*DynamicData

	Policy *ElementDescription `xml:"policy,omitempty"`
}

type ArrayOfHostPathSelectionPolicyOption struct {
	HostPathSelectionPolicyOption []*HostPathSelectionPolicyOption `xml:"HostPathSelectionPolicyOption,omitempty"`
}

type HostPciDevice struct {
	*DynamicData

	Id           string `xml:"id,omitempty"`
	ClassId      int16  `xml:"classId,omitempty"`
	Bus          int8   `xml:"bus,omitempty"`
	Slot         int8   `xml:"slot,omitempty"`
	Function     int8   `xml:"function,omitempty"`
	VendorId     int16  `xml:"vendorId,omitempty"`
	SubVendorId  int16  `xml:"subVendorId,omitempty"`
	VendorName   string `xml:"vendorName,omitempty"`
	DeviceId     int16  `xml:"deviceId,omitempty"`
	SubDeviceId  int16  `xml:"subDeviceId,omitempty"`
	ParentBridge string `xml:"parentBridge,omitempty"`
	DeviceName   string `xml:"deviceName,omitempty"`
}

type ArrayOfHostPciDevice struct {
	HostPciDevice []*HostPciDevice `xml:"HostPciDevice,omitempty"`
}

type HostPciPassthruConfig struct {
	*DynamicData

	Id              string `xml:"id,omitempty"`
	PassthruEnabled bool   `xml:"passthruEnabled,omitempty"`
}

type ArrayOfHostPciPassthruConfig struct {
	HostPciPassthruConfig []*HostPciPassthruConfig `xml:"HostPciPassthruConfig,omitempty"`
}

type HostPciPassthruInfo struct {
	*DynamicData

	Id              string `xml:"id,omitempty"`
	DependentDevice string `xml:"dependentDevice,omitempty"`
	PassthruEnabled bool   `xml:"passthruEnabled,omitempty"`
	PassthruCapable bool   `xml:"passthruCapable,omitempty"`
	PassthruActive  bool   `xml:"passthruActive,omitempty"`
}

type ArrayOfHostPciPassthruInfo struct {
	HostPciPassthruInfo []*HostPciPassthruInfo `xml:"HostPciPassthruInfo,omitempty"`
}

type PhysicalNicSpec struct {
	*DynamicData

	Ip        *HostIpConfig        `xml:"ip,omitempty"`
	LinkSpeed *PhysicalNicLinkInfo `xml:"linkSpeed,omitempty"`
}

type PhysicalNicConfig struct {
	*DynamicData

	Device string           `xml:"device,omitempty"`
	Spec   *PhysicalNicSpec `xml:"spec,omitempty"`
}

type ArrayOfPhysicalNicConfig struct {
	PhysicalNicConfig []*PhysicalNicConfig `xml:"PhysicalNicConfig,omitempty"`
}

type PhysicalNicLinkInfo struct {
	*DynamicData

	SpeedMb int32 `xml:"speedMb,omitempty"`
	Duplex  bool  `xml:"duplex,omitempty"`
}

type ArrayOfPhysicalNicLinkInfo struct {
	PhysicalNicLinkInfo []*PhysicalNicLinkInfo `xml:"PhysicalNicLinkInfo,omitempty"`
}

type PhysicalNicHint struct {
	*DynamicData

	VlanId int32 `xml:"vlanId,omitempty"`
}

type PhysicalNicIpHint struct {
	*PhysicalNicHint

	IpSubnet string `xml:"ipSubnet,omitempty"`
}

type ArrayOfPhysicalNicIpHint struct {
	PhysicalNicIpHint []*PhysicalNicIpHint `xml:"PhysicalNicIpHint,omitempty"`
}

type PhysicalNicNameHint struct {
	*PhysicalNicHint

	Network string `xml:"network,omitempty"`
}

type ArrayOfPhysicalNicNameHint struct {
	PhysicalNicNameHint []*PhysicalNicNameHint `xml:"PhysicalNicNameHint,omitempty"`
}

type PhysicalNicHintInfo struct {
	*DynamicData

	Device              string                          `xml:"device,omitempty"`
	Subnet              []*PhysicalNicIpHint            `xml:"subnet,omitempty"`
	Network             []*PhysicalNicNameHint          `xml:"network,omitempty"`
	ConnectedSwitchPort *PhysicalNicCdpInfo             `xml:"connectedSwitchPort,omitempty"`
	LldpInfo            *LinkLayerDiscoveryProtocolInfo `xml:"lldpInfo,omitempty"`
}

type ArrayOfPhysicalNicHintInfo struct {
	PhysicalNicHintInfo []*PhysicalNicHintInfo `xml:"PhysicalNicHintInfo,omitempty"`
}

type PhysicalNicCdpDeviceCapability struct {
	*DynamicData

	Router            bool `xml:"router,omitempty"`
	TransparentBridge bool `xml:"transparentBridge,omitempty"`
	SourceRouteBridge bool `xml:"sourceRouteBridge,omitempty"`
	NetworkSwitch     bool `xml:"networkSwitch,omitempty"`
	Host              bool `xml:"host,omitempty"`
	IgmpEnabled       bool `xml:"igmpEnabled,omitempty"`
	Repeater          bool `xml:"repeater,omitempty"`
}

type PhysicalNicCdpInfo struct {
	*DynamicData

	CdpVersion       int32                           `xml:"cdpVersion,omitempty"`
	Timeout          int32                           `xml:"timeout,omitempty"`
	Ttl              int32                           `xml:"ttl,omitempty"`
	Samples          int32                           `xml:"samples,omitempty"`
	DevId            string                          `xml:"devId,omitempty"`
	Address          string                          `xml:"address,omitempty"`
	PortId           string                          `xml:"portId,omitempty"`
	DeviceCapability *PhysicalNicCdpDeviceCapability `xml:"deviceCapability,omitempty"`
	SoftwareVersion  string                          `xml:"softwareVersion,omitempty"`
	HardwarePlatform string                          `xml:"hardwarePlatform,omitempty"`
	IpPrefix         string                          `xml:"ipPrefix,omitempty"`
	IpPrefixLen      int32                           `xml:"ipPrefixLen,omitempty"`
	Vlan             int32                           `xml:"vlan,omitempty"`
	FullDuplex       bool                            `xml:"fullDuplex,omitempty"`
	Mtu              int32                           `xml:"mtu,omitempty"`
	SystemName       string                          `xml:"systemName,omitempty"`
	SystemOID        string                          `xml:"systemOID,omitempty"`
	MgmtAddr         string                          `xml:"mgmtAddr,omitempty"`
	Location         string                          `xml:"location,omitempty"`
}

type LinkLayerDiscoveryProtocolInfo struct {
	*DynamicData

	ChassisId  string         `xml:"chassisId,omitempty"`
	PortId     string         `xml:"portId,omitempty"`
	TimeToLive int32          `xml:"timeToLive,omitempty"`
	Parameter  []*KeyAnyValue `xml:"parameter,omitempty"`
}

type PhysicalNic struct {
	*DynamicData

	Key                                   string                 `xml:"key,omitempty"`
	Device                                string                 `xml:"device,omitempty"`
	Pci                                   string                 `xml:"pci,omitempty"`
	Driver                                string                 `xml:"driver,omitempty"`
	LinkSpeed                             *PhysicalNicLinkInfo   `xml:"linkSpeed,omitempty"`
	ValidLinkSpecification                []*PhysicalNicLinkInfo `xml:"validLinkSpecification,omitempty"`
	Spec                                  *PhysicalNicSpec       `xml:"spec,omitempty"`
	WakeOnLanSupported                    bool                   `xml:"wakeOnLanSupported,omitempty"`
	Mac                                   string                 `xml:"mac,omitempty"`
	FcoeConfiguration                     *FcoeConfig            `xml:"fcoeConfiguration,omitempty"`
	VmDirectPathGen2Supported             bool                   `xml:"vmDirectPathGen2Supported,omitempty"`
	VmDirectPathGen2SupportedMode         string                 `xml:"vmDirectPathGen2SupportedMode,omitempty"`
	ResourcePoolSchedulerAllowed          bool                   `xml:"resourcePoolSchedulerAllowed,omitempty"`
	ResourcePoolSchedulerDisallowedReason []string               `xml:"resourcePoolSchedulerDisallowedReason,omitempty"`
	AutoNegotiateSupported                bool                   `xml:"autoNegotiateSupported,omitempty"`
}

type ArrayOfPhysicalNic struct {
	PhysicalNic []*PhysicalNic `xml:"PhysicalNic,omitempty"`
}

type HostPlugStoreTopologyAdapter struct {
	*DynamicData

	Key     string   `xml:"key,omitempty"`
	Adapter string   `xml:"adapter,omitempty"`
	Path    []string `xml:"path,omitempty"`
}

type ArrayOfHostPlugStoreTopologyAdapter struct {
	HostPlugStoreTopologyAdapter []*HostPlugStoreTopologyAdapter `xml:"HostPlugStoreTopologyAdapter,omitempty"`
}

type HostPlugStoreTopologyPath struct {
	*DynamicData

	Key           string `xml:"key,omitempty"`
	Name          string `xml:"name,omitempty"`
	ChannelNumber int32  `xml:"channelNumber,omitempty"`
	TargetNumber  int32  `xml:"targetNumber,omitempty"`
	LunNumber     int32  `xml:"lunNumber,omitempty"`
	Adapter       string `xml:"adapter,omitempty"`
	Target        string `xml:"target,omitempty"`
	Device        string `xml:"device,omitempty"`
}

type ArrayOfHostPlugStoreTopologyPath struct {
	HostPlugStoreTopologyPath []*HostPlugStoreTopologyPath `xml:"HostPlugStoreTopologyPath,omitempty"`
}

type HostPlugStoreTopologyDevice struct {
	*DynamicData

	Key  string   `xml:"key,omitempty"`
	Lun  string   `xml:"lun,omitempty"`
	Path []string `xml:"path,omitempty"`
}

type ArrayOfHostPlugStoreTopologyDevice struct {
	HostPlugStoreTopologyDevice []*HostPlugStoreTopologyDevice `xml:"HostPlugStoreTopologyDevice,omitempty"`
}

type HostPlugStoreTopologyPlugin struct {
	*DynamicData

	Key         string   `xml:"key,omitempty"`
	Name        string   `xml:"name,omitempty"`
	Device      []string `xml:"device,omitempty"`
	ClaimedPath []string `xml:"claimedPath,omitempty"`
}

type ArrayOfHostPlugStoreTopologyPlugin struct {
	HostPlugStoreTopologyPlugin []*HostPlugStoreTopologyPlugin `xml:"HostPlugStoreTopologyPlugin,omitempty"`
}

type HostPlugStoreTopologyTarget struct {
	*DynamicData

	Key       string               `xml:"key,omitempty"`
	Transport *HostTargetTransport `xml:"transport,omitempty"`
}

type ArrayOfHostPlugStoreTopologyTarget struct {
	HostPlugStoreTopologyTarget []*HostPlugStoreTopologyTarget `xml:"HostPlugStoreTopologyTarget,omitempty"`
}

type HostPlugStoreTopology struct {
	*DynamicData

	Adapter []*HostPlugStoreTopologyAdapter `xml:"adapter,omitempty"`
	Path    []*HostPlugStoreTopologyPath    `xml:"path,omitempty"`
	Target  []*HostPlugStoreTopologyTarget  `xml:"target,omitempty"`
	Device  []*HostPlugStoreTopologyDevice  `xml:"device,omitempty"`
	Plugin  []*HostPlugStoreTopologyPlugin  `xml:"plugin,omitempty"`
}

type HostPortGroupSpec struct {
	*DynamicData

	Name        string             `xml:"name,omitempty"`
	VlanId      int32              `xml:"vlanId,omitempty"`
	VswitchName string             `xml:"vswitchName,omitempty"`
	Policy      *HostNetworkPolicy `xml:"policy,omitempty"`
}

type HostPortGroupConfig struct {
	*DynamicData

	ChangeOperation string             `xml:"changeOperation,omitempty"`
	Spec            *HostPortGroupSpec `xml:"spec,omitempty"`
}

type ArrayOfHostPortGroupConfig struct {
	HostPortGroupConfig []*HostPortGroupConfig `xml:"HostPortGroupConfig,omitempty"`
}

type HostPortGroupPort struct {
	*DynamicData

	Key   string   `xml:"key,omitempty"`
	Mac   []string `xml:"mac,omitempty"`
	Type_ string   `xml:"type,omitempty"`
}

type ArrayOfHostPortGroupPort struct {
	HostPortGroupPort []*HostPortGroupPort `xml:"HostPortGroupPort,omitempty"`
}

type HostPortGroup struct {
	*DynamicData

	Key            string               `xml:"key,omitempty"`
	Port           []*HostPortGroupPort `xml:"port,omitempty"`
	Vswitch        string               `xml:"vswitch,omitempty"`
	ComputedPolicy *HostNetworkPolicy   `xml:"computedPolicy,omitempty"`
	Spec           *HostPortGroupSpec   `xml:"spec,omitempty"`
}

type ArrayOfHostPortGroup struct {
	HostPortGroup []*HostPortGroup `xml:"HostPortGroup,omitempty"`
}

type HostPowerPolicy struct {
	*DynamicData

	Key         int32  `xml:"key,omitempty"`
	Name        string `xml:"name,omitempty"`
	ShortName   string `xml:"shortName,omitempty"`
	Description string `xml:"description,omitempty"`
}

type ArrayOfHostPowerPolicy struct {
	HostPowerPolicy []*HostPowerPolicy `xml:"HostPowerPolicy,omitempty"`
}

type PowerSystemCapability struct {
	*DynamicData

	AvailablePolicy []*HostPowerPolicy `xml:"availablePolicy,omitempty"`
}

type PowerSystemInfo struct {
	*DynamicData

	CurrentPolicy *HostPowerPolicy `xml:"currentPolicy,omitempty"`
}

type HostResignatureRescanResult struct {
	*DynamicData

	Rescan []*HostVmfsRescanResult `xml:"rescan,omitempty"`
	Result *ManagedObjectReference `xml:"result,omitempty"`
}

type HostFirewallRulesetIpNetwork struct {
	*DynamicData

	Network      string `xml:"network,omitempty"`
	PrefixLength int32  `xml:"prefixLength,omitempty"`
}

type ArrayOfHostFirewallRulesetIpNetwork struct {
	HostFirewallRulesetIpNetwork []*HostFirewallRulesetIpNetwork `xml:"HostFirewallRulesetIpNetwork,omitempty"`
}

type HostFirewallRulesetIpList struct {
	*DynamicData

	IpAddress []string                        `xml:"ipAddress,omitempty"`
	IpNetwork []*HostFirewallRulesetIpNetwork `xml:"ipNetwork,omitempty"`
	AllIp     bool                            `xml:"allIp,omitempty"`
}

type HostFirewallRulesetRulesetSpec struct {
	*DynamicData

	AllowedHosts *HostFirewallRulesetIpList `xml:"allowedHosts,omitempty"`
}

type HostFirewallRule struct {
	*DynamicData

	Port      int32                      `xml:"port,omitempty"`
	EndPort   int32                      `xml:"endPort,omitempty"`
	Direction *HostFirewallRuleDirection `xml:"direction,omitempty"`
	PortType  *HostFirewallRulePortType  `xml:"portType,omitempty"`
	Protocol  string                     `xml:"protocol,omitempty"`
}

type ArrayOfHostFirewallRule struct {
	HostFirewallRule []*HostFirewallRule `xml:"HostFirewallRule,omitempty"`
}

type HostFirewallRuleset struct {
	*DynamicData

	Key          string                     `xml:"key,omitempty"`
	Label        string                     `xml:"label,omitempty"`
	Required     bool                       `xml:"required,omitempty"`
	Rule         []*HostFirewallRule        `xml:"rule,omitempty"`
	Service      string                     `xml:"service,omitempty"`
	Enabled      bool                       `xml:"enabled,omitempty"`
	AllowedHosts *HostFirewallRulesetIpList `xml:"allowedHosts,omitempty"`
}

type ArrayOfHostFirewallRuleset struct {
	HostFirewallRuleset []*HostFirewallRuleset `xml:"HostFirewallRuleset,omitempty"`
}

type HostRuntimeInfoNetStackInstanceRuntimeInfo struct {
	*DynamicData

	NetStackInstanceKey    string   `xml:"netStackInstanceKey,omitempty"`
	State                  string   `xml:"state,omitempty"`
	VmknicKeys             []string `xml:"vmknicKeys,omitempty"`
	MaxNumberOfConnections int32    `xml:"maxNumberOfConnections,omitempty"`
	CurrentIpV6Enabled     bool     `xml:"currentIpV6Enabled,omitempty"`
}

type ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo struct {
	HostRuntimeInfoNetStackInstanceRuntimeInfo []*HostRuntimeInfoNetStackInstanceRuntimeInfo `xml:"HostRuntimeInfoNetStackInstanceRuntimeInfo,omitempty"`
}

type HostRuntimeInfoNetworkRuntimeInfo struct {
	*DynamicData

	NetStackInstanceRuntimeInfo []*HostRuntimeInfoNetStackInstanceRuntimeInfo `xml:"netStackInstanceRuntimeInfo,omitempty"`
}

type HostRuntimeInfo struct {
	*DynamicData

	ConnectionState            *HostSystemConnectionState                  `xml:"connectionState,omitempty"`
	PowerState                 *HostSystemPowerState                       `xml:"powerState,omitempty"`
	StandbyMode                string                                      `xml:"standbyMode,omitempty"`
	InMaintenanceMode          bool                                        `xml:"inMaintenanceMode,omitempty"`
	BootTime                   time.Time                                   `xml:"bootTime,omitempty"`
	HealthSystemRuntime        *HealthSystemRuntime                        `xml:"healthSystemRuntime,omitempty"`
	DasHostState               *ClusterDasFdmHostState                     `xml:"dasHostState,omitempty"`
	TpmPcrValues               []*HostTpmDigestInfo                        `xml:"tpmPcrValues,omitempty"`
	VsanRuntimeInfo            *VsanHostRuntimeInfo                        `xml:"vsanRuntimeInfo,omitempty"`
	NetworkRuntimeInfo         *HostRuntimeInfoNetworkRuntimeInfo          `xml:"networkRuntimeInfo,omitempty"`
	VFlashResourceRuntimeInfo  *HostVFlashManagerVFlashResourceRunTimeInfo `xml:"vFlashResourceRuntimeInfo,omitempty"`
	HostMaxVirtualDiskCapacity int64                                       `xml:"hostMaxVirtualDiskCapacity,omitempty"`
}

type HostScsiDiskPartition struct {
	*DynamicData

	DiskName  string `xml:"diskName,omitempty"`
	Partition int32  `xml:"partition,omitempty"`
}

type ArrayOfHostScsiDiskPartition struct {
	HostScsiDiskPartition []*HostScsiDiskPartition `xml:"HostScsiDiskPartition,omitempty"`
}

type HostScsiDisk struct {
	*ScsiLun

	Capacity   *HostDiskDimensionsLba `xml:"capacity,omitempty"`
	DevicePath string                 `xml:"devicePath,omitempty"`
	Ssd        bool                   `xml:"ssd,omitempty"`
}

type ArrayOfHostScsiDisk struct {
	HostScsiDisk []*HostScsiDisk `xml:"HostScsiDisk,omitempty"`
}

type ScsiLunCapabilities struct {
	*DynamicData

	UpdateDisplayNameSupported bool `xml:"updateDisplayNameSupported,omitempty"`
}

type ScsiLunDurableName struct {
	*DynamicData

	Namespace   string `xml:"namespace,omitempty"`
	NamespaceId int8   `xml:"namespaceId,omitempty"`
	Data        []int8 `xml:"data,omitempty"`
}

type ArrayOfScsiLunDurableName struct {
	ScsiLunDurableName []*ScsiLunDurableName `xml:"ScsiLunDurableName,omitempty"`
}

type ScsiLunDescriptor struct {
	*DynamicData

	Quality string `xml:"quality,omitempty"`
	Id      string `xml:"id,omitempty"`
}

type ArrayOfScsiLunDescriptor struct {
	ScsiLunDescriptor []*ScsiLunDescriptor `xml:"ScsiLunDescriptor,omitempty"`
}

type ScsiLun struct {
	*HostDevice

	Key              string                `xml:"key,omitempty"`
	Uuid             string                `xml:"uuid,omitempty"`
	Descriptor       []*ScsiLunDescriptor  `xml:"descriptor,omitempty"`
	CanonicalName    string                `xml:"canonicalName,omitempty"`
	DisplayName      string                `xml:"displayName,omitempty"`
	LunType          string                `xml:"lunType,omitempty"`
	Vendor           string                `xml:"vendor,omitempty"`
	Model            string                `xml:"model,omitempty"`
	Revision         string                `xml:"revision,omitempty"`
	ScsiLevel        int32                 `xml:"scsiLevel,omitempty"`
	SerialNumber     string                `xml:"serialNumber,omitempty"`
	DurableName      *ScsiLunDurableName   `xml:"durableName,omitempty"`
	AlternateName    []*ScsiLunDurableName `xml:"alternateName,omitempty"`
	StandardInquiry  []int8                `xml:"standardInquiry,omitempty"`
	QueueDepth       int32                 `xml:"queueDepth,omitempty"`
	OperationalState []string              `xml:"operationalState,omitempty"`
	Capabilities     *ScsiLunCapabilities  `xml:"capabilities,omitempty"`
	VStorageSupport  string                `xml:"vStorageSupport,omitempty"`
}

type ArrayOfScsiLun struct {
	ScsiLun []*ScsiLun `xml:"ScsiLun,omitempty"`
}

type HostScsiTopologyInterface struct {
	*DynamicData

	Key     string                    `xml:"key,omitempty"`
	Adapter string                    `xml:"adapter,omitempty"`
	Target  []*HostScsiTopologyTarget `xml:"target,omitempty"`
}

type ArrayOfHostScsiTopologyInterface struct {
	HostScsiTopologyInterface []*HostScsiTopologyInterface `xml:"HostScsiTopologyInterface,omitempty"`
}

type HostScsiTopologyTarget struct {
	*DynamicData

	Key       string                 `xml:"key,omitempty"`
	Target    int32                  `xml:"target,omitempty"`
	Lun       []*HostScsiTopologyLun `xml:"lun,omitempty"`
	Transport *HostTargetTransport   `xml:"transport,omitempty"`
}

type ArrayOfHostScsiTopologyTarget struct {
	HostScsiTopologyTarget []*HostScsiTopologyTarget `xml:"HostScsiTopologyTarget,omitempty"`
}

type HostScsiTopologyLun struct {
	*DynamicData

	Key     string `xml:"key,omitempty"`
	Lun     int32  `xml:"lun,omitempty"`
	ScsiLun string `xml:"scsiLun,omitempty"`
}

type ArrayOfHostScsiTopologyLun struct {
	HostScsiTopologyLun []*HostScsiTopologyLun `xml:"HostScsiTopologyLun,omitempty"`
}

type HostScsiTopology struct {
	*DynamicData

	Adapter []*HostScsiTopologyInterface `xml:"adapter,omitempty"`
}

type HostSecuritySpec struct {
	*DynamicData

	AdminPassword    string        `xml:"adminPassword,omitempty"`
	RemovePermission []*Permission `xml:"removePermission,omitempty"`
	AddPermission    []*Permission `xml:"addPermission,omitempty"`
}

type HostServiceSourcePackage struct {
	*DynamicData

	SourcePackageName string `xml:"sourcePackageName,omitempty"`
	Description       string `xml:"description,omitempty"`
}

type HostService struct {
	*DynamicData

	Key           string                    `xml:"key,omitempty"`
	Label         string                    `xml:"label,omitempty"`
	Required      bool                      `xml:"required,omitempty"`
	Uninstallable bool                      `xml:"uninstallable,omitempty"`
	Running       bool                      `xml:"running,omitempty"`
	Ruleset       []string                  `xml:"ruleset,omitempty"`
	Policy        string                    `xml:"policy,omitempty"`
	SourcePackage *HostServiceSourcePackage `xml:"sourcePackage,omitempty"`
}

type ArrayOfHostService struct {
	HostService []*HostService `xml:"HostService,omitempty"`
}

type HostServiceConfig struct {
	*DynamicData

	ServiceId     string `xml:"serviceId,omitempty"`
	StartupPolicy string `xml:"startupPolicy,omitempty"`
}

type ArrayOfHostServiceConfig struct {
	HostServiceConfig []*HostServiceConfig `xml:"HostServiceConfig,omitempty"`
}

type HostServiceInfo struct {
	*DynamicData

	Service []*HostService `xml:"service,omitempty"`
}

type HostSnmpDestination struct {
	*DynamicData

	HostName  string `xml:"hostName,omitempty"`
	Port      int32  `xml:"port,omitempty"`
	Community string `xml:"community,omitempty"`
}

type ArrayOfHostSnmpDestination struct {
	HostSnmpDestination []*HostSnmpDestination `xml:"HostSnmpDestination,omitempty"`
}

type HostSnmpConfigSpec struct {
	*DynamicData

	Enabled             bool                   `xml:"enabled,omitempty"`
	Port                int32                  `xml:"port,omitempty"`
	ReadOnlyCommunities []string               `xml:"readOnlyCommunities,omitempty"`
	TrapTargets         []*HostSnmpDestination `xml:"trapTargets,omitempty"`
	Option              []*KeyValue            `xml:"option,omitempty"`
}

type HostSnmpSystemAgentLimits struct {
	*DynamicData

	MaxReadOnlyCommunities int32                    `xml:"maxReadOnlyCommunities,omitempty"`
	MaxTrapDestinations    int32                    `xml:"maxTrapDestinations,omitempty"`
	MaxCommunityLength     int32                    `xml:"maxCommunityLength,omitempty"`
	MaxBufferSize          int32                    `xml:"maxBufferSize,omitempty"`
	Capability             *HostSnmpAgentCapability `xml:"capability,omitempty"`
}

type HostSriovConfig struct {
	*HostPciPassthruConfig

	SriovEnabled       bool  `xml:"sriovEnabled,omitempty"`
	NumVirtualFunction int32 `xml:"numVirtualFunction,omitempty"`
}

type HostSriovInfo struct {
	*HostPciPassthruInfo

	SriovEnabled                bool  `xml:"sriovEnabled,omitempty"`
	SriovCapable                bool  `xml:"sriovCapable,omitempty"`
	SriovActive                 bool  `xml:"sriovActive,omitempty"`
	NumVirtualFunctionRequested int32 `xml:"numVirtualFunctionRequested,omitempty"`
	NumVirtualFunction          int32 `xml:"numVirtualFunction,omitempty"`
	MaxVirtualFunctionSupported int32 `xml:"maxVirtualFunctionSupported,omitempty"`
}

type HostSslThumbprintInfo struct {
	*DynamicData

	Principal      string   `xml:"principal,omitempty"`
	OwnerTag       string   `xml:"ownerTag,omitempty"`
	SslThumbprints []string `xml:"sslThumbprints,omitempty"`
}

type ArrayOfHostSslThumbprintInfo struct {
	HostSslThumbprintInfo []*HostSslThumbprintInfo `xml:"HostSslThumbprintInfo,omitempty"`
}

type HostStorageArrayTypePolicyOption struct {
	*DynamicData

	Policy *ElementDescription `xml:"policy,omitempty"`
}

type ArrayOfHostStorageArrayTypePolicyOption struct {
	HostStorageArrayTypePolicyOption []*HostStorageArrayTypePolicyOption `xml:"HostStorageArrayTypePolicyOption,omitempty"`
}

type HostStorageDeviceInfo struct {
	*DynamicData

	HostBusAdapter              []*HostHostBusAdapter  `xml:"hostBusAdapter,omitempty"`
	ScsiLun                     []*ScsiLun             `xml:"scsiLun,omitempty"`
	ScsiTopology                *HostScsiTopology      `xml:"scsiTopology,omitempty"`
	MultipathInfo               *HostMultipathInfo     `xml:"multipathInfo,omitempty"`
	PlugStoreTopology           *HostPlugStoreTopology `xml:"plugStoreTopology,omitempty"`
	SoftwareInternetScsiEnabled bool                   `xml:"softwareInternetScsiEnabled,omitempty"`
}

type HostHardwareSummary struct {
	*DynamicData

	Vendor               string                          `xml:"vendor,omitempty"`
	Model                string                          `xml:"model,omitempty"`
	Uuid                 string                          `xml:"uuid,omitempty"`
	OtherIdentifyingInfo []*HostSystemIdentificationInfo `xml:"otherIdentifyingInfo,omitempty"`
	MemorySize           int64                           `xml:"memorySize,omitempty"`
	CpuModel             string                          `xml:"cpuModel,omitempty"`
	CpuMhz               int32                           `xml:"cpuMhz,omitempty"`
	NumCpuPkgs           int16                           `xml:"numCpuPkgs,omitempty"`
	NumCpuCores          int16                           `xml:"numCpuCores,omitempty"`
	NumCpuThreads        int16                           `xml:"numCpuThreads,omitempty"`
	NumNics              int32                           `xml:"numNics,omitempty"`
	NumHBAs              int32                           `xml:"numHBAs,omitempty"`
}

type HostListSummaryQuickStats struct {
	*DynamicData

	OverallCpuUsage           int32 `xml:"overallCpuUsage,omitempty"`
	OverallMemoryUsage        int32 `xml:"overallMemoryUsage,omitempty"`
	DistributedCpuFairness    int32 `xml:"distributedCpuFairness,omitempty"`
	DistributedMemoryFairness int32 `xml:"distributedMemoryFairness,omitempty"`
	Uptime                    int32 `xml:"uptime,omitempty"`
}

type HostConfigSummary struct {
	*DynamicData

	Name                  string                    `xml:"name,omitempty"`
	Port                  int32                     `xml:"port,omitempty"`
	SslThumbprint         string                    `xml:"sslThumbprint,omitempty"`
	Product               *AboutInfo                `xml:"product,omitempty"`
	VmotionEnabled        bool                      `xml:"vmotionEnabled,omitempty"`
	FaultToleranceEnabled bool                      `xml:"faultToleranceEnabled,omitempty"`
	FeatureVersion        []*HostFeatureVersionInfo `xml:"featureVersion,omitempty"`
	AgentVmDatastore      *ManagedObjectReference   `xml:"agentVmDatastore,omitempty"`
	AgentVmNetwork        *ManagedObjectReference   `xml:"agentVmNetwork,omitempty"`
}

type HostListSummary struct {
	*DynamicData

	Host               *ManagedObjectReference    `xml:"host,omitempty"`
	Hardware           *HostHardwareSummary       `xml:"hardware,omitempty"`
	Runtime            *HostRuntimeInfo           `xml:"runtime,omitempty"`
	Config             *HostConfigSummary         `xml:"config,omitempty"`
	QuickStats         *HostListSummaryQuickStats `xml:"quickStats,omitempty"`
	OverallStatus      *ManagedEntityStatus       `xml:"overallStatus,omitempty"`
	RebootRequired     bool                       `xml:"rebootRequired,omitempty"`
	CustomValue        []*CustomFieldValue        `xml:"customValue,omitempty"`
	ManagementServerIp string                     `xml:"managementServerIp,omitempty"`
	MaxEVCModeKey      string                     `xml:"maxEVCModeKey,omitempty"`
	CurrentEVCModeKey  string                     `xml:"currentEVCModeKey,omitempty"`
}

type HostSystemHealthInfo struct {
	*DynamicData

	NumericSensorInfo []*HostNumericSensorInfo `xml:"numericSensorInfo,omitempty"`
}

type HostSystemIdentificationInfo struct {
	*DynamicData

	IdentifierValue string              `xml:"identifierValue,omitempty"`
	IdentifierType  *ElementDescription `xml:"identifierType,omitempty"`
}

type ArrayOfHostSystemIdentificationInfo struct {
	HostSystemIdentificationInfo []*HostSystemIdentificationInfo `xml:"HostSystemIdentificationInfo,omitempty"`
}

type HostSystemResourceInfo struct {
	*DynamicData

	Key    string                    `xml:"key,omitempty"`
	Config *ResourceConfigSpec       `xml:"config,omitempty"`
	Child  []*HostSystemResourceInfo `xml:"child,omitempty"`
}

type ArrayOfHostSystemResourceInfo struct {
	HostSystemResourceInfo []*HostSystemResourceInfo `xml:"HostSystemResourceInfo,omitempty"`
}

type HostSystemSwapConfigurationSystemSwapOption struct {
	*DynamicData

	Key int32 `xml:"key,omitempty"`
}

type ArrayOfHostSystemSwapConfigurationSystemSwapOption struct {
	HostSystemSwapConfigurationSystemSwapOption []*HostSystemSwapConfigurationSystemSwapOption `xml:"HostSystemSwapConfigurationSystemSwapOption,omitempty"`
}

type HostSystemSwapConfigurationDisabledOption struct {
	*HostSystemSwapConfigurationSystemSwapOption
}

type HostSystemSwapConfigurationHostCacheOption struct {
	*HostSystemSwapConfigurationSystemSwapOption
}

type HostSystemSwapConfigurationHostLocalSwapOption struct {
	*HostSystemSwapConfigurationSystemSwapOption
}

type HostSystemSwapConfigurationDatastoreOption struct {
	*HostSystemSwapConfigurationSystemSwapOption

	Datastore string `xml:"datastore,omitempty"`
}

type HostSystemSwapConfiguration struct {
	*DynamicData

	Option []*HostSystemSwapConfigurationSystemSwapOption `xml:"option,omitempty"`
}

type HostTargetTransport struct {
	*DynamicData
}

type HostParallelScsiTargetTransport struct {
	*HostTargetTransport
}

type HostBlockAdapterTargetTransport struct {
	*HostTargetTransport
}

type HostFibreChannelTargetTransport struct {
	*HostTargetTransport

	PortWorldWideName int64 `xml:"portWorldWideName,omitempty"`
	NodeWorldWideName int64 `xml:"nodeWorldWideName,omitempty"`
}

type HostInternetScsiTargetTransport struct {
	*HostTargetTransport

	IScsiName  string   `xml:"iScsiName,omitempty"`
	IScsiAlias string   `xml:"iScsiAlias,omitempty"`
	Address    []string `xml:"address,omitempty"`
}

type HostFibreChannelOverEthernetTargetTransport struct {
	*HostFibreChannelTargetTransport

	VnportMac string `xml:"vnportMac,omitempty"`
	FcfMac    string `xml:"fcfMac,omitempty"`
	VlanId    int32  `xml:"vlanId,omitempty"`
}

type HostTpmAttestationReport struct {
	*DynamicData

	TpmPcrValues   []*HostTpmDigestInfo    `xml:"tpmPcrValues,omitempty"`
	TpmEvents      []*HostTpmEventLogEntry `xml:"tpmEvents,omitempty"`
	TpmLogReliable bool                    `xml:"tpmLogReliable,omitempty"`
}

type HostTpmBootSecurityOptionEventDetails struct {
	*HostTpmEventDetails

	BootSecurityOption string `xml:"bootSecurityOption,omitempty"`
}

type HostTpmCommandEventDetails struct {
	*HostTpmEventDetails

	CommandLine string `xml:"commandLine,omitempty"`
}

type HostDigestInfo struct {
	*DynamicData

	DigestMethod string `xml:"digestMethod,omitempty"`
	DigestValue  []int8 `xml:"digestValue,omitempty"`
	ObjectName   string `xml:"objectName,omitempty"`
}

type HostTpmDigestInfo struct {
	*HostDigestInfo

	PcrNumber int32 `xml:"pcrNumber,omitempty"`
}

type ArrayOfHostTpmDigestInfo struct {
	HostTpmDigestInfo []*HostTpmDigestInfo `xml:"HostTpmDigestInfo,omitempty"`
}

type HostTpmEventDetails struct {
	*DynamicData

	DataHash []int8 `xml:"dataHash,omitempty"`
}

type HostTpmEventLogEntry struct {
	*DynamicData

	PcrIndex     int32                `xml:"pcrIndex,omitempty"`
	EventDetails *HostTpmEventDetails `xml:"eventDetails,omitempty"`
}

type ArrayOfHostTpmEventLogEntry struct {
	HostTpmEventLogEntry []*HostTpmEventLogEntry `xml:"HostTpmEventLogEntry,omitempty"`
}

type HostTpmOptionEventDetails struct {
	*HostTpmEventDetails

	OptionsFileName string `xml:"optionsFileName,omitempty"`
	BootOptions     []int8 `xml:"bootOptions,omitempty"`
}

type HostTpmSoftwareComponentEventDetails struct {
	*HostTpmEventDetails

	ComponentName string `xml:"componentName,omitempty"`
	VibName       string `xml:"vibName,omitempty"`
	VibVersion    string `xml:"vibVersion,omitempty"`
	VibVendor     string `xml:"vibVendor,omitempty"`
}

type HostUnresolvedVmfsExtent struct {
	*DynamicData

	Device       *HostScsiDiskPartition `xml:"device,omitempty"`
	DevicePath   string                 `xml:"devicePath,omitempty"`
	VmfsUuid     string                 `xml:"vmfsUuid,omitempty"`
	IsHeadExtent bool                   `xml:"isHeadExtent,omitempty"`
	Ordinal      int32                  `xml:"ordinal,omitempty"`
	StartBlock   int32                  `xml:"startBlock,omitempty"`
	EndBlock     int32                  `xml:"endBlock,omitempty"`
	Reason       string                 `xml:"reason,omitempty"`
}

type ArrayOfHostUnresolvedVmfsExtent struct {
	HostUnresolvedVmfsExtent []*HostUnresolvedVmfsExtent `xml:"HostUnresolvedVmfsExtent,omitempty"`
}

type HostUnresolvedVmfsResignatureSpec struct {
	*DynamicData

	ExtentDevicePath []string `xml:"extentDevicePath,omitempty"`
}

type HostUnresolvedVmfsResolutionResult struct {
	*DynamicData

	Spec  *HostUnresolvedVmfsResolutionSpec `xml:"spec,omitempty"`
	Vmfs  *HostVmfsVolume                   `xml:"vmfs,omitempty"`
	Fault *LocalizedMethodFault             `xml:"fault,omitempty"`
}

type ArrayOfHostUnresolvedVmfsResolutionResult struct {
	HostUnresolvedVmfsResolutionResult []*HostUnresolvedVmfsResolutionResult `xml:"HostUnresolvedVmfsResolutionResult,omitempty"`
}

type HostUnresolvedVmfsResolutionSpec struct {
	*DynamicData

	ExtentDevicePath []string `xml:"extentDevicePath,omitempty"`
	UuidResolution   string   `xml:"uuidResolution,omitempty"`
}

type ArrayOfHostUnresolvedVmfsResolutionSpec struct {
	HostUnresolvedVmfsResolutionSpec []*HostUnresolvedVmfsResolutionSpec `xml:"HostUnresolvedVmfsResolutionSpec,omitempty"`
}

type HostUnresolvedVmfsVolumeResolveStatus struct {
	*DynamicData

	Resolvable        bool `xml:"resolvable,omitempty"`
	IncompleteExtents bool `xml:"incompleteExtents,omitempty"`
	MultipleCopies    bool `xml:"multipleCopies,omitempty"`
}

type HostUnresolvedVmfsVolume struct {
	*DynamicData

	Extent        []*HostUnresolvedVmfsExtent            `xml:"extent,omitempty"`
	VmfsLabel     string                                 `xml:"vmfsLabel,omitempty"`
	VmfsUuid      string                                 `xml:"vmfsUuid,omitempty"`
	TotalBlocks   int32                                  `xml:"totalBlocks,omitempty"`
	ResolveStatus *HostUnresolvedVmfsVolumeResolveStatus `xml:"resolveStatus,omitempty"`
}

type ArrayOfHostUnresolvedVmfsVolume struct {
	HostUnresolvedVmfsVolume []*HostUnresolvedVmfsVolume `xml:"HostUnresolvedVmfsVolume,omitempty"`
}

type HostVFlashManagerVFlashResourceConfigSpec struct {
	*DynamicData

	VffsUuid string `xml:"vffsUuid,omitempty"`
}

type HostVFlashManagerVFlashResourceConfigInfo struct {
	*DynamicData

	Vffs     *HostVffsVolume `xml:"vffs,omitempty"`
	Capacity int64           `xml:"capacity,omitempty"`
}

type HostVFlashManagerVFlashResourceRunTimeInfo struct {
	*DynamicData

	Usage              int64 `xml:"usage,omitempty"`
	Capacity           int64 `xml:"capacity,omitempty"`
	Accessible         bool  `xml:"accessible,omitempty"`
	CapacityForVmCache int64 `xml:"capacityForVmCache,omitempty"`
	FreeForVmCache     int64 `xml:"freeForVmCache,omitempty"`
}

type HostVFlashManagerVFlashCacheConfigSpec struct {
	*DynamicData

	DefaultVFlashModule      string `xml:"defaultVFlashModule,omitempty"`
	SwapCacheReservationInGB int64  `xml:"swapCacheReservationInGB,omitempty"`
}

type HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption struct {
	*DynamicData

	VFlashModule              string        `xml:"vFlashModule,omitempty"`
	VFlashModuleVersion       string        `xml:"vFlashModuleVersion,omitempty"`
	MinSupportedModuleVersion string        `xml:"minSupportedModuleVersion,omitempty"`
	CacheConsistencyType      *ChoiceOption `xml:"cacheConsistencyType,omitempty"`
	CacheMode                 *ChoiceOption `xml:"cacheMode,omitempty"`
	BlockSizeInKBOption       *LongOption   `xml:"blockSizeInKBOption,omitempty"`
	ReservationInMBOption     *LongOption   `xml:"reservationInMBOption,omitempty"`
	MaxDiskSizeInKB           int64         `xml:"maxDiskSizeInKB,omitempty"`
}

type ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption struct {
	HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption []*HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption `xml:"HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption,omitempty"`
}

type HostVFlashManagerVFlashCacheConfigInfo struct {
	*DynamicData

	VFlashModuleConfigOption []*HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption `xml:"vFlashModuleConfigOption,omitempty"`
	DefaultVFlashModule      string                                                            `xml:"defaultVFlashModule,omitempty"`
	SwapCacheReservationInGB int64                                                             `xml:"swapCacheReservationInGB,omitempty"`
}

type HostVFlashManagerVFlashConfigInfo struct {
	*DynamicData

	VFlashResourceConfigInfo *HostVFlashManagerVFlashResourceConfigInfo `xml:"vFlashResourceConfigInfo,omitempty"`
	VFlashCacheConfigInfo    *HostVFlashManagerVFlashCacheConfigInfo    `xml:"vFlashCacheConfigInfo,omitempty"`
}

type HostVFlashResourceConfigurationResult struct {
	*DynamicData

	DevicePath              []string                       `xml:"devicePath,omitempty"`
	Vffs                    *HostVffsVolume                `xml:"vffs,omitempty"`
	DiskConfigurationResult []*HostDiskConfigurationResult `xml:"diskConfigurationResult,omitempty"`
}

type HostVMotionConfig struct {
	*DynamicData

	VmotionNicKey string `xml:"vmotionNicKey,omitempty"`
	Enabled       bool   `xml:"enabled,omitempty"`
}

type HostVMotionInfo struct {
	*DynamicData

	NetConfig *HostVMotionNetConfig `xml:"netConfig,omitempty"`
	IpConfig  *HostIpConfig         `xml:"ipConfig,omitempty"`
}

type HostVMotionNetConfig struct {
	*DynamicData

	CandidateVnic []*HostVirtualNic `xml:"candidateVnic,omitempty"`
	SelectedVnic  string            `xml:"selectedVnic,omitempty"`
}

type HostVffsSpec struct {
	*DynamicData

	DevicePath   string                 `xml:"devicePath,omitempty"`
	Partition    *HostDiskPartitionSpec `xml:"partition,omitempty"`
	MajorVersion int32                  `xml:"majorVersion,omitempty"`
	VolumeName   string                 `xml:"volumeName,omitempty"`
}

type HostVffsVolume struct {
	*HostFileSystemVolume

	MajorVersion int32                    `xml:"majorVersion,omitempty"`
	Version      string                   `xml:"version,omitempty"`
	Uuid         string                   `xml:"uuid,omitempty"`
	Extent       []*HostScsiDiskPartition `xml:"extent,omitempty"`
}

type HostVirtualNicSpec struct {
	*DynamicData

	Ip                     *HostIpConfig                           `xml:"ip,omitempty"`
	Mac                    string                                  `xml:"mac,omitempty"`
	DistributedVirtualPort *DistributedVirtualSwitchPortConnection `xml:"distributedVirtualPort,omitempty"`
	Portgroup              string                                  `xml:"portgroup,omitempty"`
	Mtu                    int32                                   `xml:"mtu,omitempty"`
	TsoEnabled             bool                                    `xml:"tsoEnabled,omitempty"`
	NetStackInstanceKey    string                                  `xml:"netStackInstanceKey,omitempty"`
}

type HostVirtualNicConfig struct {
	*DynamicData

	ChangeOperation string              `xml:"changeOperation,omitempty"`
	Device          string              `xml:"device,omitempty"`
	Portgroup       string              `xml:"portgroup,omitempty"`
	Spec            *HostVirtualNicSpec `xml:"spec,omitempty"`
}

type ArrayOfHostVirtualNicConfig struct {
	HostVirtualNicConfig []*HostVirtualNicConfig `xml:"HostVirtualNicConfig,omitempty"`
}

type HostVirtualNic struct {
	*DynamicData

	Device    string              `xml:"device,omitempty"`
	Key       string              `xml:"key,omitempty"`
	Portgroup string              `xml:"portgroup,omitempty"`
	Spec      *HostVirtualNicSpec `xml:"spec,omitempty"`
	Port      string              `xml:"port,omitempty"`
}

type ArrayOfHostVirtualNic struct {
	HostVirtualNic []*HostVirtualNic `xml:"HostVirtualNic,omitempty"`
}

type HostVirtualNicConnection struct {
	*DynamicData

	Portgroup string                                  `xml:"portgroup,omitempty"`
	DvPort    *DistributedVirtualSwitchPortConnection `xml:"dvPort,omitempty"`
}

type HostVirtualNicManagerNicTypeSelection struct {
	*DynamicData

	Vnic    *HostVirtualNicConnection `xml:"vnic,omitempty"`
	NicType []string                  `xml:"nicType,omitempty"`
}

type ArrayOfHostVirtualNicManagerNicTypeSelection struct {
	HostVirtualNicManagerNicTypeSelection []*HostVirtualNicManagerNicTypeSelection `xml:"HostVirtualNicManagerNicTypeSelection,omitempty"`
}

type VirtualNicManagerNetConfig struct {
	*DynamicData

	NicType            string            `xml:"nicType,omitempty"`
	MultiSelectAllowed bool              `xml:"multiSelectAllowed,omitempty"`
	CandidateVnic      []*HostVirtualNic `xml:"candidateVnic,omitempty"`
	SelectedVnic       []string          `xml:"selectedVnic,omitempty"`
}

type ArrayOfVirtualNicManagerNetConfig struct {
	VirtualNicManagerNetConfig []*VirtualNicManagerNetConfig `xml:"VirtualNicManagerNetConfig,omitempty"`
}

type HostVirtualNicManagerInfo struct {
	*DynamicData

	NetConfig []*VirtualNicManagerNetConfig `xml:"netConfig,omitempty"`
}

type HostVirtualSwitchBridge struct {
	*DynamicData
}

type HostVirtualSwitchAutoBridge struct {
	*HostVirtualSwitchBridge

	ExcludedNicDevice []string `xml:"excludedNicDevice,omitempty"`
}

type HostVirtualSwitchSimpleBridge struct {
	*HostVirtualSwitchBridge

	NicDevice string `xml:"nicDevice,omitempty"`
}

type HostVirtualSwitchBondBridge struct {
	*HostVirtualSwitchBridge

	NicDevice                   []string                       `xml:"nicDevice,omitempty"`
	Beacon                      *HostVirtualSwitchBeaconConfig `xml:"beacon,omitempty"`
	LinkDiscoveryProtocolConfig *LinkDiscoveryProtocolConfig   `xml:"linkDiscoveryProtocolConfig,omitempty"`
}

type HostVirtualSwitchBeaconConfig struct {
	*DynamicData

	Interval int32 `xml:"interval,omitempty"`
}

type HostVirtualSwitchSpec struct {
	*DynamicData

	NumPorts int32                    `xml:"numPorts,omitempty"`
	Bridge   *HostVirtualSwitchBridge `xml:"bridge,omitempty"`
	Policy   *HostNetworkPolicy       `xml:"policy,omitempty"`
	Mtu      int32                    `xml:"mtu,omitempty"`
}

type HostVirtualSwitchConfig struct {
	*DynamicData

	ChangeOperation string                 `xml:"changeOperation,omitempty"`
	Name            string                 `xml:"name,omitempty"`
	Spec            *HostVirtualSwitchSpec `xml:"spec,omitempty"`
}

type ArrayOfHostVirtualSwitchConfig struct {
	HostVirtualSwitchConfig []*HostVirtualSwitchConfig `xml:"HostVirtualSwitchConfig,omitempty"`
}

type HostVirtualSwitch struct {
	*DynamicData

	Name              string                 `xml:"name,omitempty"`
	Key               string                 `xml:"key,omitempty"`
	NumPorts          int32                  `xml:"numPorts,omitempty"`
	NumPortsAvailable int32                  `xml:"numPortsAvailable,omitempty"`
	Mtu               int32                  `xml:"mtu,omitempty"`
	Portgroup         []string               `xml:"portgroup,omitempty"`
	Pnic              []string               `xml:"pnic,omitempty"`
	Spec              *HostVirtualSwitchSpec `xml:"spec,omitempty"`
}

type ArrayOfHostVirtualSwitch struct {
	HostVirtualSwitch []*HostVirtualSwitch `xml:"HostVirtualSwitch,omitempty"`
}

type HostVmciAccessManagerAccessSpec struct {
	*DynamicData

	Vm       *ManagedObjectReference `xml:"vm,omitempty"`
	Services []string                `xml:"services,omitempty"`
	Mode     string                  `xml:"mode,omitempty"`
}

type ArrayOfHostVmciAccessManagerAccessSpec struct {
	HostVmciAccessManagerAccessSpec []*HostVmciAccessManagerAccessSpec `xml:"HostVmciAccessManagerAccessSpec,omitempty"`
}

type HostVmfsRescanResult struct {
	*DynamicData

	Host  *ManagedObjectReference `xml:"host,omitempty"`
	Fault *LocalizedMethodFault   `xml:"fault,omitempty"`
}

type ArrayOfHostVmfsRescanResult struct {
	HostVmfsRescanResult []*HostVmfsRescanResult `xml:"HostVmfsRescanResult,omitempty"`
}

type HostVmfsSpec struct {
	*DynamicData

	Extent       *HostScsiDiskPartition `xml:"extent,omitempty"`
	BlockSizeMb  int32                  `xml:"blockSizeMb,omitempty"`
	MajorVersion int32                  `xml:"majorVersion,omitempty"`
	VolumeName   string                 `xml:"volumeName,omitempty"`
}

type HostVmfsVolume struct {
	*HostFileSystemVolume

	BlockSizeMb      int32                    `xml:"blockSizeMb,omitempty"`
	MaxBlocks        int32                    `xml:"maxBlocks,omitempty"`
	MajorVersion     int32                    `xml:"majorVersion,omitempty"`
	Version          string                   `xml:"version,omitempty"`
	Uuid             string                   `xml:"uuid,omitempty"`
	Extent           []*HostScsiDiskPartition `xml:"extent,omitempty"`
	VmfsUpgradable   bool                     `xml:"vmfsUpgradable,omitempty"`
	ForceMountedInfo *HostForceMountedInfo    `xml:"forceMountedInfo,omitempty"`
	Ssd              bool                     `xml:"ssd,omitempty"`
	Local            bool                     `xml:"local,omitempty"`
}

type HostVsanInternalSystemCmmdsQuery struct {
	*DynamicData

	Type_ string `xml:"type,omitempty"`
	Uuid  string `xml:"uuid,omitempty"`
	Owner string `xml:"owner,omitempty"`
}

type ArrayOfHostVsanInternalSystemCmmdsQuery struct {
	HostVsanInternalSystemCmmdsQuery []*HostVsanInternalSystemCmmdsQuery `xml:"HostVsanInternalSystemCmmdsQuery,omitempty"`
}

type NetDhcpConfigInfoDhcpOptions struct {
	*DynamicData

	Enable bool        `xml:"enable,omitempty"`
	Config []*KeyValue `xml:"config,omitempty"`
}

type NetDhcpConfigInfo struct {
	*DynamicData

	Ipv6 *NetDhcpConfigInfoDhcpOptions `xml:"ipv6,omitempty"`
	Ipv4 *NetDhcpConfigInfoDhcpOptions `xml:"ipv4,omitempty"`
}

type NetDhcpConfigSpecDhcpOptionsSpec struct {
	*DynamicData

	Enable    bool        `xml:"enable,omitempty"`
	Config    []*KeyValue `xml:"config,omitempty"`
	Operation string      `xml:"operation,omitempty"`
}

type NetDhcpConfigSpec struct {
	*DynamicData

	Ipv6 *NetDhcpConfigSpecDhcpOptionsSpec `xml:"ipv6,omitempty"`
	Ipv4 *NetDhcpConfigSpecDhcpOptionsSpec `xml:"ipv4,omitempty"`
}

type NetDnsConfigInfo struct {
	*DynamicData

	Dhcp         bool     `xml:"dhcp,omitempty"`
	HostName     string   `xml:"hostName,omitempty"`
	DomainName   string   `xml:"domainName,omitempty"`
	IpAddress    []string `xml:"ipAddress,omitempty"`
	SearchDomain []string `xml:"searchDomain,omitempty"`
}

type NetDnsConfigSpec struct {
	*DynamicData

	Dhcp         bool     `xml:"dhcp,omitempty"`
	HostName     string   `xml:"hostName,omitempty"`
	DomainName   string   `xml:"domainName,omitempty"`
	IpAddress    []string `xml:"ipAddress,omitempty"`
	SearchDomain []string `xml:"searchDomain,omitempty"`
}

type NetIpConfigInfoIpAddress struct {
	*DynamicData

	IpAddress    string    `xml:"ipAddress,omitempty"`
	PrefixLength int32     `xml:"prefixLength,omitempty"`
	Origin       string    `xml:"origin,omitempty"`
	State        string    `xml:"state,omitempty"`
	Lifetime     time.Time `xml:"lifetime,omitempty"`
}

type ArrayOfNetIpConfigInfoIpAddress struct {
	NetIpConfigInfoIpAddress []*NetIpConfigInfoIpAddress `xml:"NetIpConfigInfoIpAddress,omitempty"`
}

type NetIpConfigInfo struct {
	*DynamicData

	IpAddress                []*NetIpConfigInfoIpAddress `xml:"ipAddress,omitempty"`
	Dhcp                     *NetDhcpConfigInfo          `xml:"dhcp,omitempty"`
	AutoConfigurationEnabled bool                        `xml:"autoConfigurationEnabled,omitempty"`
}

type NetIpConfigSpecIpAddressSpec struct {
	*DynamicData

	IpAddress    string `xml:"ipAddress,omitempty"`
	PrefixLength int32  `xml:"prefixLength,omitempty"`
	Operation    string `xml:"operation,omitempty"`
}

type ArrayOfNetIpConfigSpecIpAddressSpec struct {
	NetIpConfigSpecIpAddressSpec []*NetIpConfigSpecIpAddressSpec `xml:"NetIpConfigSpecIpAddressSpec,omitempty"`
}

type NetIpConfigSpec struct {
	*DynamicData

	IpAddress                []*NetIpConfigSpecIpAddressSpec `xml:"ipAddress,omitempty"`
	Dhcp                     *NetDhcpConfigSpec              `xml:"dhcp,omitempty"`
	AutoConfigurationEnabled bool                            `xml:"autoConfigurationEnabled,omitempty"`
}

type NetIpRouteConfigInfoGateway struct {
	*DynamicData

	IpAddress string `xml:"ipAddress,omitempty"`
	Device    string `xml:"device,omitempty"`
}

type NetIpRouteConfigInfoIpRoute struct {
	*DynamicData

	Network      string                       `xml:"network,omitempty"`
	PrefixLength int32                        `xml:"prefixLength,omitempty"`
	Gateway      *NetIpRouteConfigInfoGateway `xml:"gateway,omitempty"`
}

type ArrayOfNetIpRouteConfigInfoIpRoute struct {
	NetIpRouteConfigInfoIpRoute []*NetIpRouteConfigInfoIpRoute `xml:"NetIpRouteConfigInfoIpRoute,omitempty"`
}

type NetIpRouteConfigInfo struct {
	*DynamicData

	IpRoute []*NetIpRouteConfigInfoIpRoute `xml:"ipRoute,omitempty"`
}

type NetIpRouteConfigSpecGatewaySpec struct {
	*DynamicData

	IpAddress string `xml:"ipAddress,omitempty"`
	Device    string `xml:"device,omitempty"`
}

type NetIpRouteConfigSpecIpRouteSpec struct {
	*DynamicData

	Network      string                           `xml:"network,omitempty"`
	PrefixLength int32                            `xml:"prefixLength,omitempty"`
	Gateway      *NetIpRouteConfigSpecGatewaySpec `xml:"gateway,omitempty"`
	Operation    string                           `xml:"operation,omitempty"`
}

type ArrayOfNetIpRouteConfigSpecIpRouteSpec struct {
	NetIpRouteConfigSpecIpRouteSpec []*NetIpRouteConfigSpecIpRouteSpec `xml:"NetIpRouteConfigSpecIpRouteSpec,omitempty"`
}

type NetIpRouteConfigSpec struct {
	*DynamicData

	IpRoute []*NetIpRouteConfigSpecIpRouteSpec `xml:"ipRoute,omitempty"`
}

type NetIpStackInfoNetToMedia struct {
	*DynamicData

	IpAddress       string `xml:"ipAddress,omitempty"`
	PhysicalAddress string `xml:"physicalAddress,omitempty"`
	Device          string `xml:"device,omitempty"`
	Type_           string `xml:"type,omitempty"`
}

type ArrayOfNetIpStackInfoNetToMedia struct {
	NetIpStackInfoNetToMedia []*NetIpStackInfoNetToMedia `xml:"NetIpStackInfoNetToMedia,omitempty"`
}

type NetIpStackInfoDefaultRouter struct {
	*DynamicData

	IpAddress  string    `xml:"ipAddress,omitempty"`
	Device     string    `xml:"device,omitempty"`
	Lifetime   time.Time `xml:"lifetime,omitempty"`
	Preference string    `xml:"preference,omitempty"`
}

type ArrayOfNetIpStackInfoDefaultRouter struct {
	NetIpStackInfoDefaultRouter []*NetIpStackInfoDefaultRouter `xml:"NetIpStackInfoDefaultRouter,omitempty"`
}

type NetIpStackInfo struct {
	*DynamicData

	Neighbor      []*NetIpStackInfoNetToMedia    `xml:"neighbor,omitempty"`
	DefaultRouter []*NetIpStackInfoDefaultRouter `xml:"defaultRouter,omitempty"`
}

type NetBIOSConfigInfo struct {
	*DynamicData

	Mode string `xml:"mode,omitempty"`
}

type WinNetBIOSConfigInfo struct {
	*NetBIOSConfigInfo

	PrimaryWINS   string `xml:"primaryWINS,omitempty"`
	SecondaryWINS string `xml:"secondaryWINS,omitempty"`
}

type ArrayUpdateSpec struct {
	*DynamicData

	Operation *ArrayUpdateOperation `xml:"operation,omitempty"`
	RemoveKey interface{}           `xml:"removeKey,omitempty"`
}

type BoolOption struct {
	*OptionType

	Supported    bool `xml:"supported,omitempty"`
	DefaultValue bool `xml:"defaultValue,omitempty"`
}

type ChoiceOption struct {
	*OptionType

	ChoiceInfo   []*ElementDescription `xml:"choiceInfo,omitempty"`
	DefaultIndex int32                 `xml:"defaultIndex,omitempty"`
}

type FloatOption struct {
	*OptionType

	Min          float32 `xml:"min,omitempty"`
	Max          float32 `xml:"max,omitempty"`
	DefaultValue float32 `xml:"defaultValue,omitempty"`
}

type IntOption struct {
	*OptionType

	Min          int32 `xml:"min,omitempty"`
	Max          int32 `xml:"max,omitempty"`
	DefaultValue int32 `xml:"defaultValue,omitempty"`
}

type LongOption struct {
	*OptionType

	Min          int64 `xml:"min,omitempty"`
	Max          int64 `xml:"max,omitempty"`
	DefaultValue int64 `xml:"defaultValue,omitempty"`
}

type OptionDef struct {
	*ElementDescription

	OptionType *OptionType `xml:"optionType,omitempty"`
}

type ArrayOfOptionDef struct {
	OptionDef []*OptionDef `xml:"OptionDef,omitempty"`
}

type OptionType struct {
	*DynamicData

	ValueIsReadonly bool `xml:"valueIsReadonly,omitempty"`
}

type OptionValue struct {
	*DynamicData

	Key   string      `xml:"key,omitempty"`
	Value interface{} `xml:"value,omitempty"`
}

type ArrayOfOptionValue struct {
	OptionValue []*OptionValue `xml:"OptionValue,omitempty"`
}

type StringOption struct {
	*OptionType

	DefaultValue    string `xml:"defaultValue,omitempty"`
	ValidCharacters string `xml:"validCharacters,omitempty"`
}

type ApplyProfile struct {
	*DynamicData

	Enabled         bool                           `xml:"enabled,omitempty"`
	Policy          []*ProfilePolicy               `xml:"policy,omitempty"`
	ProfileTypeName string                         `xml:"profileTypeName,omitempty"`
	ProfileVersion  string                         `xml:"profileVersion,omitempty"`
	Property        []*ProfileApplyProfileProperty `xml:"property,omitempty"`
}

type ArrayOfApplyProfile struct {
	ApplyProfile []*ApplyProfile `xml:"ApplyProfile,omitempty"`
}

type ProfileApplyProfileElement struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ProfileApplyProfileProperty struct {
	*DynamicData

	PropertyName string          `xml:"propertyName,omitempty"`
	Array        bool            `xml:"array,omitempty"`
	Profile      []*ApplyProfile `xml:"profile,omitempty"`
}

type ArrayOfProfileApplyProfileProperty struct {
	ProfileApplyProfileProperty []*ProfileApplyProfileProperty `xml:"ProfileApplyProfileProperty,omitempty"`
}

type ComplianceLocator struct {
	*DynamicData

	ExpressionName string               `xml:"expressionName,omitempty"`
	ApplyPath      *ProfilePropertyPath `xml:"applyPath,omitempty"`
}

type ArrayOfComplianceLocator struct {
	ComplianceLocator []*ComplianceLocator `xml:"ComplianceLocator,omitempty"`
}

type ComplianceProfile struct {
	*DynamicData

	Expression     []*ProfileExpression `xml:"expression,omitempty"`
	RootExpression string               `xml:"rootExpression,omitempty"`
}

type ComplianceFailure struct {
	*DynamicData

	FailureType    string              `xml:"failureType,omitempty"`
	Message        *LocalizableMessage `xml:"message,omitempty"`
	ExpressionName string              `xml:"expressionName,omitempty"`
}

type ArrayOfComplianceFailure struct {
	ComplianceFailure []*ComplianceFailure `xml:"ComplianceFailure,omitempty"`
}

type ComplianceResult struct {
	*DynamicData

	Profile          *ManagedObjectReference `xml:"profile,omitempty"`
	ComplianceStatus string                  `xml:"complianceStatus,omitempty"`
	Entity           *ManagedObjectReference `xml:"entity,omitempty"`
	CheckTime        time.Time               `xml:"checkTime,omitempty"`
	Failure          []*ComplianceFailure    `xml:"failure,omitempty"`
}

type ArrayOfComplianceResult struct {
	ComplianceResult []*ComplianceResult `xml:"ComplianceResult,omitempty"`
}

type ProfileDeferredPolicyOptionParameter struct {
	*DynamicData

	InputPath *ProfilePropertyPath `xml:"inputPath,omitempty"`
	Parameter []*KeyAnyValue       `xml:"parameter,omitempty"`
}

type ArrayOfProfileDeferredPolicyOptionParameter struct {
	ProfileDeferredPolicyOptionParameter []*ProfileDeferredPolicyOptionParameter `xml:"ProfileDeferredPolicyOptionParameter,omitempty"`
}

type ProfileExpression struct {
	*DynamicData

	Id          string `xml:"id,omitempty"`
	DisplayName string `xml:"displayName,omitempty"`
	Negated     bool   `xml:"negated,omitempty"`
}

type ArrayOfProfileExpression struct {
	ProfileExpression []*ProfileExpression `xml:"ProfileExpression,omitempty"`
}

type ProfileSimpleExpression struct {
	*ProfileExpression

	ExpressionType string         `xml:"expressionType,omitempty"`
	Parameter      []*KeyAnyValue `xml:"parameter,omitempty"`
}

type ProfileCompositeExpression struct {
	*ProfileExpression

	Operator       string   `xml:"operator,omitempty"`
	ExpressionName []string `xml:"expressionName,omitempty"`
}

type ProfileExpressionMetadata struct {
	*DynamicData

	ExpressionId *ExtendedElementDescription `xml:"expressionId,omitempty"`
	Parameter    []*ProfileParameterMetadata `xml:"parameter,omitempty"`
}

type ArrayOfProfileExpressionMetadata struct {
	ProfileExpressionMetadata []*ProfileExpressionMetadata `xml:"ProfileExpressionMetadata,omitempty"`
}

type ProfileParameterMetadata struct {
	*DynamicData

	Id           *ExtendedElementDescription `xml:"id,omitempty"`
	Type_        string                      `xml:"type,omitempty"`
	Optional     bool                        `xml:"optional,omitempty"`
	DefaultValue interface{}                 `xml:"defaultValue,omitempty"`
}

type ArrayOfProfileParameterMetadata struct {
	ProfileParameterMetadata []*ProfileParameterMetadata `xml:"ProfileParameterMetadata,omitempty"`
}

type ProfilePolicy struct {
	*DynamicData

	Id           string        `xml:"id,omitempty"`
	PolicyOption *PolicyOption `xml:"policyOption,omitempty"`
}

type ArrayOfProfilePolicy struct {
	ProfilePolicy []*ProfilePolicy `xml:"ProfilePolicy,omitempty"`
}

type ProfilePolicyOptionMetadata struct {
	*DynamicData

	Id        *ExtendedElementDescription `xml:"id,omitempty"`
	Parameter []*ProfileParameterMetadata `xml:"parameter,omitempty"`
}

type ArrayOfProfilePolicyOptionMetadata struct {
	ProfilePolicyOptionMetadata []*ProfilePolicyOptionMetadata `xml:"ProfilePolicyOptionMetadata,omitempty"`
}

type ProfileCompositePolicyOptionMetadata struct {
	*ProfilePolicyOptionMetadata

	Option []string `xml:"option,omitempty"`
}

type UserInputRequiredParameterMetadata struct {
	*ProfilePolicyOptionMetadata

	UserInputParameter []*ProfileParameterMetadata `xml:"userInputParameter,omitempty"`
}

type ProfilePolicyMetadata struct {
	*DynamicData

	Id             *ExtendedElementDescription    `xml:"id,omitempty"`
	PossibleOption []*ProfilePolicyOptionMetadata `xml:"possibleOption,omitempty"`
}

type ArrayOfProfilePolicyMetadata struct {
	ProfilePolicyMetadata []*ProfilePolicyMetadata `xml:"ProfilePolicyMetadata,omitempty"`
}

type PolicyOption struct {
	*DynamicData

	Id        string         `xml:"id,omitempty"`
	Parameter []*KeyAnyValue `xml:"parameter,omitempty"`
}

type ArrayOfPolicyOption struct {
	PolicyOption []*PolicyOption `xml:"PolicyOption,omitempty"`
}

type CompositePolicyOption struct {
	*PolicyOption

	Option []*PolicyOption `xml:"option,omitempty"`
}

type ProfileCreateSpec struct {
	*DynamicData

	Name       string `xml:"name,omitempty"`
	Annotation string `xml:"annotation,omitempty"`
	Enabled    bool   `xml:"enabled,omitempty"`
}

type ProfileSerializedCreateSpec struct {
	*ProfileCreateSpec

	ProfileConfigString string `xml:"profileConfigString,omitempty"`
}

type ProfileConfigInfo struct {
	*DynamicData

	Name       string `xml:"name,omitempty"`
	Annotation string `xml:"annotation,omitempty"`
	Enabled    bool   `xml:"enabled,omitempty"`
}

type ProfileDescriptionSection struct {
	*DynamicData

	Description *ExtendedElementDescription `xml:"description,omitempty"`
	Message     []*LocalizableMessage       `xml:"message,omitempty"`
}

type ArrayOfProfileDescriptionSection struct {
	ProfileDescriptionSection []*ProfileDescriptionSection `xml:"ProfileDescriptionSection,omitempty"`
}

type ProfileDescription struct {
	*DynamicData

	Section []*ProfileDescriptionSection `xml:"section,omitempty"`
}

type ProfileMetadataProfileSortSpec struct {
	*DynamicData

	PolicyId  string `xml:"policyId,omitempty"`
	Parameter string `xml:"parameter,omitempty"`
}

type ArrayOfProfileMetadataProfileSortSpec struct {
	ProfileMetadataProfileSortSpec []*ProfileMetadataProfileSortSpec `xml:"ProfileMetadataProfileSortSpec,omitempty"`
}

type ProfileMetadata struct {
	*DynamicData

	Key              string                            `xml:"key,omitempty"`
	ProfileTypeName  string                            `xml:"profileTypeName,omitempty"`
	Description      *ExtendedDescription              `xml:"description,omitempty"`
	SortSpec         []*ProfileMetadataProfileSortSpec `xml:"sortSpec,omitempty"`
	ProfileCategory  string                            `xml:"profileCategory,omitempty"`
	ProfileComponent string                            `xml:"profileComponent,omitempty"`
}

type ArrayOfProfileMetadata struct {
	ProfileMetadata []*ProfileMetadata `xml:"ProfileMetadata,omitempty"`
}

type ProfilePropertyPath struct {
	*DynamicData

	ProfilePath string `xml:"profilePath,omitempty"`
	PolicyId    string `xml:"policyId,omitempty"`
	ParameterId string `xml:"parameterId,omitempty"`
}

type ArrayOfProfilePropertyPath struct {
	ProfilePropertyPath []*ProfilePropertyPath `xml:"ProfilePropertyPath,omitempty"`
}

type ProfileProfileStructure struct {
	*DynamicData

	ProfileTypeName string                             `xml:"profileTypeName,omitempty"`
	Child           []*ProfileProfileStructureProperty `xml:"child,omitempty"`
}

type ProfileProfileStructureProperty struct {
	*DynamicData

	PropertyName string                   `xml:"propertyName,omitempty"`
	Array        bool                     `xml:"array,omitempty"`
	Element      *ProfileProfileStructure `xml:"element,omitempty"`
}

type ArrayOfProfileProfileStructureProperty struct {
	ProfileProfileStructureProperty []*ProfileProfileStructureProperty `xml:"ProfileProfileStructureProperty,omitempty"`
}

type ClusterProfileConfigInfo struct {
	*ProfileConfigInfo

	ComplyProfile *ComplianceProfile `xml:"complyProfile,omitempty"`
}

type ClusterProfileCreateSpec struct {
	*ProfileCreateSpec
}

type ClusterProfileConfigSpec struct {
	*ClusterProfileCreateSpec
}

type ClusterProfileCompleteConfigSpec struct {
	*ClusterProfileConfigSpec

	ComplyProfile *ComplianceProfile `xml:"complyProfile,omitempty"`
}

type ClusterProfileConfigServiceCreateSpec struct {
	*ClusterProfileConfigSpec

	ServiceType []string `xml:"serviceType,omitempty"`
}

type AnswerFile struct {
	*DynamicData

	UserInput    []*ProfileDeferredPolicyOptionParameter `xml:"userInput,omitempty"`
	CreatedTime  time.Time                               `xml:"createdTime,omitempty"`
	ModifiedTime time.Time                               `xml:"modifiedTime,omitempty"`
}

type AnswerFileStatusError struct {
	*DynamicData

	UserInputPath *ProfilePropertyPath `xml:"userInputPath,omitempty"`
	ErrMsg        *LocalizableMessage  `xml:"errMsg,omitempty"`
}

type ArrayOfAnswerFileStatusError struct {
	AnswerFileStatusError []*AnswerFileStatusError `xml:"AnswerFileStatusError,omitempty"`
}

type AnswerFileStatusResult struct {
	*DynamicData

	CheckedTime time.Time                `xml:"checkedTime,omitempty"`
	Host        *ManagedObjectReference  `xml:"host,omitempty"`
	Status      string                   `xml:"status,omitempty"`
	Error       []*AnswerFileStatusError `xml:"error,omitempty"`
}

type ArrayOfAnswerFileStatusResult struct {
	AnswerFileStatusResult []*AnswerFileStatusResult `xml:"AnswerFileStatusResult,omitempty"`
}

type ProfileExecuteError struct {
	*DynamicData

	Path    *ProfilePropertyPath `xml:"path,omitempty"`
	Message *LocalizableMessage  `xml:"message,omitempty"`
}

type ArrayOfProfileExecuteError struct {
	ProfileExecuteError []*ProfileExecuteError `xml:"ProfileExecuteError,omitempty"`
}

type ProfileExecuteResult struct {
	*DynamicData

	Status           string                                  `xml:"status,omitempty"`
	ConfigSpec       *HostConfigSpec                         `xml:"configSpec,omitempty"`
	InapplicablePath []string                                `xml:"inapplicablePath,omitempty"`
	RequireInput     []*ProfileDeferredPolicyOptionParameter `xml:"requireInput,omitempty"`
	Error            []*ProfileExecuteError                  `xml:"error,omitempty"`
}

type HostApplyProfile struct {
	*ApplyProfile

	Memory           *HostMemoryProfile     `xml:"memory,omitempty"`
	Storage          *StorageProfile        `xml:"storage,omitempty"`
	Network          *NetworkProfile        `xml:"network,omitempty"`
	Datetime         *DateTimeProfile       `xml:"datetime,omitempty"`
	Firewall         *FirewallProfile       `xml:"firewall,omitempty"`
	Security         *SecurityProfile       `xml:"security,omitempty"`
	Service          []*ServiceProfile      `xml:"service,omitempty"`
	Option           []*OptionProfile       `xml:"option,omitempty"`
	UserAccount      []*UserProfile         `xml:"userAccount,omitempty"`
	UsergroupAccount []*UserGroupProfile    `xml:"usergroupAccount,omitempty"`
	Authentication   *AuthenticationProfile `xml:"authentication,omitempty"`
}

type PhysicalNicProfile struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ArrayOfPhysicalNicProfile struct {
	PhysicalNicProfile []*PhysicalNicProfile `xml:"PhysicalNicProfile,omitempty"`
}

type HostMemoryProfile struct {
	*ApplyProfile
}

type UserProfile struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ArrayOfUserProfile struct {
	UserProfile []*UserProfile `xml:"UserProfile,omitempty"`
}

type UserGroupProfile struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ArrayOfUserGroupProfile struct {
	UserGroupProfile []*UserGroupProfile `xml:"UserGroupProfile,omitempty"`
}

type SecurityProfile struct {
	*ApplyProfile

	Permission []*PermissionProfile `xml:"permission,omitempty"`
}

type OptionProfile struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ArrayOfOptionProfile struct {
	OptionProfile []*OptionProfile `xml:"OptionProfile,omitempty"`
}

type DateTimeProfile struct {
	*ApplyProfile
}

type ServiceProfile struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ArrayOfServiceProfile struct {
	ServiceProfile []*ServiceProfile `xml:"ServiceProfile,omitempty"`
}

type FirewallProfileRulesetProfile struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ArrayOfFirewallProfileRulesetProfile struct {
	FirewallProfileRulesetProfile []*FirewallProfileRulesetProfile `xml:"FirewallProfileRulesetProfile,omitempty"`
}

type FirewallProfile struct {
	*ApplyProfile

	Ruleset []*FirewallProfileRulesetProfile `xml:"ruleset,omitempty"`
}

type NasStorageProfile struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ArrayOfNasStorageProfile struct {
	NasStorageProfile []*NasStorageProfile `xml:"NasStorageProfile,omitempty"`
}

type StorageProfile struct {
	*ApplyProfile

	NasStorage []*NasStorageProfile `xml:"nasStorage,omitempty"`
}

type NetworkProfileDnsConfigProfile struct {
	*ApplyProfile
}

type NetworkProfile struct {
	*ApplyProfile

	Vswitch                 []*VirtualSwitchProfile           `xml:"vswitch,omitempty"`
	VmPortGroup             []*VmPortGroupProfile             `xml:"vmPortGroup,omitempty"`
	HostPortGroup           []*HostPortGroupProfile           `xml:"hostPortGroup,omitempty"`
	ServiceConsolePortGroup []*ServiceConsolePortGroupProfile `xml:"serviceConsolePortGroup,omitempty"`
	DnsConfig               *NetworkProfileDnsConfigProfile   `xml:"dnsConfig,omitempty"`
	IpRouteConfig           *IpRouteProfile                   `xml:"ipRouteConfig,omitempty"`
	ConsoleIpRouteConfig    *IpRouteProfile                   `xml:"consoleIpRouteConfig,omitempty"`
	Pnic                    []*PhysicalNicProfile             `xml:"pnic,omitempty"`
	Dvswitch                []*DvsProfile                     `xml:"dvswitch,omitempty"`
	DvsServiceConsoleNic    []*DvsServiceConsoleVNicProfile   `xml:"dvsServiceConsoleNic,omitempty"`
	DvsHostNic              []*DvsHostVNicProfile             `xml:"dvsHostNic,omitempty"`
	NetStackInstance        []*NetStackInstanceProfile        `xml:"netStackInstance,omitempty"`
}

type DvsVNicProfile struct {
	*ApplyProfile

	Key      string            `xml:"key,omitempty"`
	IpConfig *IpAddressProfile `xml:"ipConfig,omitempty"`
}

type DvsServiceConsoleVNicProfile struct {
	*DvsVNicProfile
}

type ArrayOfDvsServiceConsoleVNicProfile struct {
	DvsServiceConsoleVNicProfile []*DvsServiceConsoleVNicProfile `xml:"DvsServiceConsoleVNicProfile,omitempty"`
}

type DvsHostVNicProfile struct {
	*DvsVNicProfile
}

type ArrayOfDvsHostVNicProfile struct {
	DvsHostVNicProfile []*DvsHostVNicProfile `xml:"DvsHostVNicProfile,omitempty"`
}

type DvsProfile struct {
	*ApplyProfile

	Key    string               `xml:"key,omitempty"`
	Name   string               `xml:"name,omitempty"`
	Uplink []*PnicUplinkProfile `xml:"uplink,omitempty"`
}

type ArrayOfDvsProfile struct {
	DvsProfile []*DvsProfile `xml:"DvsProfile,omitempty"`
}

type PnicUplinkProfile struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ArrayOfPnicUplinkProfile struct {
	PnicUplinkProfile []*PnicUplinkProfile `xml:"PnicUplinkProfile,omitempty"`
}

type IpRouteProfile struct {
	*ApplyProfile

	StaticRoute []*StaticRouteProfile `xml:"staticRoute,omitempty"`
}

type StaticRouteProfile struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ArrayOfStaticRouteProfile struct {
	StaticRouteProfile []*StaticRouteProfile `xml:"StaticRouteProfile,omitempty"`
}

type LinkProfile struct {
	*ApplyProfile
}

type NumPortsProfile struct {
	*ApplyProfile
}

type VirtualSwitchProfile struct {
	*ApplyProfile

	Key           string                `xml:"key,omitempty"`
	Name          string                `xml:"name,omitempty"`
	Link          *LinkProfile          `xml:"link,omitempty"`
	NumPorts      *NumPortsProfile      `xml:"numPorts,omitempty"`
	NetworkPolicy *NetworkPolicyProfile `xml:"networkPolicy,omitempty"`
}

type ArrayOfVirtualSwitchProfile struct {
	VirtualSwitchProfile []*VirtualSwitchProfile `xml:"VirtualSwitchProfile,omitempty"`
}

type NetStackInstanceProfile struct {
	*ApplyProfile

	Key           string                          `xml:"key,omitempty"`
	DnsConfig     *NetworkProfileDnsConfigProfile `xml:"dnsConfig,omitempty"`
	IpRouteConfig *IpRouteProfile                 `xml:"ipRouteConfig,omitempty"`
}

type ArrayOfNetStackInstanceProfile struct {
	NetStackInstanceProfile []*NetStackInstanceProfile `xml:"NetStackInstanceProfile,omitempty"`
}

type VlanProfile struct {
	*ApplyProfile
}

type VirtualSwitchSelectionProfile struct {
	*ApplyProfile
}

type PortGroupProfile struct {
	*ApplyProfile

	Key           string                         `xml:"key,omitempty"`
	Name          string                         `xml:"name,omitempty"`
	Vlan          *VlanProfile                   `xml:"vlan,omitempty"`
	Vswitch       *VirtualSwitchSelectionProfile `xml:"vswitch,omitempty"`
	NetworkPolicy *NetworkPolicyProfile          `xml:"networkPolicy,omitempty"`
}

type VmPortGroupProfile struct {
	*PortGroupProfile
}

type ArrayOfVmPortGroupProfile struct {
	VmPortGroupProfile []*VmPortGroupProfile `xml:"VmPortGroupProfile,omitempty"`
}

type HostPortGroupProfile struct {
	*PortGroupProfile

	IpConfig *IpAddressProfile `xml:"ipConfig,omitempty"`
}

type ArrayOfHostPortGroupProfile struct {
	HostPortGroupProfile []*HostPortGroupProfile `xml:"HostPortGroupProfile,omitempty"`
}

type ServiceConsolePortGroupProfile struct {
	*PortGroupProfile

	IpConfig *IpAddressProfile `xml:"ipConfig,omitempty"`
}

type ArrayOfServiceConsolePortGroupProfile struct {
	ServiceConsolePortGroupProfile []*ServiceConsolePortGroupProfile `xml:"ServiceConsolePortGroupProfile,omitempty"`
}

type NetworkPolicyProfile struct {
	*ApplyProfile
}

type IpAddressProfile struct {
	*ApplyProfile
}

type AuthenticationProfile struct {
	*ApplyProfile

	ActiveDirectory *ActiveDirectoryProfile `xml:"activeDirectory,omitempty"`
}

type ActiveDirectoryProfile struct {
	*ApplyProfile
}

type PermissionProfile struct {
	*ApplyProfile

	Key string `xml:"key,omitempty"`
}

type ArrayOfPermissionProfile struct {
	PermissionProfile []*PermissionProfile `xml:"PermissionProfile,omitempty"`
}

type HostProfileConfigInfo struct {
	*ProfileConfigInfo

	ApplyProfile           *HostApplyProfile    `xml:"applyProfile,omitempty"`
	DefaultComplyProfile   *ComplianceProfile   `xml:"defaultComplyProfile,omitempty"`
	DefaultComplyLocator   []*ComplianceLocator `xml:"defaultComplyLocator,omitempty"`
	CustomComplyProfile    *ComplianceProfile   `xml:"customComplyProfile,omitempty"`
	DisabledExpressionList []string             `xml:"disabledExpressionList,omitempty"`
}

type HostProfileConfigSpec struct {
	*ProfileCreateSpec
}

type HostProfileSerializedHostProfileSpec struct {
	*ProfileSerializedCreateSpec

	ValidatorHost *ManagedObjectReference `xml:"validatorHost,omitempty"`
}

type HostProfileCompleteConfigSpec struct {
	*HostProfileConfigSpec

	ApplyProfile                  *HostApplyProfile       `xml:"applyProfile,omitempty"`
	CustomComplyProfile           *ComplianceProfile      `xml:"customComplyProfile,omitempty"`
	DisabledExpressionListChanged bool                    `xml:"disabledExpressionListChanged,omitempty"`
	DisabledExpressionList        []string                `xml:"disabledExpressionList,omitempty"`
	ValidatorHost                 *ManagedObjectReference `xml:"validatorHost,omitempty"`
}

type HostProfileHostBasedConfigSpec struct {
	*HostProfileConfigSpec

	Host                 *ManagedObjectReference `xml:"host,omitempty"`
	UseHostProfileEngine bool                    `xml:"useHostProfileEngine,omitempty"`
}

type HostProfileManagerConfigTaskList struct {
	*DynamicData

	ConfigSpec      *HostConfigSpec       `xml:"configSpec,omitempty"`
	TaskDescription []*LocalizableMessage `xml:"taskDescription,omitempty"`
}

type AnswerFileCreateSpec struct {
	*DynamicData
}

type AnswerFileOptionsCreateSpec struct {
	*AnswerFileCreateSpec

	UserInput []*ProfileDeferredPolicyOptionParameter `xml:"userInput,omitempty"`
}

type AnswerFileSerializedCreateSpec struct {
	*AnswerFileCreateSpec

	AnswerFileConfigString string `xml:"answerFileConfigString,omitempty"`
}

type ScheduledTaskDetail struct {
	*TypeDescription

	Frequency string `xml:"frequency,omitempty"`
}

type ArrayOfScheduledTaskDetail struct {
	ScheduledTaskDetail []*ScheduledTaskDetail `xml:"ScheduledTaskDetail,omitempty"`
}

type ScheduledTaskDescription struct {
	*DynamicData

	Action        []*TypeDescription     `xml:"action,omitempty"`
	SchedulerInfo []*ScheduledTaskDetail `xml:"schedulerInfo,omitempty"`
	State         []*ElementDescription  `xml:"state,omitempty"`
	DayOfWeek     []*ElementDescription  `xml:"dayOfWeek,omitempty"`
	WeekOfMonth   []*ElementDescription  `xml:"weekOfMonth,omitempty"`
}

type ScheduledTaskInfo struct {
	*ScheduledTaskSpec

	ScheduledTask    *ManagedObjectReference `xml:"scheduledTask,omitempty"`
	Entity           *ManagedObjectReference `xml:"entity,omitempty"`
	LastModifiedTime time.Time               `xml:"lastModifiedTime,omitempty"`
	LastModifiedUser string                  `xml:"lastModifiedUser,omitempty"`
	NextRunTime      time.Time               `xml:"nextRunTime,omitempty"`
	PrevRunTime      time.Time               `xml:"prevRunTime,omitempty"`
	State            *TaskInfoState          `xml:"state,omitempty"`
	Error            *LocalizedMethodFault   `xml:"error,omitempty"`
	Result           interface{}             `xml:"result,omitempty"`
	Progress         int32                   `xml:"progress,omitempty"`
	ActiveTask       *ManagedObjectReference `xml:"activeTask,omitempty"`
	TaskObject       *ManagedObjectReference `xml:"taskObject,omitempty"`
}

type TaskScheduler struct {
	*DynamicData

	ActiveTime time.Time `xml:"activeTime,omitempty"`
	ExpireTime time.Time `xml:"expireTime,omitempty"`
}

type AfterStartupTaskScheduler struct {
	*TaskScheduler

	Minute int32 `xml:"minute,omitempty"`
}

type OnceTaskScheduler struct {
	*TaskScheduler

	RunAt time.Time `xml:"runAt,omitempty"`
}

type RecurrentTaskScheduler struct {
	*TaskScheduler

	Interval int32 `xml:"interval,omitempty"`
}

type HourlyTaskScheduler struct {
	*RecurrentTaskScheduler

	Minute int32 `xml:"minute,omitempty"`
}

type DailyTaskScheduler struct {
	*HourlyTaskScheduler

	Hour int32 `xml:"hour,omitempty"`
}

type WeeklyTaskScheduler struct {
	*DailyTaskScheduler

	Sunday    bool `xml:"sunday,omitempty"`
	Monday    bool `xml:"monday,omitempty"`
	Tuesday   bool `xml:"tuesday,omitempty"`
	Wednesday bool `xml:"wednesday,omitempty"`
	Thursday  bool `xml:"thursday,omitempty"`
	Friday    bool `xml:"friday,omitempty"`
	Saturday  bool `xml:"saturday,omitempty"`
}

type MonthlyTaskScheduler struct {
	*DailyTaskScheduler
}

type MonthlyByDayTaskScheduler struct {
	*MonthlyTaskScheduler

	Day int32 `xml:"day,omitempty"`
}

type MonthlyByWeekdayTaskScheduler struct {
	*MonthlyTaskScheduler

	Offset  *WeekOfMonth `xml:"offset,omitempty"`
	Weekday *DayOfWeek   `xml:"weekday,omitempty"`
}

type ScheduledTaskSpec struct {
	*DynamicData

	Name         string         `xml:"name,omitempty"`
	Description  string         `xml:"description,omitempty"`
	Enabled      bool           `xml:"enabled,omitempty"`
	Scheduler    *TaskScheduler `xml:"scheduler,omitempty"`
	Action       *Action        `xml:"action,omitempty"`
	Notification string         `xml:"notification,omitempty"`
}

type ApplyStorageRecommendationResult struct {
	*DynamicData

	Vm *ManagedObjectReference `xml:"vm,omitempty"`
}

type StorageDrsConfigInfo struct {
	*DynamicData

	PodConfig *StorageDrsPodConfigInfo  `xml:"podConfig,omitempty"`
	VmConfig  []*StorageDrsVmConfigInfo `xml:"vmConfig,omitempty"`
}

type StorageDrsConfigSpec struct {
	*DynamicData

	PodConfigSpec *StorageDrsPodConfigSpec  `xml:"podConfigSpec,omitempty"`
	VmConfigSpec  []*StorageDrsVmConfigSpec `xml:"vmConfigSpec,omitempty"`
}

type StorageDrsVmConfigSpec struct {
	*ArrayUpdateSpec

	Info *StorageDrsVmConfigInfo `xml:"info,omitempty"`
}

type ArrayOfStorageDrsVmConfigSpec struct {
	StorageDrsVmConfigSpec []*StorageDrsVmConfigSpec `xml:"StorageDrsVmConfigSpec,omitempty"`
}

type StorageDrsPodConfigInfo struct {
	*DynamicData

	Enabled                bool                              `xml:"enabled,omitempty"`
	IoLoadBalanceEnabled   bool                              `xml:"ioLoadBalanceEnabled,omitempty"`
	DefaultVmBehavior      string                            `xml:"defaultVmBehavior,omitempty"`
	LoadBalanceInterval    int32                             `xml:"loadBalanceInterval,omitempty"`
	DefaultIntraVmAffinity bool                              `xml:"defaultIntraVmAffinity,omitempty"`
	SpaceLoadBalanceConfig *StorageDrsSpaceLoadBalanceConfig `xml:"spaceLoadBalanceConfig,omitempty"`
	IoLoadBalanceConfig    *StorageDrsIoLoadBalanceConfig    `xml:"ioLoadBalanceConfig,omitempty"`
	Rule                   []*ClusterRuleInfo                `xml:"rule,omitempty"`
	Option                 []*OptionValue                    `xml:"option,omitempty"`
}

type StorageDrsSpaceLoadBalanceConfig struct {
	*DynamicData

	SpaceUtilizationThreshold     int32 `xml:"spaceUtilizationThreshold,omitempty"`
	MinSpaceUtilizationDifference int32 `xml:"minSpaceUtilizationDifference,omitempty"`
}

type StorageDrsIoLoadBalanceConfig struct {
	*DynamicData

	IoLatencyThreshold       int32 `xml:"ioLatencyThreshold,omitempty"`
	IoLoadImbalanceThreshold int32 `xml:"ioLoadImbalanceThreshold,omitempty"`
}

type StorageDrsPodConfigSpec struct {
	*DynamicData

	Enabled                bool                              `xml:"enabled,omitempty"`
	IoLoadBalanceEnabled   bool                              `xml:"ioLoadBalanceEnabled,omitempty"`
	DefaultVmBehavior      string                            `xml:"defaultVmBehavior,omitempty"`
	LoadBalanceInterval    int32                             `xml:"loadBalanceInterval,omitempty"`
	DefaultIntraVmAffinity bool                              `xml:"defaultIntraVmAffinity,omitempty"`
	SpaceLoadBalanceConfig *StorageDrsSpaceLoadBalanceConfig `xml:"spaceLoadBalanceConfig,omitempty"`
	IoLoadBalanceConfig    *StorageDrsIoLoadBalanceConfig    `xml:"ioLoadBalanceConfig,omitempty"`
	Rule                   []*ClusterRuleSpec                `xml:"rule,omitempty"`
	Option                 []*StorageDrsOptionSpec           `xml:"option,omitempty"`
}

type StorageDrsOptionSpec struct {
	*ArrayUpdateSpec

	Option *OptionValue `xml:"option,omitempty"`
}

type ArrayOfStorageDrsOptionSpec struct {
	StorageDrsOptionSpec []*StorageDrsOptionSpec `xml:"StorageDrsOptionSpec,omitempty"`
}

type VmPodConfigForPlacement struct {
	*DynamicData

	StoragePod  *ManagedObjectReference `xml:"storagePod,omitempty"`
	Disk        []*PodDiskLocator       `xml:"disk,omitempty"`
	VmConfig    *StorageDrsVmConfigInfo `xml:"vmConfig,omitempty"`
	InterVmRule []*ClusterRuleInfo      `xml:"interVmRule,omitempty"`
}

type ArrayOfVmPodConfigForPlacement struct {
	VmPodConfigForPlacement []*VmPodConfigForPlacement `xml:"VmPodConfigForPlacement,omitempty"`
}

type PodDiskLocator struct {
	*DynamicData

	DiskId          int32                        `xml:"diskId,omitempty"`
	DiskMoveType    string                       `xml:"diskMoveType,omitempty"`
	DiskBackingInfo *VirtualDeviceBackingInfo    `xml:"diskBackingInfo,omitempty"`
	Profile         []*VirtualMachineProfileSpec `xml:"profile,omitempty"`
}

type ArrayOfPodDiskLocator struct {
	PodDiskLocator []*PodDiskLocator `xml:"PodDiskLocator,omitempty"`
}

type StorageDrsPodSelectionSpec struct {
	*DynamicData

	InitialVmConfig []*VmPodConfigForPlacement `xml:"initialVmConfig,omitempty"`
	StoragePod      *ManagedObjectReference    `xml:"storagePod,omitempty"`
}

type StorageMigrationAction struct {
	*ClusterAction

	Vm                 *ManagedObjectReference     `xml:"vm,omitempty"`
	RelocateSpec       *VirtualMachineRelocateSpec `xml:"relocateSpec,omitempty"`
	Source             *ManagedObjectReference     `xml:"source,omitempty"`
	Destination        *ManagedObjectReference     `xml:"destination,omitempty"`
	SizeTransferred    int64                       `xml:"sizeTransferred,omitempty"`
	SpaceUtilSrcBefore float32                     `xml:"spaceUtilSrcBefore,omitempty"`
	SpaceUtilDstBefore float32                     `xml:"spaceUtilDstBefore,omitempty"`
	SpaceUtilSrcAfter  float32                     `xml:"spaceUtilSrcAfter,omitempty"`
	SpaceUtilDstAfter  float32                     `xml:"spaceUtilDstAfter,omitempty"`
	IoLatencySrcBefore float32                     `xml:"ioLatencySrcBefore,omitempty"`
	IoLatencyDstBefore float32                     `xml:"ioLatencyDstBefore,omitempty"`
}

type StoragePlacementAction struct {
	*ClusterAction

	Vm              *ManagedObjectReference     `xml:"vm,omitempty"`
	RelocateSpec    *VirtualMachineRelocateSpec `xml:"relocateSpec,omitempty"`
	Destination     *ManagedObjectReference     `xml:"destination,omitempty"`
	SpaceUtilBefore float32                     `xml:"spaceUtilBefore,omitempty"`
	SpaceUtilAfter  float32                     `xml:"spaceUtilAfter,omitempty"`
	IoLatencyBefore float32                     `xml:"ioLatencyBefore,omitempty"`
}

type StoragePlacementResult struct {
	*DynamicData

	Recommendations []*ClusterRecommendation `xml:"recommendations,omitempty"`
	DrsFault        *ClusterDrsFaults        `xml:"drsFault,omitempty"`
	Task            *ManagedObjectReference  `xml:"task,omitempty"`
}

type StoragePlacementSpec struct {
	*DynamicData

	Type_                     string                      `xml:"type,omitempty"`
	Priority                  *VirtualMachineMovePriority `xml:"priority,omitempty"`
	Vm                        *ManagedObjectReference     `xml:"vm,omitempty"`
	PodSelectionSpec          *StorageDrsPodSelectionSpec `xml:"podSelectionSpec,omitempty"`
	CloneSpec                 *VirtualMachineCloneSpec    `xml:"cloneSpec,omitempty"`
	CloneName                 string                      `xml:"cloneName,omitempty"`
	ConfigSpec                *VirtualMachineConfigSpec   `xml:"configSpec,omitempty"`
	RelocateSpec              *VirtualMachineRelocateSpec `xml:"relocateSpec,omitempty"`
	ResourcePool              *ManagedObjectReference     `xml:"resourcePool,omitempty"`
	Host                      *ManagedObjectReference     `xml:"host,omitempty"`
	Folder                    *ManagedObjectReference     `xml:"folder,omitempty"`
	DisallowPrerequisiteMoves bool                        `xml:"disallowPrerequisiteMoves,omitempty"`
	ResourceLeaseDurationSec  int32                       `xml:"resourceLeaseDurationSec,omitempty"`
}

type VirtualDiskAntiAffinityRuleSpec struct {
	*ClusterRuleInfo

	DiskId []int32 `xml:"diskId,omitempty"`
}

type StorageDrsVmConfigInfo struct {
	*DynamicData

	Vm                  *ManagedObjectReference          `xml:"vm,omitempty"`
	Enabled             bool                             `xml:"enabled,omitempty"`
	Behavior            string                           `xml:"behavior,omitempty"`
	IntraVmAffinity     bool                             `xml:"intraVmAffinity,omitempty"`
	IntraVmAntiAffinity *VirtualDiskAntiAffinityRuleSpec `xml:"intraVmAntiAffinity,omitempty"`
}

type ArrayOfStorageDrsVmConfigInfo struct {
	StorageDrsVmConfigInfo []*StorageDrsVmConfigInfo `xml:"StorageDrsVmConfigInfo,omitempty"`
}

type VAppCloneSpecNetworkMappingPair struct {
	*DynamicData

	Source      *ManagedObjectReference `xml:"source,omitempty"`
	Destination *ManagedObjectReference `xml:"destination,omitempty"`
}

type ArrayOfVAppCloneSpecNetworkMappingPair struct {
	VAppCloneSpecNetworkMappingPair []*VAppCloneSpecNetworkMappingPair `xml:"VAppCloneSpecNetworkMappingPair,omitempty"`
}

type VAppCloneSpecResourceMap struct {
	*DynamicData

	Source       *ManagedObjectReference `xml:"source,omitempty"`
	Parent       *ManagedObjectReference `xml:"parent,omitempty"`
	ResourceSpec *ResourceConfigSpec     `xml:"resourceSpec,omitempty"`
	Location     *ManagedObjectReference `xml:"location,omitempty"`
}

type ArrayOfVAppCloneSpecResourceMap struct {
	VAppCloneSpecResourceMap []*VAppCloneSpecResourceMap `xml:"VAppCloneSpecResourceMap,omitempty"`
}

type VAppCloneSpec struct {
	*DynamicData

	Location        *ManagedObjectReference            `xml:"location,omitempty"`
	Host            *ManagedObjectReference            `xml:"host,omitempty"`
	ResourceSpec    *ResourceConfigSpec                `xml:"resourceSpec,omitempty"`
	VmFolder        *ManagedObjectReference            `xml:"vmFolder,omitempty"`
	NetworkMapping  []*VAppCloneSpecNetworkMappingPair `xml:"networkMapping,omitempty"`
	Property        []*KeyValue                        `xml:"property,omitempty"`
	ResourceMapping []*VAppCloneSpecResourceMap        `xml:"resourceMapping,omitempty"`
	Provisioning    string                             `xml:"provisioning,omitempty"`
}

type VAppEntityConfigInfo struct {
	*DynamicData

	Key               *ManagedObjectReference `xml:"key,omitempty"`
	Tag               string                  `xml:"tag,omitempty"`
	StartOrder        int32                   `xml:"startOrder,omitempty"`
	StartDelay        int32                   `xml:"startDelay,omitempty"`
	WaitingForGuest   bool                    `xml:"waitingForGuest,omitempty"`
	StartAction       string                  `xml:"startAction,omitempty"`
	StopDelay         int32                   `xml:"stopDelay,omitempty"`
	StopAction        string                  `xml:"stopAction,omitempty"`
	DestroyWithParent bool                    `xml:"destroyWithParent,omitempty"`
}

type ArrayOfVAppEntityConfigInfo struct {
	VAppEntityConfigInfo []*VAppEntityConfigInfo `xml:"VAppEntityConfigInfo,omitempty"`
}

type VAppIPAssignmentInfo struct {
	*DynamicData

	SupportedAllocationScheme []string `xml:"supportedAllocationScheme,omitempty"`
	IpAllocationPolicy        string   `xml:"ipAllocationPolicy,omitempty"`
	SupportedIpProtocol       []string `xml:"supportedIpProtocol,omitempty"`
	IpProtocol                string   `xml:"ipProtocol,omitempty"`
}

type IpPoolIpPoolConfigInfo struct {
	*DynamicData

	SubnetAddress       string   `xml:"subnetAddress,omitempty"`
	Netmask             string   `xml:"netmask,omitempty"`
	Gateway             string   `xml:"gateway,omitempty"`
	Range_              string   `xml:"range,omitempty"`
	Dns                 []string `xml:"dns,omitempty"`
	DhcpServerAvailable bool     `xml:"dhcpServerAvailable,omitempty"`
	IpPoolEnabled       bool     `xml:"ipPoolEnabled,omitempty"`
}

type IpPoolAssociation struct {
	*DynamicData

	Network     *ManagedObjectReference `xml:"network,omitempty"`
	NetworkName string                  `xml:"networkName,omitempty"`
}

type ArrayOfIpPoolAssociation struct {
	IpPoolAssociation []*IpPoolAssociation `xml:"IpPoolAssociation,omitempty"`
}

type IpPool struct {
	*DynamicData

	Id                     int32                   `xml:"id,omitempty"`
	Name                   string                  `xml:"name,omitempty"`
	Ipv4Config             *IpPoolIpPoolConfigInfo `xml:"ipv4Config,omitempty"`
	Ipv6Config             *IpPoolIpPoolConfigInfo `xml:"ipv6Config,omitempty"`
	DnsDomain              string                  `xml:"dnsDomain,omitempty"`
	DnsSearchPath          string                  `xml:"dnsSearchPath,omitempty"`
	HostPrefix             string                  `xml:"hostPrefix,omitempty"`
	HttpProxy              string                  `xml:"httpProxy,omitempty"`
	NetworkAssociation     []*IpPoolAssociation    `xml:"networkAssociation,omitempty"`
	AvailableIpv4Addresses int32                   `xml:"availableIpv4Addresses,omitempty"`
	AvailableIpv6Addresses int32                   `xml:"availableIpv6Addresses,omitempty"`
	AllocatedIpv4Addresses int32                   `xml:"allocatedIpv4Addresses,omitempty"`
	AllocatedIpv6Addresses int32                   `xml:"allocatedIpv6Addresses,omitempty"`
}

type ArrayOfIpPool struct {
	IpPool []*IpPool `xml:"IpPool,omitempty"`
}

type VAppOvfSectionInfo struct {
	*DynamicData

	Key             int32  `xml:"key,omitempty"`
	Namespace       string `xml:"namespace,omitempty"`
	Type_           string `xml:"type,omitempty"`
	AtEnvelopeLevel bool   `xml:"atEnvelopeLevel,omitempty"`
	Contents        string `xml:"contents,omitempty"`
}

type ArrayOfVAppOvfSectionInfo struct {
	VAppOvfSectionInfo []*VAppOvfSectionInfo `xml:"VAppOvfSectionInfo,omitempty"`
}

type VAppProductInfo struct {
	*DynamicData

	Key         int32  `xml:"key,omitempty"`
	ClassId     string `xml:"classId,omitempty"`
	InstanceId  string `xml:"instanceId,omitempty"`
	Name        string `xml:"name,omitempty"`
	Vendor      string `xml:"vendor,omitempty"`
	Version     string `xml:"version,omitempty"`
	FullVersion string `xml:"fullVersion,omitempty"`
	VendorUrl   string `xml:"vendorUrl,omitempty"`
	ProductUrl  string `xml:"productUrl,omitempty"`
	AppUrl      string `xml:"appUrl,omitempty"`
}

type ArrayOfVAppProductInfo struct {
	VAppProductInfo []*VAppProductInfo `xml:"VAppProductInfo,omitempty"`
}

type VAppPropertyInfo struct {
	*DynamicData

	Key              int32  `xml:"key,omitempty"`
	ClassId          string `xml:"classId,omitempty"`
	InstanceId       string `xml:"instanceId,omitempty"`
	Id               string `xml:"id,omitempty"`
	Category         string `xml:"category,omitempty"`
	Label            string `xml:"label,omitempty"`
	Type_            string `xml:"type,omitempty"`
	TypeReference    string `xml:"typeReference,omitempty"`
	UserConfigurable bool   `xml:"userConfigurable,omitempty"`
	DefaultValue     string `xml:"defaultValue,omitempty"`
	Value            string `xml:"value,omitempty"`
	Description      string `xml:"description,omitempty"`
}

type ArrayOfVAppPropertyInfo struct {
	VAppPropertyInfo []*VAppPropertyInfo `xml:"VAppPropertyInfo,omitempty"`
}

type VAppConfigInfo struct {
	*VmConfigInfo

	EntityConfig []*VAppEntityConfigInfo `xml:"entityConfig,omitempty"`
	Annotation   string                  `xml:"annotation,omitempty"`
	InstanceUuid string                  `xml:"instanceUuid,omitempty"`
	ManagedBy    *ManagedByInfo          `xml:"managedBy,omitempty"`
}

type VAppConfigSpec struct {
	*VmConfigSpec

	EntityConfig []*VAppEntityConfigInfo `xml:"entityConfig,omitempty"`
	Annotation   string                  `xml:"annotation,omitempty"`
	InstanceUuid string                  `xml:"instanceUuid,omitempty"`
	ManagedBy    *ManagedByInfo          `xml:"managedBy,omitempty"`
}

type VirtualAppImportSpec struct {
	*ImportSpec

	Name             string              `xml:"name,omitempty"`
	VAppConfigSpec   *VAppConfigSpec     `xml:"vAppConfigSpec,omitempty"`
	ResourcePoolSpec *ResourceConfigSpec `xml:"resourcePoolSpec,omitempty"`
	Child            []*ImportSpec       `xml:"child,omitempty"`
}

type VmConfigInfo struct {
	*DynamicData

	Product                 []*VAppProductInfo    `xml:"product,omitempty"`
	Property                []*VAppPropertyInfo   `xml:"property,omitempty"`
	IpAssignment            *VAppIPAssignmentInfo `xml:"ipAssignment,omitempty"`
	Eula                    []string              `xml:"eula,omitempty"`
	OvfSection              []*VAppOvfSectionInfo `xml:"ovfSection,omitempty"`
	OvfEnvironmentTransport []string              `xml:"ovfEnvironmentTransport,omitempty"`
	InstallBootRequired     bool                  `xml:"installBootRequired,omitempty"`
	InstallBootStopDelay    int32                 `xml:"installBootStopDelay,omitempty"`
}

type VmConfigSpec struct {
	*DynamicData

	Product                 []*VAppProductSpec    `xml:"product,omitempty"`
	Property                []*VAppPropertySpec   `xml:"property,omitempty"`
	IpAssignment            *VAppIPAssignmentInfo `xml:"ipAssignment,omitempty"`
	Eula                    []string              `xml:"eula,omitempty"`
	OvfSection              []*VAppOvfSectionSpec `xml:"ovfSection,omitempty"`
	OvfEnvironmentTransport []string              `xml:"ovfEnvironmentTransport,omitempty"`
	InstallBootRequired     bool                  `xml:"installBootRequired,omitempty"`
	InstallBootStopDelay    int32                 `xml:"installBootStopDelay,omitempty"`
}

type VAppProductSpec struct {
	*ArrayUpdateSpec

	Info *VAppProductInfo `xml:"info,omitempty"`
}

type ArrayOfVAppProductSpec struct {
	VAppProductSpec []*VAppProductSpec `xml:"VAppProductSpec,omitempty"`
}

type VAppPropertySpec struct {
	*ArrayUpdateSpec

	Info *VAppPropertyInfo `xml:"info,omitempty"`
}

type ArrayOfVAppPropertySpec struct {
	VAppPropertySpec []*VAppPropertySpec `xml:"VAppPropertySpec,omitempty"`
}

type VAppOvfSectionSpec struct {
	*ArrayUpdateSpec

	Info *VAppOvfSectionInfo `xml:"info,omitempty"`
}

type ArrayOfVAppOvfSectionSpec struct {
	VAppOvfSectionSpec []*VAppOvfSectionSpec `xml:"VAppOvfSectionSpec,omitempty"`
}

type VirtualMachineAffinityInfo struct {
	*DynamicData

	AffinitySet []int32 `xml:"affinitySet,omitempty"`
}

type VirtualMachineBootOptionsBootableDevice struct {
	*DynamicData
}

type ArrayOfVirtualMachineBootOptionsBootableDevice struct {
	VirtualMachineBootOptionsBootableDevice []*VirtualMachineBootOptionsBootableDevice `xml:"VirtualMachineBootOptionsBootableDevice,omitempty"`
}

type VirtualMachineBootOptionsBootableDiskDevice struct {
	*VirtualMachineBootOptionsBootableDevice

	DeviceKey int32 `xml:"deviceKey,omitempty"`
}

type VirtualMachineBootOptionsBootableEthernetDevice struct {
	*VirtualMachineBootOptionsBootableDevice

	DeviceKey int32 `xml:"deviceKey,omitempty"`
}

type VirtualMachineBootOptionsBootableFloppyDevice struct {
	*VirtualMachineBootOptionsBootableDevice
}

type VirtualMachineBootOptionsBootableCdromDevice struct {
	*VirtualMachineBootOptionsBootableDevice
}

type VirtualMachineBootOptions struct {
	*DynamicData

	BootDelay        int64                                      `xml:"bootDelay,omitempty"`
	EnterBIOSSetup   bool                                       `xml:"enterBIOSSetup,omitempty"`
	BootRetryEnabled bool                                       `xml:"bootRetryEnabled,omitempty"`
	BootRetryDelay   int64                                      `xml:"bootRetryDelay,omitempty"`
	BootOrder        []*VirtualMachineBootOptionsBootableDevice `xml:"bootOrder,omitempty"`
}

type VirtualMachineCapability struct {
	*DynamicData

	SnapshotOperationsSupported         bool `xml:"snapshotOperationsSupported,omitempty"`
	MultipleSnapshotsSupported          bool `xml:"multipleSnapshotsSupported,omitempty"`
	SnapshotConfigSupported             bool `xml:"snapshotConfigSupported,omitempty"`
	PoweredOffSnapshotsSupported        bool `xml:"poweredOffSnapshotsSupported,omitempty"`
	MemorySnapshotsSupported            bool `xml:"memorySnapshotsSupported,omitempty"`
	RevertToSnapshotSupported           bool `xml:"revertToSnapshotSupported,omitempty"`
	QuiescedSnapshotsSupported          bool `xml:"quiescedSnapshotsSupported,omitempty"`
	DisableSnapshotsSupported           bool `xml:"disableSnapshotsSupported,omitempty"`
	LockSnapshotsSupported              bool `xml:"lockSnapshotsSupported,omitempty"`
	ConsolePreferencesSupported         bool `xml:"consolePreferencesSupported,omitempty"`
	CpuFeatureMaskSupported             bool `xml:"cpuFeatureMaskSupported,omitempty"`
	S1AcpiManagementSupported           bool `xml:"s1AcpiManagementSupported,omitempty"`
	SettingScreenResolutionSupported    bool `xml:"settingScreenResolutionSupported,omitempty"`
	ToolsAutoUpdateSupported            bool `xml:"toolsAutoUpdateSupported,omitempty"`
	VmNpivWwnSupported                  bool `xml:"vmNpivWwnSupported,omitempty"`
	NpivWwnOnNonRdmVmSupported          bool `xml:"npivWwnOnNonRdmVmSupported,omitempty"`
	VmNpivWwnDisableSupported           bool `xml:"vmNpivWwnDisableSupported,omitempty"`
	VmNpivWwnUpdateSupported            bool `xml:"vmNpivWwnUpdateSupported,omitempty"`
	SwapPlacementSupported              bool `xml:"swapPlacementSupported,omitempty"`
	ToolsSyncTimeSupported              bool `xml:"toolsSyncTimeSupported,omitempty"`
	VirtualMmuUsageSupported            bool `xml:"virtualMmuUsageSupported,omitempty"`
	DiskSharesSupported                 bool `xml:"diskSharesSupported,omitempty"`
	BootOptionsSupported                bool `xml:"bootOptionsSupported,omitempty"`
	BootRetryOptionsSupported           bool `xml:"bootRetryOptionsSupported,omitempty"`
	SettingVideoRamSizeSupported        bool `xml:"settingVideoRamSizeSupported,omitempty"`
	SettingDisplayTopologySupported     bool `xml:"settingDisplayTopologySupported,omitempty"`
	RecordReplaySupported               bool `xml:"recordReplaySupported,omitempty"`
	ChangeTrackingSupported             bool `xml:"changeTrackingSupported,omitempty"`
	MultipleCoresPerSocketSupported     bool `xml:"multipleCoresPerSocketSupported,omitempty"`
	HostBasedReplicationSupported       bool `xml:"hostBasedReplicationSupported,omitempty"`
	GuestAutoLockSupported              bool `xml:"guestAutoLockSupported,omitempty"`
	MemoryReservationLockSupported      bool `xml:"memoryReservationLockSupported,omitempty"`
	FeatureRequirementSupported         bool `xml:"featureRequirementSupported,omitempty"`
	PoweredOnMonitorTypeChangeSupported bool `xml:"poweredOnMonitorTypeChangeSupported,omitempty"`
	SeSparseDiskSupported               bool `xml:"seSparseDiskSupported,omitempty"`
	NestedHVSupported                   bool `xml:"nestedHVSupported,omitempty"`
	VPMCSupported                       bool `xml:"vPMCSupported,omitempty"`
}

type VirtualMachineCdromInfo struct {
	*VirtualMachineTargetInfo
}

type ArrayOfVirtualMachineCdromInfo struct {
	VirtualMachineCdromInfo []*VirtualMachineCdromInfo `xml:"VirtualMachineCdromInfo,omitempty"`
}

type VirtualMachineCloneSpec struct {
	*DynamicData

	Location      *VirtualMachineRelocateSpec `xml:"location,omitempty"`
	Template      bool                        `xml:"template,omitempty"`
	Config        *VirtualMachineConfigSpec   `xml:"config,omitempty"`
	Customization *CustomizationSpec          `xml:"customization,omitempty"`
	PowerOn       bool                        `xml:"powerOn,omitempty"`
	Snapshot      *ManagedObjectReference     `xml:"snapshot,omitempty"`
	Memory        bool                        `xml:"memory,omitempty"`
}

type VirtualMachineConfigInfoDatastoreUrlPair struct {
	*DynamicData

	Name string `xml:"name,omitempty"`
	Url  string `xml:"url,omitempty"`
}

type ArrayOfVirtualMachineConfigInfoDatastoreUrlPair struct {
	VirtualMachineConfigInfoDatastoreUrlPair []*VirtualMachineConfigInfoDatastoreUrlPair `xml:"VirtualMachineConfigInfoDatastoreUrlPair,omitempty"`
}

type VirtualMachineConfigInfoOverheadInfo struct {
	*DynamicData

	InitialMemoryReservation int64 `xml:"initialMemoryReservation,omitempty"`
	InitialSwapReservation   int64 `xml:"initialSwapReservation,omitempty"`
}

type VirtualMachineConfigInfo struct {
	*DynamicData

	ChangeVersion                string                                      `xml:"changeVersion,omitempty"`
	Modified                     time.Time                                   `xml:"modified,omitempty"`
	Name                         string                                      `xml:"name,omitempty"`
	GuestFullName                string                                      `xml:"guestFullName,omitempty"`
	Version                      string                                      `xml:"version,omitempty"`
	Uuid                         string                                      `xml:"uuid,omitempty"`
	InstanceUuid                 string                                      `xml:"instanceUuid,omitempty"`
	NpivNodeWorldWideName        []int64                                     `xml:"npivNodeWorldWideName,omitempty"`
	NpivPortWorldWideName        []int64                                     `xml:"npivPortWorldWideName,omitempty"`
	NpivWorldWideNameType        string                                      `xml:"npivWorldWideNameType,omitempty"`
	NpivDesiredNodeWwns          int16                                       `xml:"npivDesiredNodeWwns,omitempty"`
	NpivDesiredPortWwns          int16                                       `xml:"npivDesiredPortWwns,omitempty"`
	NpivTemporaryDisabled        bool                                        `xml:"npivTemporaryDisabled,omitempty"`
	NpivOnNonRdmDisks            bool                                        `xml:"npivOnNonRdmDisks,omitempty"`
	LocationId                   string                                      `xml:"locationId,omitempty"`
	Template                     bool                                        `xml:"template,omitempty"`
	GuestId                      string                                      `xml:"guestId,omitempty"`
	AlternateGuestName           string                                      `xml:"alternateGuestName,omitempty"`
	Annotation                   string                                      `xml:"annotation,omitempty"`
	Files                        *VirtualMachineFileInfo                     `xml:"files,omitempty"`
	Tools                        *ToolsConfigInfo                            `xml:"tools,omitempty"`
	Flags                        *VirtualMachineFlagInfo                     `xml:"flags,omitempty"`
	ConsolePreferences           *VirtualMachineConsolePreferences           `xml:"consolePreferences,omitempty"`
	DefaultPowerOps              *VirtualMachineDefaultPowerOpInfo           `xml:"defaultPowerOps,omitempty"`
	Hardware                     *VirtualHardware                            `xml:"hardware,omitempty"`
	CpuAllocation                *ResourceAllocationInfo                     `xml:"cpuAllocation,omitempty"`
	MemoryAllocation             *ResourceAllocationInfo                     `xml:"memoryAllocation,omitempty"`
	LatencySensitivity           *LatencySensitivity                         `xml:"latencySensitivity,omitempty"`
	MemoryHotAddEnabled          bool                                        `xml:"memoryHotAddEnabled,omitempty"`
	CpuHotAddEnabled             bool                                        `xml:"cpuHotAddEnabled,omitempty"`
	CpuHotRemoveEnabled          bool                                        `xml:"cpuHotRemoveEnabled,omitempty"`
	HotPlugMemoryLimit           int64                                       `xml:"hotPlugMemoryLimit,omitempty"`
	HotPlugMemoryIncrementSize   int64                                       `xml:"hotPlugMemoryIncrementSize,omitempty"`
	CpuAffinity                  *VirtualMachineAffinityInfo                 `xml:"cpuAffinity,omitempty"`
	MemoryAffinity               *VirtualMachineAffinityInfo                 `xml:"memoryAffinity,omitempty"`
	NetworkShaper                *VirtualMachineNetworkShaperInfo            `xml:"networkShaper,omitempty"`
	ExtraConfig                  []*OptionValue                              `xml:"extraConfig,omitempty"`
	CpuFeatureMask               []*HostCpuIdInfo                            `xml:"cpuFeatureMask,omitempty"`
	DatastoreUrl                 []*VirtualMachineConfigInfoDatastoreUrlPair `xml:"datastoreUrl,omitempty"`
	SwapPlacement                string                                      `xml:"swapPlacement,omitempty"`
	BootOptions                  *VirtualMachineBootOptions                  `xml:"bootOptions,omitempty"`
	FtInfo                       *FaultToleranceConfigInfo                   `xml:"ftInfo,omitempty"`
	VAppConfig                   *VmConfigInfo                               `xml:"vAppConfig,omitempty"`
	VAssertsEnabled              bool                                        `xml:"vAssertsEnabled,omitempty"`
	ChangeTrackingEnabled        bool                                        `xml:"changeTrackingEnabled,omitempty"`
	Firmware                     string                                      `xml:"firmware,omitempty"`
	MaxMksConnections            int32                                       `xml:"maxMksConnections,omitempty"`
	GuestAutoLockEnabled         bool                                        `xml:"guestAutoLockEnabled,omitempty"`
	ManagedBy                    *ManagedByInfo                              `xml:"managedBy,omitempty"`
	MemoryReservationLockedToMax bool                                        `xml:"memoryReservationLockedToMax,omitempty"`
	InitialOverhead              *VirtualMachineConfigInfoOverheadInfo       `xml:"initialOverhead,omitempty"`
	NestedHVEnabled              bool                                        `xml:"nestedHVEnabled,omitempty"`
	VPMCEnabled                  bool                                        `xml:"vPMCEnabled,omitempty"`
	ScheduledHardwareUpgradeInfo *ScheduledHardwareUpgradeInfo               `xml:"scheduledHardwareUpgradeInfo,omitempty"`
	VFlashCacheReservation       int64                                       `xml:"vFlashCacheReservation,omitempty"`
}

type VirtualMachineConfigOption struct {
	*DynamicData

	Version                          string                    `xml:"version,omitempty"`
	Description                      string                    `xml:"description,omitempty"`
	GuestOSDescriptor                []*GuestOsDescriptor      `xml:"guestOSDescriptor,omitempty"`
	GuestOSDefaultIndex              int32                     `xml:"guestOSDefaultIndex,omitempty"`
	HardwareOptions                  *VirtualHardwareOption    `xml:"hardwareOptions,omitempty"`
	Capabilities                     *VirtualMachineCapability `xml:"capabilities,omitempty"`
	Datastore                        *DatastoreOption          `xml:"datastore,omitempty"`
	DefaultDevice                    []*VirtualDevice          `xml:"defaultDevice,omitempty"`
	SupportedMonitorType             []string                  `xml:"supportedMonitorType,omitempty"`
	SupportedOvfEnvironmentTransport []string                  `xml:"supportedOvfEnvironmentTransport,omitempty"`
	SupportedOvfInstallTransport     []string                  `xml:"supportedOvfInstallTransport,omitempty"`
}

type VirtualMachineConfigOptionDescriptor struct {
	*DynamicData

	Key                 string                    `xml:"key,omitempty"`
	Description         string                    `xml:"description,omitempty"`
	Host                []*ManagedObjectReference `xml:"host,omitempty"`
	CreateSupported     bool                      `xml:"createSupported,omitempty"`
	DefaultConfigOption bool                      `xml:"defaultConfigOption,omitempty"`
	RunSupported        bool                      `xml:"runSupported,omitempty"`
	UpgradeSupported    bool                      `xml:"upgradeSupported,omitempty"`
}

type ArrayOfVirtualMachineConfigOptionDescriptor struct {
	VirtualMachineConfigOptionDescriptor []*VirtualMachineConfigOptionDescriptor `xml:"VirtualMachineConfigOptionDescriptor,omitempty"`
}

type VirtualMachineCpuIdInfoSpec struct {
	*ArrayUpdateSpec

	Info *HostCpuIdInfo `xml:"info,omitempty"`
}

type ArrayOfVirtualMachineCpuIdInfoSpec struct {
	VirtualMachineCpuIdInfoSpec []*VirtualMachineCpuIdInfoSpec `xml:"VirtualMachineCpuIdInfoSpec,omitempty"`
}

type VirtualMachineConfigSpec struct {
	*DynamicData

	ChangeVersion                string                            `xml:"changeVersion,omitempty"`
	Name                         string                            `xml:"name,omitempty"`
	Version                      string                            `xml:"version,omitempty"`
	Uuid                         string                            `xml:"uuid,omitempty"`
	InstanceUuid                 string                            `xml:"instanceUuid,omitempty"`
	NpivNodeWorldWideName        []int64                           `xml:"npivNodeWorldWideName,omitempty"`
	NpivPortWorldWideName        []int64                           `xml:"npivPortWorldWideName,omitempty"`
	NpivWorldWideNameType        string                            `xml:"npivWorldWideNameType,omitempty"`
	NpivDesiredNodeWwns          int16                             `xml:"npivDesiredNodeWwns,omitempty"`
	NpivDesiredPortWwns          int16                             `xml:"npivDesiredPortWwns,omitempty"`
	NpivTemporaryDisabled        bool                              `xml:"npivTemporaryDisabled,omitempty"`
	NpivOnNonRdmDisks            bool                              `xml:"npivOnNonRdmDisks,omitempty"`
	NpivWorldWideNameOp          string                            `xml:"npivWorldWideNameOp,omitempty"`
	LocationId                   string                            `xml:"locationId,omitempty"`
	GuestId                      string                            `xml:"guestId,omitempty"`
	AlternateGuestName           string                            `xml:"alternateGuestName,omitempty"`
	Annotation                   string                            `xml:"annotation,omitempty"`
	Files                        *VirtualMachineFileInfo           `xml:"files,omitempty"`
	Tools                        *ToolsConfigInfo                  `xml:"tools,omitempty"`
	Flags                        *VirtualMachineFlagInfo           `xml:"flags,omitempty"`
	ConsolePreferences           *VirtualMachineConsolePreferences `xml:"consolePreferences,omitempty"`
	PowerOpInfo                  *VirtualMachineDefaultPowerOpInfo `xml:"powerOpInfo,omitempty"`
	NumCPUs                      int32                             `xml:"numCPUs,omitempty"`
	NumCoresPerSocket            int32                             `xml:"numCoresPerSocket,omitempty"`
	MemoryMB                     int64                             `xml:"memoryMB,omitempty"`
	MemoryHotAddEnabled          bool                              `xml:"memoryHotAddEnabled,omitempty"`
	CpuHotAddEnabled             bool                              `xml:"cpuHotAddEnabled,omitempty"`
	CpuHotRemoveEnabled          bool                              `xml:"cpuHotRemoveEnabled,omitempty"`
	VirtualICH7MPresent          bool                              `xml:"virtualICH7MPresent,omitempty"`
	VirtualSMCPresent            bool                              `xml:"virtualSMCPresent,omitempty"`
	DeviceChange                 []*VirtualDeviceConfigSpec        `xml:"deviceChange,omitempty"`
	CpuAllocation                *ResourceAllocationInfo           `xml:"cpuAllocation,omitempty"`
	MemoryAllocation             *ResourceAllocationInfo           `xml:"memoryAllocation,omitempty"`
	LatencySensitivity           *LatencySensitivity               `xml:"latencySensitivity,omitempty"`
	CpuAffinity                  *VirtualMachineAffinityInfo       `xml:"cpuAffinity,omitempty"`
	MemoryAffinity               *VirtualMachineAffinityInfo       `xml:"memoryAffinity,omitempty"`
	NetworkShaper                *VirtualMachineNetworkShaperInfo  `xml:"networkShaper,omitempty"`
	CpuFeatureMask               []*VirtualMachineCpuIdInfoSpec    `xml:"cpuFeatureMask,omitempty"`
	ExtraConfig                  []*OptionValue                    `xml:"extraConfig,omitempty"`
	SwapPlacement                string                            `xml:"swapPlacement,omitempty"`
	BootOptions                  *VirtualMachineBootOptions        `xml:"bootOptions,omitempty"`
	VAppConfig                   *VmConfigSpec                     `xml:"vAppConfig,omitempty"`
	FtInfo                       *FaultToleranceConfigInfo         `xml:"ftInfo,omitempty"`
	VAppConfigRemoved            bool                              `xml:"vAppConfigRemoved,omitempty"`
	VAssertsEnabled              bool                              `xml:"vAssertsEnabled,omitempty"`
	ChangeTrackingEnabled        bool                              `xml:"changeTrackingEnabled,omitempty"`
	Firmware                     string                            `xml:"firmware,omitempty"`
	MaxMksConnections            int32                             `xml:"maxMksConnections,omitempty"`
	GuestAutoLockEnabled         bool                              `xml:"guestAutoLockEnabled,omitempty"`
	ManagedBy                    *ManagedByInfo                    `xml:"managedBy,omitempty"`
	MemoryReservationLockedToMax bool                              `xml:"memoryReservationLockedToMax,omitempty"`
	NestedHVEnabled              bool                              `xml:"nestedHVEnabled,omitempty"`
	VPMCEnabled                  bool                              `xml:"vPMCEnabled,omitempty"`
	ScheduledHardwareUpgradeInfo *ScheduledHardwareUpgradeInfo     `xml:"scheduledHardwareUpgradeInfo,omitempty"`
	VmProfile                    []*VirtualMachineProfileSpec      `xml:"vmProfile,omitempty"`
}

type ConfigTarget struct {
	*DynamicData

	NumCpus                     int32                                    `xml:"numCpus,omitempty"`
	NumCpuCores                 int32                                    `xml:"numCpuCores,omitempty"`
	NumNumaNodes                int32                                    `xml:"numNumaNodes,omitempty"`
	SmcPresent                  bool                                     `xml:"smcPresent,omitempty"`
	Datastore                   []*VirtualMachineDatastoreInfo           `xml:"datastore,omitempty"`
	Network                     []*VirtualMachineNetworkInfo             `xml:"network,omitempty"`
	OpaqueNetwork               []*OpaqueNetworkTargetInfo               `xml:"opaqueNetwork,omitempty"`
	DistributedVirtualPortgroup []*DistributedVirtualPortgroupInfo       `xml:"distributedVirtualPortgroup,omitempty"`
	DistributedVirtualSwitch    []*DistributedVirtualSwitchInfo          `xml:"distributedVirtualSwitch,omitempty"`
	CdRom                       []*VirtualMachineCdromInfo               `xml:"cdRom,omitempty"`
	Serial                      []*VirtualMachineSerialInfo              `xml:"serial,omitempty"`
	Parallel                    []*VirtualMachineParallelInfo            `xml:"parallel,omitempty"`
	Sound                       []*VirtualMachineSoundInfo               `xml:"sound,omitempty"`
	Usb                         []*VirtualMachineUsbInfo                 `xml:"usb,omitempty"`
	Floppy                      []*VirtualMachineFloppyInfo              `xml:"floppy,omitempty"`
	LegacyNetworkInfo           []*VirtualMachineLegacyNetworkSwitchInfo `xml:"legacyNetworkInfo,omitempty"`
	ScsiPassthrough             []*VirtualMachineScsiPassthroughInfo     `xml:"scsiPassthrough,omitempty"`
	ScsiDisk                    []*VirtualMachineScsiDiskDeviceInfo      `xml:"scsiDisk,omitempty"`
	IdeDisk                     []*VirtualMachineIdeDiskDeviceInfo       `xml:"ideDisk,omitempty"`
	MaxMemMBOptimalPerf         int32                                    `xml:"maxMemMBOptimalPerf,omitempty"`
	ResourcePool                *ResourcePoolRuntimeInfo                 `xml:"resourcePool,omitempty"`
	AutoVmotion                 bool                                     `xml:"autoVmotion,omitempty"`
	PciPassthrough              []*VirtualMachinePciPassthroughInfo      `xml:"pciPassthrough,omitempty"`
	Sriov                       []*VirtualMachineSriovInfo               `xml:"sriov,omitempty"`
	VFlashModule                []*VirtualMachineVFlashModuleInfo        `xml:"vFlashModule,omitempty"`
}

type VirtualMachineConsolePreferences struct {
	*DynamicData

	PowerOnWhenOpened        bool `xml:"powerOnWhenOpened,omitempty"`
	EnterFullScreenOnPowerOn bool `xml:"enterFullScreenOnPowerOn,omitempty"`
	CloseOnPowerOffOrSuspend bool `xml:"closeOnPowerOffOrSuspend,omitempty"`
}

type VirtualMachineDatastoreInfo struct {
	*VirtualMachineTargetInfo

	Datastore              *DatastoreSummary    `xml:"datastore,omitempty"`
	Capability             *DatastoreCapability `xml:"capability,omitempty"`
	MaxFileSize            int64                `xml:"maxFileSize,omitempty"`
	MaxVirtualDiskCapacity int64                `xml:"maxVirtualDiskCapacity,omitempty"`
	Mode                   string               `xml:"mode,omitempty"`
	VStorageSupport        string               `xml:"vStorageSupport,omitempty"`
}

type ArrayOfVirtualMachineDatastoreInfo struct {
	VirtualMachineDatastoreInfo []*VirtualMachineDatastoreInfo `xml:"VirtualMachineDatastoreInfo,omitempty"`
}

type VirtualMachineDatastoreVolumeOption struct {
	*DynamicData

	FileSystemType string `xml:"fileSystemType,omitempty"`
	MajorVersion   int32  `xml:"majorVersion,omitempty"`
}

type ArrayOfVirtualMachineDatastoreVolumeOption struct {
	VirtualMachineDatastoreVolumeOption []*VirtualMachineDatastoreVolumeOption `xml:"VirtualMachineDatastoreVolumeOption,omitempty"`
}

type DatastoreOption struct {
	*DynamicData

	UnsupportedVolumes []*VirtualMachineDatastoreVolumeOption `xml:"unsupportedVolumes,omitempty"`
}

type VirtualMachineDefaultPowerOpInfo struct {
	*DynamicData

	PowerOffType        string `xml:"powerOffType,omitempty"`
	SuspendType         string `xml:"suspendType,omitempty"`
	ResetType           string `xml:"resetType,omitempty"`
	DefaultPowerOffType string `xml:"defaultPowerOffType,omitempty"`
	DefaultSuspendType  string `xml:"defaultSuspendType,omitempty"`
	DefaultResetType    string `xml:"defaultResetType,omitempty"`
	StandbyAction       string `xml:"standbyAction,omitempty"`
}

type VirtualMachineDefinedProfileSpec struct {
	*VirtualMachineProfileSpec

	ProfileId   string                        `xml:"profileId,omitempty"`
	ProfileData *VirtualMachineProfileRawData `xml:"profileData,omitempty"`
}

type VirtualMachineDeviceRuntimeInfoDeviceRuntimeState struct {
	*DynamicData
}

type VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState struct {
	*VirtualMachineDeviceRuntimeInfoDeviceRuntimeState

	VmDirectPathGen2Active                 bool     `xml:"vmDirectPathGen2Active,omitempty"`
	VmDirectPathGen2InactiveReasonVm       []string `xml:"vmDirectPathGen2InactiveReasonVm,omitempty"`
	VmDirectPathGen2InactiveReasonOther    []string `xml:"vmDirectPathGen2InactiveReasonOther,omitempty"`
	VmDirectPathGen2InactiveReasonExtended string   `xml:"vmDirectPathGen2InactiveReasonExtended,omitempty"`
	ReservationStatus                      string   `xml:"reservationStatus,omitempty"`
}

type VirtualMachineDeviceRuntimeInfo struct {
	*DynamicData

	RuntimeState *VirtualMachineDeviceRuntimeInfoDeviceRuntimeState `xml:"runtimeState,omitempty"`
	Key          int32                                              `xml:"key,omitempty"`
}

type ArrayOfVirtualMachineDeviceRuntimeInfo struct {
	VirtualMachineDeviceRuntimeInfo []*VirtualMachineDeviceRuntimeInfo `xml:"VirtualMachineDeviceRuntimeInfo,omitempty"`
}

type VirtualMachineDiskDeviceInfo struct {
	*VirtualMachineTargetInfo

	Capacity int64                     `xml:"capacity,omitempty"`
	Vm       []*ManagedObjectReference `xml:"vm,omitempty"`
}

type VirtualMachineEmptyProfileSpec struct {
	*VirtualMachineProfileSpec
}

type FaultToleranceConfigInfo struct {
	*DynamicData

	Role          int32    `xml:"role,omitempty"`
	InstanceUuids []string `xml:"instanceUuids,omitempty"`
	ConfigPaths   []string `xml:"configPaths,omitempty"`
}

type FaultTolerancePrimaryConfigInfo struct {
	*FaultToleranceConfigInfo

	Secondaries []*ManagedObjectReference `xml:"secondaries,omitempty"`
}

type FaultToleranceSecondaryConfigInfo struct {
	*FaultToleranceConfigInfo

	PrimaryVM *ManagedObjectReference `xml:"primaryVM,omitempty"`
}

type FaultToleranceSecondaryOpResult struct {
	*DynamicData

	Vm               *ManagedObjectReference `xml:"vm,omitempty"`
	PowerOnAttempted bool                    `xml:"powerOnAttempted,omitempty"`
	PowerOnResult    *ClusterPowerOnVmResult `xml:"powerOnResult,omitempty"`
}

type VirtualMachineFeatureRequirement struct {
	*DynamicData

	Key         string `xml:"key,omitempty"`
	FeatureName string `xml:"featureName,omitempty"`
	Value       string `xml:"value,omitempty"`
}

type ArrayOfVirtualMachineFeatureRequirement struct {
	VirtualMachineFeatureRequirement []*VirtualMachineFeatureRequirement `xml:"VirtualMachineFeatureRequirement,omitempty"`
}

type VirtualMachineFileInfo struct {
	*DynamicData

	VmPathName        string `xml:"vmPathName,omitempty"`
	SnapshotDirectory string `xml:"snapshotDirectory,omitempty"`
	SuspendDirectory  string `xml:"suspendDirectory,omitempty"`
	LogDirectory      string `xml:"logDirectory,omitempty"`
}

type VirtualMachineFileLayoutDiskLayout struct {
	*DynamicData

	Key      int32    `xml:"key,omitempty"`
	DiskFile []string `xml:"diskFile,omitempty"`
}

type ArrayOfVirtualMachineFileLayoutDiskLayout struct {
	VirtualMachineFileLayoutDiskLayout []*VirtualMachineFileLayoutDiskLayout `xml:"VirtualMachineFileLayoutDiskLayout,omitempty"`
}

type VirtualMachineFileLayoutSnapshotLayout struct {
	*DynamicData

	Key          *ManagedObjectReference `xml:"key,omitempty"`
	SnapshotFile []string                `xml:"snapshotFile,omitempty"`
}

type ArrayOfVirtualMachineFileLayoutSnapshotLayout struct {
	VirtualMachineFileLayoutSnapshotLayout []*VirtualMachineFileLayoutSnapshotLayout `xml:"VirtualMachineFileLayoutSnapshotLayout,omitempty"`
}

type VirtualMachineFileLayout struct {
	*DynamicData

	ConfigFile []string                                  `xml:"configFile,omitempty"`
	LogFile    []string                                  `xml:"logFile,omitempty"`
	Disk       []*VirtualMachineFileLayoutDiskLayout     `xml:"disk,omitempty"`
	Snapshot   []*VirtualMachineFileLayoutSnapshotLayout `xml:"snapshot,omitempty"`
	SwapFile   string                                    `xml:"swapFile,omitempty"`
}

type VirtualMachineFileLayoutExFileInfo struct {
	*DynamicData

	Key        int32  `xml:"key,omitempty"`
	Name       string `xml:"name,omitempty"`
	Type_      string `xml:"type,omitempty"`
	Size       int64  `xml:"size,omitempty"`
	UniqueSize int64  `xml:"uniqueSize,omitempty"`
}

type ArrayOfVirtualMachineFileLayoutExFileInfo struct {
	VirtualMachineFileLayoutExFileInfo []*VirtualMachineFileLayoutExFileInfo `xml:"VirtualMachineFileLayoutExFileInfo,omitempty"`
}

type VirtualMachineFileLayoutExDiskUnit struct {
	*DynamicData

	FileKey []int32 `xml:"fileKey,omitempty"`
}

type ArrayOfVirtualMachineFileLayoutExDiskUnit struct {
	VirtualMachineFileLayoutExDiskUnit []*VirtualMachineFileLayoutExDiskUnit `xml:"VirtualMachineFileLayoutExDiskUnit,omitempty"`
}

type VirtualMachineFileLayoutExDiskLayout struct {
	*DynamicData

	Key   int32                                 `xml:"key,omitempty"`
	Chain []*VirtualMachineFileLayoutExDiskUnit `xml:"chain,omitempty"`
}

type ArrayOfVirtualMachineFileLayoutExDiskLayout struct {
	VirtualMachineFileLayoutExDiskLayout []*VirtualMachineFileLayoutExDiskLayout `xml:"VirtualMachineFileLayoutExDiskLayout,omitempty"`
}

type VirtualMachineFileLayoutExSnapshotLayout struct {
	*DynamicData

	Key     *ManagedObjectReference                 `xml:"key,omitempty"`
	DataKey int32                                   `xml:"dataKey,omitempty"`
	Disk    []*VirtualMachineFileLayoutExDiskLayout `xml:"disk,omitempty"`
}

type ArrayOfVirtualMachineFileLayoutExSnapshotLayout struct {
	VirtualMachineFileLayoutExSnapshotLayout []*VirtualMachineFileLayoutExSnapshotLayout `xml:"VirtualMachineFileLayoutExSnapshotLayout,omitempty"`
}

type VirtualMachineFileLayoutEx struct {
	*DynamicData

	File      []*VirtualMachineFileLayoutExFileInfo       `xml:"file,omitempty"`
	Disk      []*VirtualMachineFileLayoutExDiskLayout     `xml:"disk,omitempty"`
	Snapshot  []*VirtualMachineFileLayoutExSnapshotLayout `xml:"snapshot,omitempty"`
	Timestamp time.Time                                   `xml:"timestamp,omitempty"`
}

type VirtualMachineFlagInfo struct {
	*DynamicData

	DisableAcceleration      bool   `xml:"disableAcceleration,omitempty"`
	EnableLogging            bool   `xml:"enableLogging,omitempty"`
	UseToe                   bool   `xml:"useToe,omitempty"`
	RunWithDebugInfo         bool   `xml:"runWithDebugInfo,omitempty"`
	MonitorType              string `xml:"monitorType,omitempty"`
	HtSharing                string `xml:"htSharing,omitempty"`
	SnapshotDisabled         bool   `xml:"snapshotDisabled,omitempty"`
	SnapshotLocked           bool   `xml:"snapshotLocked,omitempty"`
	DiskUuidEnabled          bool   `xml:"diskUuidEnabled,omitempty"`
	VirtualMmuUsage          string `xml:"virtualMmuUsage,omitempty"`
	VirtualExecUsage         string `xml:"virtualExecUsage,omitempty"`
	SnapshotPowerOffBehavior string `xml:"snapshotPowerOffBehavior,omitempty"`
	RecordReplayEnabled      bool   `xml:"recordReplayEnabled,omitempty"`
}

type VirtualMachineFloppyInfo struct {
	*VirtualMachineTargetInfo
}

type ArrayOfVirtualMachineFloppyInfo struct {
	VirtualMachineFloppyInfo []*VirtualMachineFloppyInfo `xml:"VirtualMachineFloppyInfo,omitempty"`
}

type GuestDiskInfo struct {
	*DynamicData

	DiskPath  string `xml:"diskPath,omitempty"`
	Capacity  int64  `xml:"capacity,omitempty"`
	FreeSpace int64  `xml:"freeSpace,omitempty"`
}

type ArrayOfGuestDiskInfo struct {
	GuestDiskInfo []*GuestDiskInfo `xml:"GuestDiskInfo,omitempty"`
}

type GuestNicInfo struct {
	*DynamicData

	Network        string             `xml:"network,omitempty"`
	IpAddress      []string           `xml:"ipAddress,omitempty"`
	MacAddress     string             `xml:"macAddress,omitempty"`
	Connected      bool               `xml:"connected,omitempty"`
	DeviceConfigId int32              `xml:"deviceConfigId,omitempty"`
	DnsConfig      *NetDnsConfigInfo  `xml:"dnsConfig,omitempty"`
	IpConfig       *NetIpConfigInfo   `xml:"ipConfig,omitempty"`
	NetBIOSConfig  *NetBIOSConfigInfo `xml:"netBIOSConfig,omitempty"`
}

type ArrayOfGuestNicInfo struct {
	GuestNicInfo []*GuestNicInfo `xml:"GuestNicInfo,omitempty"`
}

type GuestStackInfo struct {
	*DynamicData

	DnsConfig     *NetDnsConfigInfo     `xml:"dnsConfig,omitempty"`
	IpRouteConfig *NetIpRouteConfigInfo `xml:"ipRouteConfig,omitempty"`
	IpStackConfig []*KeyValue           `xml:"ipStackConfig,omitempty"`
	DhcpConfig    *NetDhcpConfigInfo    `xml:"dhcpConfig,omitempty"`
}

type ArrayOfGuestStackInfo struct {
	GuestStackInfo []*GuestStackInfo `xml:"GuestStackInfo,omitempty"`
}

type GuestScreenInfo struct {
	*DynamicData

	Width  int32 `xml:"width,omitempty"`
	Height int32 `xml:"height,omitempty"`
}

type GuestInfoNamespaceGenerationInfo struct {
	*DynamicData

	Key          string `xml:"key,omitempty"`
	GenerationNo int32  `xml:"generationNo,omitempty"`
}

type ArrayOfGuestInfoNamespaceGenerationInfo struct {
	GuestInfoNamespaceGenerationInfo []*GuestInfoNamespaceGenerationInfo `xml:"GuestInfoNamespaceGenerationInfo,omitempty"`
}

type GuestInfo struct {
	*DynamicData

	ToolsStatus                     *VirtualMachineToolsStatus          `xml:"toolsStatus,omitempty"`
	ToolsVersionStatus              string                              `xml:"toolsVersionStatus,omitempty"`
	ToolsVersionStatus2             string                              `xml:"toolsVersionStatus2,omitempty"`
	ToolsRunningStatus              string                              `xml:"toolsRunningStatus,omitempty"`
	ToolsVersion                    string                              `xml:"toolsVersion,omitempty"`
	GuestId                         string                              `xml:"guestId,omitempty"`
	GuestFamily                     string                              `xml:"guestFamily,omitempty"`
	GuestFullName                   string                              `xml:"guestFullName,omitempty"`
	HostName                        string                              `xml:"hostName,omitempty"`
	IpAddress                       string                              `xml:"ipAddress,omitempty"`
	Net                             []*GuestNicInfo                     `xml:"net,omitempty"`
	IpStack                         []*GuestStackInfo                   `xml:"ipStack,omitempty"`
	Disk                            []*GuestDiskInfo                    `xml:"disk,omitempty"`
	Screen                          *GuestScreenInfo                    `xml:"screen,omitempty"`
	GuestState                      string                              `xml:"guestState,omitempty"`
	AppHeartbeatStatus              string                              `xml:"appHeartbeatStatus,omitempty"`
	AppState                        string                              `xml:"appState,omitempty"`
	GuestOperationsReady            bool                                `xml:"guestOperationsReady,omitempty"`
	InteractiveGuestOperationsReady bool                                `xml:"interactiveGuestOperationsReady,omitempty"`
	GenerationInfo                  []*GuestInfoNamespaceGenerationInfo `xml:"generationInfo,omitempty"`
}

type GuestOsDescriptor struct {
	*DynamicData

	Id                          string           `xml:"id,omitempty"`
	Family                      string           `xml:"family,omitempty"`
	FullName                    string           `xml:"fullName,omitempty"`
	SupportedMaxCPUs            int32            `xml:"supportedMaxCPUs,omitempty"`
	NumSupportedPhysicalSockets int32            `xml:"numSupportedPhysicalSockets,omitempty"`
	NumSupportedCoresPerSocket  int32            `xml:"numSupportedCoresPerSocket,omitempty"`
	SupportedMinMemMB           int32            `xml:"supportedMinMemMB,omitempty"`
	SupportedMaxMemMB           int32            `xml:"supportedMaxMemMB,omitempty"`
	RecommendedMemMB            int32            `xml:"recommendedMemMB,omitempty"`
	RecommendedColorDepth       int32            `xml:"recommendedColorDepth,omitempty"`
	SupportedDiskControllerList []string         `xml:"supportedDiskControllerList,omitempty"`
	RecommendedSCSIController   string           `xml:"recommendedSCSIController,omitempty"`
	RecommendedDiskController   string           `xml:"recommendedDiskController,omitempty"`
	SupportedNumDisks           int32            `xml:"supportedNumDisks,omitempty"`
	RecommendedDiskSizeMB       int32            `xml:"recommendedDiskSizeMB,omitempty"`
	RecommendedCdromController  string           `xml:"recommendedCdromController,omitempty"`
	SupportedEthernetCard       []string         `xml:"supportedEthernetCard,omitempty"`
	RecommendedEthernetCard     string           `xml:"recommendedEthernetCard,omitempty"`
	SupportsSlaveDisk           bool             `xml:"supportsSlaveDisk,omitempty"`
	CpuFeatureMask              []*HostCpuIdInfo `xml:"cpuFeatureMask,omitempty"`
	SmcRequired                 bool             `xml:"smcRequired,omitempty"`
	SupportsWakeOnLan           bool             `xml:"supportsWakeOnLan,omitempty"`
	SupportsVMI                 bool             `xml:"supportsVMI,omitempty"`
	SupportsMemoryHotAdd        bool             `xml:"supportsMemoryHotAdd,omitempty"`
	SupportsCpuHotAdd           bool             `xml:"supportsCpuHotAdd,omitempty"`
	SupportsCpuHotRemove        bool             `xml:"supportsCpuHotRemove,omitempty"`
	SupportedFirmware           []string         `xml:"supportedFirmware,omitempty"`
	RecommendedFirmware         string           `xml:"recommendedFirmware,omitempty"`
	SupportedUSBControllerList  []string         `xml:"supportedUSBControllerList,omitempty"`
	RecommendedUSBController    string           `xml:"recommendedUSBController,omitempty"`
	Supports3D                  bool             `xml:"supports3D,omitempty"`
	Recommended3D               bool             `xml:"recommended3D,omitempty"`
	SmcRecommended              bool             `xml:"smcRecommended,omitempty"`
	Ich7mRecommended            bool             `xml:"ich7mRecommended,omitempty"`
	UsbRecommended              bool             `xml:"usbRecommended,omitempty"`
	SupportLevel                string           `xml:"supportLevel,omitempty"`
	SupportedForCreate          bool             `xml:"supportedForCreate,omitempty"`
	VRAMSizeInKB                *IntOption       `xml:"vRAMSizeInKB,omitempty"`
}

type ArrayOfGuestOsDescriptor struct {
	GuestOsDescriptor []*GuestOsDescriptor `xml:"GuestOsDescriptor,omitempty"`
}

type VirtualMachineIdeDiskDevicePartitionInfo struct {
	*DynamicData

	Id       int32 `xml:"id,omitempty"`
	Capacity int32 `xml:"capacity,omitempty"`
}

type ArrayOfVirtualMachineIdeDiskDevicePartitionInfo struct {
	VirtualMachineIdeDiskDevicePartitionInfo []*VirtualMachineIdeDiskDevicePartitionInfo `xml:"VirtualMachineIdeDiskDevicePartitionInfo,omitempty"`
}

type VirtualMachineIdeDiskDeviceInfo struct {
	*VirtualMachineDiskDeviceInfo

	PartitionTable []*VirtualMachineIdeDiskDevicePartitionInfo `xml:"partitionTable,omitempty"`
}

type ArrayOfVirtualMachineIdeDiskDeviceInfo struct {
	VirtualMachineIdeDiskDeviceInfo []*VirtualMachineIdeDiskDeviceInfo `xml:"VirtualMachineIdeDiskDeviceInfo,omitempty"`
}

type VirtualMachineLegacyNetworkSwitchInfo struct {
	*DynamicData

	Name string `xml:"name,omitempty"`
}

type ArrayOfVirtualMachineLegacyNetworkSwitchInfo struct {
	VirtualMachineLegacyNetworkSwitchInfo []*VirtualMachineLegacyNetworkSwitchInfo `xml:"VirtualMachineLegacyNetworkSwitchInfo,omitempty"`
}

type VirtualMachineMessage struct {
	*DynamicData

	Id       string        `xml:"id,omitempty"`
	Argument []interface{} `xml:"argument,omitempty"`
	Text     string        `xml:"text,omitempty"`
}

type ArrayOfVirtualMachineMessage struct {
	VirtualMachineMessage []*VirtualMachineMessage `xml:"VirtualMachineMessage,omitempty"`
}

type VirtualMachineMetadataManagerVmMetadataOwner struct {
	*DynamicData

	Name string `xml:"name,omitempty"`
}

type VirtualMachineMetadataManagerVmMetadata struct {
	*DynamicData

	VmId     string `xml:"vmId,omitempty"`
	Metadata string `xml:"metadata,omitempty"`
}

type VirtualMachineMetadataManagerVmMetadataInput struct {
	*DynamicData

	Operation  string                                   `xml:"operation,omitempty"`
	VmMetadata *VirtualMachineMetadataManagerVmMetadata `xml:"vmMetadata,omitempty"`
}

type ArrayOfVirtualMachineMetadataManagerVmMetadataInput struct {
	VirtualMachineMetadataManagerVmMetadataInput []*VirtualMachineMetadataManagerVmMetadataInput `xml:"VirtualMachineMetadataManagerVmMetadataInput,omitempty"`
}

type VirtualMachineMetadataManagerVmMetadataResult struct {
	*DynamicData

	VmMetadata *VirtualMachineMetadataManagerVmMetadata `xml:"vmMetadata,omitempty"`
	Error      *LocalizedMethodFault                    `xml:"error,omitempty"`
}

type ArrayOfVirtualMachineMetadataManagerVmMetadataResult struct {
	VirtualMachineMetadataManagerVmMetadataResult []*VirtualMachineMetadataManagerVmMetadataResult `xml:"VirtualMachineMetadataManagerVmMetadataResult,omitempty"`
}

type VirtualMachineNetworkInfo struct {
	*VirtualMachineTargetInfo

	Network *NetworkSummary `xml:"network,omitempty"`
}

type ArrayOfVirtualMachineNetworkInfo struct {
	VirtualMachineNetworkInfo []*VirtualMachineNetworkInfo `xml:"VirtualMachineNetworkInfo,omitempty"`
}

type VirtualMachineNetworkShaperInfo struct {
	*DynamicData

	Enabled    bool  `xml:"enabled,omitempty"`
	PeakBps    int64 `xml:"peakBps,omitempty"`
	AverageBps int64 `xml:"averageBps,omitempty"`
	BurstSize  int64 `xml:"burstSize,omitempty"`
}

type OpaqueNetworkTargetInfo struct {
	*VirtualMachineTargetInfo

	Network *OpaqueNetworkSummary `xml:"network,omitempty"`
}

type ArrayOfOpaqueNetworkTargetInfo struct {
	OpaqueNetworkTargetInfo []*OpaqueNetworkTargetInfo `xml:"OpaqueNetworkTargetInfo,omitempty"`
}

type VirtualMachineParallelInfo struct {
	*VirtualMachineTargetInfo
}

type ArrayOfVirtualMachineParallelInfo struct {
	VirtualMachineParallelInfo []*VirtualMachineParallelInfo `xml:"VirtualMachineParallelInfo,omitempty"`
}

type VirtualMachinePciPassthroughInfo struct {
	*VirtualMachineTargetInfo

	PciDevice *HostPciDevice `xml:"pciDevice,omitempty"`
	SystemId  string         `xml:"systemId,omitempty"`
}

type ArrayOfVirtualMachinePciPassthroughInfo struct {
	VirtualMachinePciPassthroughInfo []*VirtualMachinePciPassthroughInfo `xml:"VirtualMachinePciPassthroughInfo,omitempty"`
}

type VirtualMachineProfileRawData struct {
	*DynamicData

	ExtensionKey string `xml:"extensionKey,omitempty"`
	ObjectData   string `xml:"objectData,omitempty"`
}

type VirtualMachineProfileSpec struct {
	*DynamicData
}

type ArrayOfVirtualMachineProfileSpec struct {
	VirtualMachineProfileSpec []*VirtualMachineProfileSpec `xml:"VirtualMachineProfileSpec,omitempty"`
}

type VirtualMachineQuestionInfo struct {
	*DynamicData

	Id      string                   `xml:"id,omitempty"`
	Text    string                   `xml:"text,omitempty"`
	Choice  *ChoiceOption            `xml:"choice,omitempty"`
	Message []*VirtualMachineMessage `xml:"message,omitempty"`
}

type VirtualMachineRelocateSpecDiskLocator struct {
	*DynamicData

	DiskId          int32                        `xml:"diskId,omitempty"`
	Datastore       *ManagedObjectReference      `xml:"datastore,omitempty"`
	DiskMoveType    string                       `xml:"diskMoveType,omitempty"`
	DiskBackingInfo *VirtualDeviceBackingInfo    `xml:"diskBackingInfo,omitempty"`
	Profile         []*VirtualMachineProfileSpec `xml:"profile,omitempty"`
}

type ArrayOfVirtualMachineRelocateSpecDiskLocator struct {
	VirtualMachineRelocateSpecDiskLocator []*VirtualMachineRelocateSpecDiskLocator `xml:"VirtualMachineRelocateSpecDiskLocator,omitempty"`
}

type VirtualMachineRelocateSpec struct {
	*DynamicData

	Datastore    *ManagedObjectReference                  `xml:"datastore,omitempty"`
	DiskMoveType string                                   `xml:"diskMoveType,omitempty"`
	Pool         *ManagedObjectReference                  `xml:"pool,omitempty"`
	Host         *ManagedObjectReference                  `xml:"host,omitempty"`
	Disk         []*VirtualMachineRelocateSpecDiskLocator `xml:"disk,omitempty"`
	Transform    *VirtualMachineRelocateTransformation    `xml:"transform,omitempty"`
	DeviceChange []*VirtualDeviceConfigSpec               `xml:"deviceChange,omitempty"`
	Profile      []*VirtualMachineProfileSpec             `xml:"profile,omitempty"`
}

type ReplicationInfoDiskSettings struct {
	*DynamicData

	Key               int32  `xml:"key,omitempty"`
	DiskReplicationId string `xml:"diskReplicationId,omitempty"`
}

type ArrayOfReplicationInfoDiskSettings struct {
	ReplicationInfoDiskSettings []*ReplicationInfoDiskSettings `xml:"ReplicationInfoDiskSettings,omitempty"`
}

type VirtualMachineRuntimeInfoDasProtectionState struct {
	*DynamicData

	DasProtected bool `xml:"dasProtected,omitempty"`
}

type VirtualMachineRuntimeInfo struct {
	*DynamicData

	Device                    []*VirtualMachineDeviceRuntimeInfo           `xml:"device,omitempty"`
	Host                      *ManagedObjectReference                      `xml:"host,omitempty"`
	ConnectionState           *VirtualMachineConnectionState               `xml:"connectionState,omitempty"`
	PowerState                *VirtualMachinePowerState                    `xml:"powerState,omitempty"`
	FaultToleranceState       *VirtualMachineFaultToleranceState           `xml:"faultToleranceState,omitempty"`
	DasVmProtection           *VirtualMachineRuntimeInfoDasProtectionState `xml:"dasVmProtection,omitempty"`
	ToolsInstallerMounted     bool                                         `xml:"toolsInstallerMounted,omitempty"`
	SuspendTime               time.Time                                    `xml:"suspendTime,omitempty"`
	BootTime                  time.Time                                    `xml:"bootTime,omitempty"`
	SuspendInterval           int64                                        `xml:"suspendInterval,omitempty"`
	Question                  *VirtualMachineQuestionInfo                  `xml:"question,omitempty"`
	MemoryOverhead            int64                                        `xml:"memoryOverhead,omitempty"`
	MaxCpuUsage               int32                                        `xml:"maxCpuUsage,omitempty"`
	MaxMemoryUsage            int32                                        `xml:"maxMemoryUsage,omitempty"`
	NumMksConnections         int32                                        `xml:"numMksConnections,omitempty"`
	RecordReplayState         *VirtualMachineRecordReplayState             `xml:"recordReplayState,omitempty"`
	CleanPowerOff             bool                                         `xml:"cleanPowerOff,omitempty"`
	NeedSecondaryReason       string                                       `xml:"needSecondaryReason,omitempty"`
	OnlineStandby             bool                                         `xml:"onlineStandby,omitempty"`
	MinRequiredEVCModeKey     string                                       `xml:"minRequiredEVCModeKey,omitempty"`
	ConsolidationNeeded       bool                                         `xml:"consolidationNeeded,omitempty"`
	OfflineFeatureRequirement []*VirtualMachineFeatureRequirement          `xml:"offlineFeatureRequirement,omitempty"`
	FeatureRequirement        []*VirtualMachineFeatureRequirement          `xml:"featureRequirement,omitempty"`
	FeatureMask               []*HostFeatureMask                           `xml:"featureMask,omitempty"`
	VFlashCacheAllocation     int64                                        `xml:"vFlashCacheAllocation,omitempty"`
}

type ScheduledHardwareUpgradeInfo struct {
	*DynamicData

	UpgradePolicy                  string                `xml:"upgradePolicy,omitempty"`
	VersionKey                     string                `xml:"versionKey,omitempty"`
	ScheduledHardwareUpgradeStatus string                `xml:"scheduledHardwareUpgradeStatus,omitempty"`
	Fault                          *LocalizedMethodFault `xml:"fault,omitempty"`
}

type VirtualMachineScsiDiskDeviceInfo struct {
	*VirtualMachineDiskDeviceInfo

	Disk          *HostScsiDisk `xml:"disk,omitempty"`
	TransportHint string        `xml:"transportHint,omitempty"`
	LunNumber     int32         `xml:"lunNumber,omitempty"`
}

type ArrayOfVirtualMachineScsiDiskDeviceInfo struct {
	VirtualMachineScsiDiskDeviceInfo []*VirtualMachineScsiDiskDeviceInfo `xml:"VirtualMachineScsiDiskDeviceInfo,omitempty"`
}

type VirtualMachineScsiPassthroughInfo struct {
	*VirtualMachineTargetInfo

	ScsiClass          string `xml:"scsiClass,omitempty"`
	Vendor             string `xml:"vendor,omitempty"`
	PhysicalUnitNumber int32  `xml:"physicalUnitNumber,omitempty"`
}

type ArrayOfVirtualMachineScsiPassthroughInfo struct {
	VirtualMachineScsiPassthroughInfo []*VirtualMachineScsiPassthroughInfo `xml:"VirtualMachineScsiPassthroughInfo,omitempty"`
}

type VirtualMachineSerialInfo struct {
	*VirtualMachineTargetInfo
}

type ArrayOfVirtualMachineSerialInfo struct {
	VirtualMachineSerialInfo []*VirtualMachineSerialInfo `xml:"VirtualMachineSerialInfo,omitempty"`
}

type VirtualMachineSnapshotInfo struct {
	*DynamicData

	CurrentSnapshot  *ManagedObjectReference       `xml:"currentSnapshot,omitempty"`
	RootSnapshotList []*VirtualMachineSnapshotTree `xml:"rootSnapshotList,omitempty"`
}

type VirtualMachineSnapshotTree struct {
	*DynamicData

	Snapshot          *ManagedObjectReference       `xml:"snapshot,omitempty"`
	Vm                *ManagedObjectReference       `xml:"vm,omitempty"`
	Name              string                        `xml:"name,omitempty"`
	Description       string                        `xml:"description,omitempty"`
	Id                int32                         `xml:"id,omitempty"`
	CreateTime        time.Time                     `xml:"createTime,omitempty"`
	State             *VirtualMachinePowerState     `xml:"state,omitempty"`
	Quiesced          bool                          `xml:"quiesced,omitempty"`
	BackupManifest    string                        `xml:"backupManifest,omitempty"`
	ChildSnapshotList []*VirtualMachineSnapshotTree `xml:"childSnapshotList,omitempty"`
	ReplaySupported   bool                          `xml:"replaySupported,omitempty"`
}

type ArrayOfVirtualMachineSnapshotTree struct {
	VirtualMachineSnapshotTree []*VirtualMachineSnapshotTree `xml:"VirtualMachineSnapshotTree,omitempty"`
}

type VirtualMachineSoundInfo struct {
	*VirtualMachineTargetInfo
}

type ArrayOfVirtualMachineSoundInfo struct {
	VirtualMachineSoundInfo []*VirtualMachineSoundInfo `xml:"VirtualMachineSoundInfo,omitempty"`
}

type VirtualMachineSriovInfo struct {
	*VirtualMachinePciPassthroughInfo

	VirtualFunction bool   `xml:"virtualFunction,omitempty"`
	Pnic            string `xml:"pnic,omitempty"`
}

type ArrayOfVirtualMachineSriovInfo struct {
	VirtualMachineSriovInfo []*VirtualMachineSriovInfo `xml:"VirtualMachineSriovInfo,omitempty"`
}

type VirtualMachineUsageOnDatastore struct {
	*DynamicData

	Datastore   *ManagedObjectReference `xml:"datastore,omitempty"`
	Committed   int64                   `xml:"committed,omitempty"`
	Uncommitted int64                   `xml:"uncommitted,omitempty"`
	Unshared    int64                   `xml:"unshared,omitempty"`
}

type ArrayOfVirtualMachineUsageOnDatastore struct {
	VirtualMachineUsageOnDatastore []*VirtualMachineUsageOnDatastore `xml:"VirtualMachineUsageOnDatastore,omitempty"`
}

type VirtualMachineStorageInfo struct {
	*DynamicData

	PerDatastoreUsage []*VirtualMachineUsageOnDatastore `xml:"perDatastoreUsage,omitempty"`
	Timestamp         time.Time                         `xml:"timestamp,omitempty"`
}

type VirtualMachineConfigSummary struct {
	*DynamicData

	Name                string                    `xml:"name,omitempty"`
	Template            bool                      `xml:"template,omitempty"`
	VmPathName          string                    `xml:"vmPathName,omitempty"`
	MemorySizeMB        int32                     `xml:"memorySizeMB,omitempty"`
	CpuReservation      int32                     `xml:"cpuReservation,omitempty"`
	MemoryReservation   int32                     `xml:"memoryReservation,omitempty"`
	NumCpu              int32                     `xml:"numCpu,omitempty"`
	NumEthernetCards    int32                     `xml:"numEthernetCards,omitempty"`
	NumVirtualDisks     int32                     `xml:"numVirtualDisks,omitempty"`
	Uuid                string                    `xml:"uuid,omitempty"`
	InstanceUuid        string                    `xml:"instanceUuid,omitempty"`
	GuestId             string                    `xml:"guestId,omitempty"`
	GuestFullName       string                    `xml:"guestFullName,omitempty"`
	Annotation          string                    `xml:"annotation,omitempty"`
	Product             *VAppProductInfo          `xml:"product,omitempty"`
	InstallBootRequired bool                      `xml:"installBootRequired,omitempty"`
	FtInfo              *FaultToleranceConfigInfo `xml:"ftInfo,omitempty"`
	ManagedBy           *ManagedByInfo            `xml:"managedBy,omitempty"`
}

type VirtualMachineQuickStats struct {
	*DynamicData

	OverallCpuUsage              int32                `xml:"overallCpuUsage,omitempty"`
	OverallCpuDemand             int32                `xml:"overallCpuDemand,omitempty"`
	GuestMemoryUsage             int32                `xml:"guestMemoryUsage,omitempty"`
	HostMemoryUsage              int32                `xml:"hostMemoryUsage,omitempty"`
	GuestHeartbeatStatus         *ManagedEntityStatus `xml:"guestHeartbeatStatus,omitempty"`
	DistributedCpuEntitlement    int32                `xml:"distributedCpuEntitlement,omitempty"`
	DistributedMemoryEntitlement int32                `xml:"distributedMemoryEntitlement,omitempty"`
	StaticCpuEntitlement         int32                `xml:"staticCpuEntitlement,omitempty"`
	StaticMemoryEntitlement      int32                `xml:"staticMemoryEntitlement,omitempty"`
	PrivateMemory                int32                `xml:"privateMemory,omitempty"`
	SharedMemory                 int32                `xml:"sharedMemory,omitempty"`
	SwappedMemory                int32                `xml:"swappedMemory,omitempty"`
	BalloonedMemory              int32                `xml:"balloonedMemory,omitempty"`
	ConsumedOverheadMemory       int32                `xml:"consumedOverheadMemory,omitempty"`
	FtLogBandwidth               int32                `xml:"ftLogBandwidth,omitempty"`
	FtSecondaryLatency           int32                `xml:"ftSecondaryLatency,omitempty"`
	FtLatencyStatus              *ManagedEntityStatus `xml:"ftLatencyStatus,omitempty"`
	CompressedMemory             int64                `xml:"compressedMemory,omitempty"`
	UptimeSeconds                int32                `xml:"uptimeSeconds,omitempty"`
	SsdSwappedMemory             int64                `xml:"ssdSwappedMemory,omitempty"`
}

type VirtualMachineGuestSummary struct {
	*DynamicData

	GuestId             string                     `xml:"guestId,omitempty"`
	GuestFullName       string                     `xml:"guestFullName,omitempty"`
	ToolsStatus         *VirtualMachineToolsStatus `xml:"toolsStatus,omitempty"`
	ToolsVersionStatus  string                     `xml:"toolsVersionStatus,omitempty"`
	ToolsVersionStatus2 string                     `xml:"toolsVersionStatus2,omitempty"`
	ToolsRunningStatus  string                     `xml:"toolsRunningStatus,omitempty"`
	HostName            string                     `xml:"hostName,omitempty"`
	IpAddress           string                     `xml:"ipAddress,omitempty"`
}

type VirtualMachineStorageSummary struct {
	*DynamicData

	Committed   int64     `xml:"committed,omitempty"`
	Uncommitted int64     `xml:"uncommitted,omitempty"`
	Unshared    int64     `xml:"unshared,omitempty"`
	Timestamp   time.Time `xml:"timestamp,omitempty"`
}

type VirtualMachineSummary struct {
	*DynamicData

	Vm            *ManagedObjectReference       `xml:"vm,omitempty"`
	Runtime       *VirtualMachineRuntimeInfo    `xml:"runtime,omitempty"`
	Guest         *VirtualMachineGuestSummary   `xml:"guest,omitempty"`
	Config        *VirtualMachineConfigSummary  `xml:"config,omitempty"`
	Storage       *VirtualMachineStorageSummary `xml:"storage,omitempty"`
	QuickStats    *VirtualMachineQuickStats     `xml:"quickStats,omitempty"`
	OverallStatus *ManagedEntityStatus          `xml:"overallStatus,omitempty"`
	CustomValue   []*CustomFieldValue           `xml:"customValue,omitempty"`
}

type ArrayOfVirtualMachineSummary struct {
	VirtualMachineSummary []*VirtualMachineSummary `xml:"VirtualMachineSummary,omitempty"`
}

type VirtualMachineTargetInfo struct {
	*DynamicData

	Name             string   `xml:"name,omitempty"`
	ConfigurationTag []string `xml:"configurationTag,omitempty"`
}

type ToolsConfigInfoToolsLastInstallInfo struct {
	*DynamicData

	Counter int32                 `xml:"counter,omitempty"`
	Fault   *LocalizedMethodFault `xml:"fault,omitempty"`
}

type ToolsConfigInfo struct {
	*DynamicData

	ToolsVersion         int32                                `xml:"toolsVersion,omitempty"`
	AfterPowerOn         bool                                 `xml:"afterPowerOn,omitempty"`
	AfterResume          bool                                 `xml:"afterResume,omitempty"`
	BeforeGuestStandby   bool                                 `xml:"beforeGuestStandby,omitempty"`
	BeforeGuestShutdown  bool                                 `xml:"beforeGuestShutdown,omitempty"`
	BeforeGuestReboot    bool                                 `xml:"beforeGuestReboot,omitempty"`
	ToolsUpgradePolicy   string                               `xml:"toolsUpgradePolicy,omitempty"`
	PendingCustomization string                               `xml:"pendingCustomization,omitempty"`
	SyncTimeWithHost     bool                                 `xml:"syncTimeWithHost,omitempty"`
	LastInstallInfo      *ToolsConfigInfoToolsLastInstallInfo `xml:"lastInstallInfo,omitempty"`
}

type VirtualMachineUsbInfo struct {
	*VirtualMachineTargetInfo

	Description  string                 `xml:"description,omitempty"`
	Vendor       int32                  `xml:"vendor,omitempty"`
	Product      int32                  `xml:"product,omitempty"`
	PhysicalPath string                 `xml:"physicalPath,omitempty"`
	Family       []string               `xml:"family,omitempty"`
	Speed        []string               `xml:"speed,omitempty"`
	Summary      *VirtualMachineSummary `xml:"summary,omitempty"`
}

type ArrayOfVirtualMachineUsbInfo struct {
	VirtualMachineUsbInfo []*VirtualMachineUsbInfo `xml:"VirtualMachineUsbInfo,omitempty"`
}

type VirtualMachineVFlashModuleInfo struct {
	*VirtualMachineTargetInfo

	VFlashModule *HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption `xml:"vFlashModule,omitempty"`
}

type ArrayOfVirtualMachineVFlashModuleInfo struct {
	VirtualMachineVFlashModuleInfo []*VirtualMachineVFlashModuleInfo `xml:"VirtualMachineVFlashModuleInfo,omitempty"`
}

type VirtualHardware struct {
	*DynamicData

	NumCPU              int32            `xml:"numCPU,omitempty"`
	NumCoresPerSocket   int32            `xml:"numCoresPerSocket,omitempty"`
	MemoryMB            int32            `xml:"memoryMB,omitempty"`
	VirtualICH7MPresent bool             `xml:"virtualICH7MPresent,omitempty"`
	VirtualSMCPresent   bool             `xml:"virtualSMCPresent,omitempty"`
	Device              []*VirtualDevice `xml:"device,omitempty"`
}

type VirtualHardwareOption struct {
	*DynamicData

	HwVersion             int32                  `xml:"hwVersion,omitempty"`
	VirtualDeviceOption   []*VirtualDeviceOption `xml:"virtualDeviceOption,omitempty"`
	DeviceListReadonly    bool                   `xml:"deviceListReadonly,omitempty"`
	NumCPU                []int32                `xml:"numCPU,omitempty"`
	NumCoresPerSocket     *IntOption             `xml:"numCoresPerSocket,omitempty"`
	NumCpuReadonly        bool                   `xml:"numCpuReadonly,omitempty"`
	MemoryMB              *LongOption            `xml:"memoryMB,omitempty"`
	NumPCIControllers     *IntOption             `xml:"numPCIControllers,omitempty"`
	NumIDEControllers     *IntOption             `xml:"numIDEControllers,omitempty"`
	NumUSBControllers     *IntOption             `xml:"numUSBControllers,omitempty"`
	NumUSBXHCIControllers *IntOption             `xml:"numUSBXHCIControllers,omitempty"`
	NumSIOControllers     *IntOption             `xml:"numSIOControllers,omitempty"`
	NumPS2Controllers     *IntOption             `xml:"numPS2Controllers,omitempty"`
	LicensingLimit        []string               `xml:"licensingLimit,omitempty"`
	NumSupportedWwnPorts  *IntOption             `xml:"numSupportedWwnPorts,omitempty"`
	NumSupportedWwnNodes  *IntOption             `xml:"numSupportedWwnNodes,omitempty"`
	ResourceConfigOption  *ResourceConfigOption  `xml:"resourceConfigOption,omitempty"`
}

type VirtualMachineImportSpec struct {
	*ImportSpec

	ConfigSpec    *VirtualMachineConfigSpec `xml:"configSpec,omitempty"`
	ResPoolEntity *ManagedObjectReference   `xml:"resPoolEntity,omitempty"`
}

type CheckResult struct {
	*DynamicData

	Vm      *ManagedObjectReference `xml:"vm,omitempty"`
	Host    *ManagedObjectReference `xml:"host,omitempty"`
	Warning []*LocalizedMethodFault `xml:"warning,omitempty"`
	Error   []*LocalizedMethodFault `xml:"error,omitempty"`
}

type ArrayOfCheckResult struct {
	CheckResult []*CheckResult `xml:"CheckResult,omitempty"`
}

type CustomizationIPSettingsIpV6AddressSpec struct {
	*DynamicData

	Ip      []*CustomizationIpV6Generator `xml:"ip,omitempty"`
	Gateway []string                      `xml:"gateway,omitempty"`
}

type CustomizationIPSettings struct {
	*DynamicData

	Ip            *CustomizationIpGenerator               `xml:"ip,omitempty"`
	SubnetMask    string                                  `xml:"subnetMask,omitempty"`
	Gateway       []string                                `xml:"gateway,omitempty"`
	IpV6Spec      *CustomizationIPSettingsIpV6AddressSpec `xml:"ipV6Spec,omitempty"`
	DnsServerList []string                                `xml:"dnsServerList,omitempty"`
	DnsDomain     string                                  `xml:"dnsDomain,omitempty"`
	PrimaryWINS   string                                  `xml:"primaryWINS,omitempty"`
	SecondaryWINS string                                  `xml:"secondaryWINS,omitempty"`
	NetBIOS       *CustomizationNetBIOSMode               `xml:"netBIOS,omitempty"`
}

type CustomizationSpec struct {
	*DynamicData

	Options          *CustomizationOptions          `xml:"options,omitempty"`
	Identity         *CustomizationIdentitySettings `xml:"identity,omitempty"`
	GlobalIPSettings *CustomizationGlobalIPSettings `xml:"globalIPSettings,omitempty"`
	NicSettingMap    []*CustomizationAdapterMapping `xml:"nicSettingMap,omitempty"`
	EncryptionKey    []int8                         `xml:"encryptionKey,omitempty"`
}

type CustomizationName struct {
	*DynamicData
}

type CustomizationFixedName struct {
	*CustomizationName

	Name string `xml:"name,omitempty"`
}

type CustomizationPrefixName struct {
	*CustomizationName

	Base string `xml:"base,omitempty"`
}

type CustomizationVirtualMachineName struct {
	*CustomizationName
}

type CustomizationUnknownName struct {
	*CustomizationName
}

type CustomizationCustomName struct {
	*CustomizationName

	Argument string `xml:"argument,omitempty"`
}

type CustomizationPassword struct {
	*DynamicData

	Value     string `xml:"value,omitempty"`
	PlainText bool   `xml:"plainText,omitempty"`
}

type CustomizationOptions struct {
	*DynamicData
}

type CustomizationWinOptions struct {
	*CustomizationOptions

	ChangeSID      bool                              `xml:"changeSID,omitempty"`
	DeleteAccounts bool                              `xml:"deleteAccounts,omitempty"`
	Reboot         *CustomizationSysprepRebootOption `xml:"reboot,omitempty"`
}

type CustomizationLinuxOptions struct {
	*CustomizationOptions
}

type CustomizationGuiUnattended struct {
	*DynamicData

	Password       *CustomizationPassword `xml:"password,omitempty"`
	TimeZone       int32                  `xml:"timeZone,omitempty"`
	AutoLogon      bool                   `xml:"autoLogon,omitempty"`
	AutoLogonCount int32                  `xml:"autoLogonCount,omitempty"`
}

type CustomizationUserData struct {
	*DynamicData

	FullName     string             `xml:"fullName,omitempty"`
	OrgName      string             `xml:"orgName,omitempty"`
	ComputerName *CustomizationName `xml:"computerName,omitempty"`
	ProductId    string             `xml:"productId,omitempty"`
}

type CustomizationGuiRunOnce struct {
	*DynamicData

	CommandList []string `xml:"commandList,omitempty"`
}

type CustomizationIdentification struct {
	*DynamicData

	JoinWorkgroup       string                 `xml:"joinWorkgroup,omitempty"`
	JoinDomain          string                 `xml:"joinDomain,omitempty"`
	DomainAdmin         string                 `xml:"domainAdmin,omitempty"`
	DomainAdminPassword *CustomizationPassword `xml:"domainAdminPassword,omitempty"`
}

type CustomizationLicenseFilePrintData struct {
	*DynamicData

	AutoMode  *CustomizationLicenseDataMode `xml:"autoMode,omitempty"`
	AutoUsers int32                         `xml:"autoUsers,omitempty"`
}

type CustomizationIdentitySettings struct {
	*DynamicData
}

type CustomizationSysprepText struct {
	*CustomizationIdentitySettings

	Value string `xml:"value,omitempty"`
}

type CustomizationSysprep struct {
	*CustomizationIdentitySettings

	GuiUnattended        *CustomizationGuiUnattended        `xml:"guiUnattended,omitempty"`
	UserData             *CustomizationUserData             `xml:"userData,omitempty"`
	GuiRunOnce           *CustomizationGuiRunOnce           `xml:"guiRunOnce,omitempty"`
	Identification       *CustomizationIdentification       `xml:"identification,omitempty"`
	LicenseFilePrintData *CustomizationLicenseFilePrintData `xml:"licenseFilePrintData,omitempty"`
}

type CustomizationLinuxPrep struct {
	*CustomizationIdentitySettings

	HostName   *CustomizationName `xml:"hostName,omitempty"`
	Domain     string             `xml:"domain,omitempty"`
	TimeZone   string             `xml:"timeZone,omitempty"`
	HwClockUTC bool               `xml:"hwClockUTC,omitempty"`
}

type CustomizationGlobalIPSettings struct {
	*DynamicData

	DnsSuffixList []string `xml:"dnsSuffixList,omitempty"`
	DnsServerList []string `xml:"dnsServerList,omitempty"`
}

type CustomizationIpGenerator struct {
	*DynamicData
}

type CustomizationDhcpIpGenerator struct {
	*CustomizationIpGenerator
}

type CustomizationFixedIp struct {
	*CustomizationIpGenerator

	IpAddress string `xml:"ipAddress,omitempty"`
}

type CustomizationUnknownIpGenerator struct {
	*CustomizationIpGenerator
}

type CustomizationCustomIpGenerator struct {
	*CustomizationIpGenerator

	Argument string `xml:"argument,omitempty"`
}

type CustomizationIpV6Generator struct {
	*DynamicData
}

type ArrayOfCustomizationIpV6Generator struct {
	CustomizationIpV6Generator []*CustomizationIpV6Generator `xml:"CustomizationIpV6Generator,omitempty"`
}

type CustomizationDhcpIpV6Generator struct {
	*CustomizationIpV6Generator
}

type CustomizationStatelessIpV6Generator struct {
	*CustomizationIpV6Generator
}

type CustomizationFixedIpV6 struct {
	*CustomizationIpV6Generator

	IpAddress  string `xml:"ipAddress,omitempty"`
	SubnetMask int32  `xml:"subnetMask,omitempty"`
}

type CustomizationAutoIpV6Generator struct {
	*CustomizationIpV6Generator
}

type CustomizationUnknownIpV6Generator struct {
	*CustomizationIpV6Generator
}

type CustomizationCustomIpV6Generator struct {
	*CustomizationIpV6Generator

	Argument string `xml:"argument,omitempty"`
}

type CustomizationAdapterMapping struct {
	*DynamicData

	MacAddress string                   `xml:"macAddress,omitempty"`
	Adapter    *CustomizationIPSettings `xml:"adapter,omitempty"`
}

type ArrayOfCustomizationAdapterMapping struct {
	CustomizationAdapterMapping []*CustomizationAdapterMapping `xml:"CustomizationAdapterMapping,omitempty"`
}

type HostDiskMappingPartitionInfo struct {
	*DynamicData

	Name         string `xml:"name,omitempty"`
	FileSystem   string `xml:"fileSystem,omitempty"`
	CapacityInKb int64  `xml:"capacityInKb,omitempty"`
}

type HostDiskMappingInfo struct {
	*DynamicData

	PhysicalPartition *HostDiskMappingPartitionInfo `xml:"physicalPartition,omitempty"`
	Name              string                        `xml:"name,omitempty"`
	Exclusive         bool                          `xml:"exclusive,omitempty"`
}

type HostDiskMappingPartitionOption struct {
	*DynamicData

	Name         string `xml:"name,omitempty"`
	FileSystem   string `xml:"fileSystem,omitempty"`
	CapacityInKb int64  `xml:"capacityInKb,omitempty"`
}

type ArrayOfHostDiskMappingPartitionOption struct {
	HostDiskMappingPartitionOption []*HostDiskMappingPartitionOption `xml:"HostDiskMappingPartitionOption,omitempty"`
}

type HostDiskMappingOption struct {
	*DynamicData

	PhysicalPartition []*HostDiskMappingPartitionOption `xml:"physicalPartition,omitempty"`
	Name              string                            `xml:"name,omitempty"`
}

type ParaVirtualSCSIController struct {
	*VirtualSCSIController
}

type ParaVirtualSCSIControllerOption struct {
	*VirtualSCSIControllerOption
}

type VirtualAHCIController struct {
	*VirtualSATAController
}

type VirtualAHCIControllerOption struct {
	*VirtualSATAControllerOption
}

type VirtualBusLogicController struct {
	*VirtualSCSIController
}

type VirtualBusLogicControllerOption struct {
	*VirtualSCSIControllerOption
}

type VirtualCdromIsoBackingInfo struct {
	*VirtualDeviceFileBackingInfo
}

type VirtualCdromPassthroughBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo

	Exclusive bool `xml:"exclusive,omitempty"`
}

type VirtualCdromRemotePassthroughBackingInfo struct {
	*VirtualDeviceRemoteDeviceBackingInfo

	Exclusive bool `xml:"exclusive,omitempty"`
}

type VirtualCdromAtapiBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo
}

type VirtualCdromRemoteAtapiBackingInfo struct {
	*VirtualDeviceRemoteDeviceBackingInfo
}

type VirtualCdrom struct {
	*VirtualDevice
}

type VirtualCdromIsoBackingOption struct {
	*VirtualDeviceFileBackingOption
}

type VirtualCdromPassthroughBackingOption struct {
	*VirtualDeviceDeviceBackingOption

	Exclusive *BoolOption `xml:"exclusive,omitempty"`
}

type VirtualCdromRemotePassthroughBackingOption struct {
	*VirtualDeviceRemoteDeviceBackingOption

	Exclusive *BoolOption `xml:"exclusive,omitempty"`
}

type VirtualCdromAtapiBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualCdromRemoteAtapiBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualCdromOption struct {
	*VirtualDeviceOption
}

type VirtualController struct {
	*VirtualDevice

	BusNumber int32   `xml:"busNumber,omitempty"`
	Device    []int32 `xml:"device,omitempty"`
}

type VirtualControllerOption struct {
	*VirtualDeviceOption

	Devices         *IntOption `xml:"devices,omitempty"`
	SupportedDevice []string   `xml:"supportedDevice,omitempty"`
}

type VirtualDeviceBackingInfo struct {
	*DynamicData
}

type VirtualDeviceFileBackingInfo struct {
	*VirtualDeviceBackingInfo

	FileName        string                  `xml:"fileName,omitempty"`
	Datastore       *ManagedObjectReference `xml:"datastore,omitempty"`
	BackingObjectId string                  `xml:"backingObjectId,omitempty"`
}

type VirtualDeviceDeviceBackingInfo struct {
	*VirtualDeviceBackingInfo

	DeviceName    string `xml:"deviceName,omitempty"`
	UseAutoDetect bool   `xml:"useAutoDetect,omitempty"`
}

type VirtualDeviceRemoteDeviceBackingInfo struct {
	*VirtualDeviceBackingInfo

	DeviceName    string `xml:"deviceName,omitempty"`
	UseAutoDetect bool   `xml:"useAutoDetect,omitempty"`
}

type VirtualDevicePipeBackingInfo struct {
	*VirtualDeviceBackingInfo

	PipeName string `xml:"pipeName,omitempty"`
}

type VirtualDeviceURIBackingInfo struct {
	*VirtualDeviceBackingInfo

	ServiceURI string `xml:"serviceURI,omitempty"`
	Direction  string `xml:"direction,omitempty"`
	ProxyURI   string `xml:"proxyURI,omitempty"`
}

type VirtualDeviceConnectInfo struct {
	*DynamicData

	StartConnected    bool   `xml:"startConnected,omitempty"`
	AllowGuestControl bool   `xml:"allowGuestControl,omitempty"`
	Connected         bool   `xml:"connected,omitempty"`
	Status            string `xml:"status,omitempty"`
}

type VirtualDeviceBusSlotInfo struct {
	*DynamicData
}

type VirtualDevicePciBusSlotInfo struct {
	*VirtualDeviceBusSlotInfo

	PciSlotNumber int32 `xml:"pciSlotNumber,omitempty"`
}

type VirtualDevice struct {
	*DynamicData

	Key           int32                     `xml:"key,omitempty"`
	DeviceInfo    *Description              `xml:"deviceInfo,omitempty"`
	Backing       *VirtualDeviceBackingInfo `xml:"backing,omitempty"`
	Connectable   *VirtualDeviceConnectInfo `xml:"connectable,omitempty"`
	SlotInfo      *VirtualDeviceBusSlotInfo `xml:"slotInfo,omitempty"`
	ControllerKey int32                     `xml:"controllerKey,omitempty"`
	UnitNumber    int32                     `xml:"unitNumber,omitempty"`
}

type ArrayOfVirtualDevice struct {
	VirtualDevice []*VirtualDevice `xml:"VirtualDevice,omitempty"`
}

type VirtualDeviceBackingOption struct {
	*DynamicData

	Type_ string `xml:"type,omitempty"`
}

type ArrayOfVirtualDeviceBackingOption struct {
	VirtualDeviceBackingOption []*VirtualDeviceBackingOption `xml:"VirtualDeviceBackingOption,omitempty"`
}

type VirtualDeviceFileBackingOption struct {
	*VirtualDeviceBackingOption

	FileNameExtensions *ChoiceOption `xml:"fileNameExtensions,omitempty"`
}

type VirtualDeviceDeviceBackingOption struct {
	*VirtualDeviceBackingOption

	AutoDetectAvailable *BoolOption `xml:"autoDetectAvailable,omitempty"`
}

type VirtualDeviceRemoteDeviceBackingOption struct {
	*VirtualDeviceBackingOption

	AutoDetectAvailable *BoolOption `xml:"autoDetectAvailable,omitempty"`
}

type VirtualDevicePipeBackingOption struct {
	*VirtualDeviceBackingOption
}

type VirtualDeviceURIBackingOption struct {
	*VirtualDeviceBackingOption

	Directions *ChoiceOption `xml:"directions,omitempty"`
}

type VirtualDeviceConnectOption struct {
	*DynamicData

	StartConnected    *BoolOption `xml:"startConnected,omitempty"`
	AllowGuestControl *BoolOption `xml:"allowGuestControl,omitempty"`
}

type VirtualDeviceBusSlotOption struct {
	*DynamicData

	Type_ string `xml:"type,omitempty"`
}

type VirtualDeviceOption struct {
	*DynamicData

	Type_                     string                        `xml:"type,omitempty"`
	ConnectOption             *VirtualDeviceConnectOption   `xml:"connectOption,omitempty"`
	BusSlotOption             *VirtualDeviceBusSlotOption   `xml:"busSlotOption,omitempty"`
	ControllerType            string                        `xml:"controllerType,omitempty"`
	AutoAssignController      *BoolOption                   `xml:"autoAssignController,omitempty"`
	BackingOption             []*VirtualDeviceBackingOption `xml:"backingOption,omitempty"`
	DefaultBackingOptionIndex int32                         `xml:"defaultBackingOptionIndex,omitempty"`
	LicensingLimit            []string                      `xml:"licensingLimit,omitempty"`
	Deprecated                bool                          `xml:"deprecated,omitempty"`
	PlugAndPlay               bool                          `xml:"plugAndPlay,omitempty"`
	HotRemoveSupported        bool                          `xml:"hotRemoveSupported,omitempty"`
}

type ArrayOfVirtualDeviceOption struct {
	VirtualDeviceOption []*VirtualDeviceOption `xml:"VirtualDeviceOption,omitempty"`
}

type VirtualDeviceConfigSpec struct {
	*DynamicData

	Operation     *VirtualDeviceConfigSpecOperation     `xml:"operation,omitempty"`
	FileOperation *VirtualDeviceConfigSpecFileOperation `xml:"fileOperation,omitempty"`
	Device        *VirtualDevice                        `xml:"device,omitempty"`
	Profile       []*VirtualMachineProfileSpec          `xml:"profile,omitempty"`
}

type ArrayOfVirtualDeviceConfigSpec struct {
	VirtualDeviceConfigSpec []*VirtualDeviceConfigSpec `xml:"VirtualDeviceConfigSpec,omitempty"`
}

type VirtualDiskSparseVer1BackingInfo struct {
	*VirtualDeviceFileBackingInfo

	DiskMode      string                            `xml:"diskMode,omitempty"`
	Split         bool                              `xml:"split,omitempty"`
	WriteThrough  bool                              `xml:"writeThrough,omitempty"`
	SpaceUsedInKB int64                             `xml:"spaceUsedInKB,omitempty"`
	ContentId     string                            `xml:"contentId,omitempty"`
	Parent        *VirtualDiskSparseVer1BackingInfo `xml:"parent,omitempty"`
}

type VirtualDiskSparseVer2BackingInfo struct {
	*VirtualDeviceFileBackingInfo

	DiskMode      string                            `xml:"diskMode,omitempty"`
	Split         bool                              `xml:"split,omitempty"`
	WriteThrough  bool                              `xml:"writeThrough,omitempty"`
	SpaceUsedInKB int64                             `xml:"spaceUsedInKB,omitempty"`
	Uuid          string                            `xml:"uuid,omitempty"`
	ContentId     string                            `xml:"contentId,omitempty"`
	ChangeId      string                            `xml:"changeId,omitempty"`
	Parent        *VirtualDiskSparseVer2BackingInfo `xml:"parent,omitempty"`
}

type VirtualDiskFlatVer1BackingInfo struct {
	*VirtualDeviceFileBackingInfo

	DiskMode     string                          `xml:"diskMode,omitempty"`
	Split        bool                            `xml:"split,omitempty"`
	WriteThrough bool                            `xml:"writeThrough,omitempty"`
	ContentId    string                          `xml:"contentId,omitempty"`
	Parent       *VirtualDiskFlatVer1BackingInfo `xml:"parent,omitempty"`
}

type VirtualDiskFlatVer2BackingInfo struct {
	*VirtualDeviceFileBackingInfo

	DiskMode        string                          `xml:"diskMode,omitempty"`
	Split           bool                            `xml:"split,omitempty"`
	WriteThrough    bool                            `xml:"writeThrough,omitempty"`
	ThinProvisioned bool                            `xml:"thinProvisioned,omitempty"`
	EagerlyScrub    bool                            `xml:"eagerlyScrub,omitempty"`
	Uuid            string                          `xml:"uuid,omitempty"`
	ContentId       string                          `xml:"contentId,omitempty"`
	ChangeId        string                          `xml:"changeId,omitempty"`
	Parent          *VirtualDiskFlatVer2BackingInfo `xml:"parent,omitempty"`
	DeltaDiskFormat string                          `xml:"deltaDiskFormat,omitempty"`
	DigestEnabled   bool                            `xml:"digestEnabled,omitempty"`
	DeltaGrainSize  int32                           `xml:"deltaGrainSize,omitempty"`
}

type VirtualDiskSeSparseBackingInfo struct {
	*VirtualDeviceFileBackingInfo

	DiskMode        string                          `xml:"diskMode,omitempty"`
	WriteThrough    bool                            `xml:"writeThrough,omitempty"`
	Uuid            string                          `xml:"uuid,omitempty"`
	ContentId       string                          `xml:"contentId,omitempty"`
	ChangeId        string                          `xml:"changeId,omitempty"`
	Parent          *VirtualDiskSeSparseBackingInfo `xml:"parent,omitempty"`
	DeltaDiskFormat string                          `xml:"deltaDiskFormat,omitempty"`
	DigestEnabled   bool                            `xml:"digestEnabled,omitempty"`
	GrainSize       int32                           `xml:"grainSize,omitempty"`
}

type VirtualDiskRawDiskVer2BackingInfo struct {
	*VirtualDeviceDeviceBackingInfo

	DescriptorFileName string `xml:"descriptorFileName,omitempty"`
	Uuid               string `xml:"uuid,omitempty"`
	ChangeId           string `xml:"changeId,omitempty"`
}

type VirtualDiskPartitionedRawDiskVer2BackingInfo struct {
	*VirtualDiskRawDiskVer2BackingInfo

	Partition []int32 `xml:"partition,omitempty"`
}

type VirtualDiskRawDiskMappingVer1BackingInfo struct {
	*VirtualDeviceFileBackingInfo

	LunUuid           string                                    `xml:"lunUuid,omitempty"`
	DeviceName        string                                    `xml:"deviceName,omitempty"`
	CompatibilityMode string                                    `xml:"compatibilityMode,omitempty"`
	DiskMode          string                                    `xml:"diskMode,omitempty"`
	Uuid              string                                    `xml:"uuid,omitempty"`
	ContentId         string                                    `xml:"contentId,omitempty"`
	ChangeId          string                                    `xml:"changeId,omitempty"`
	Parent            *VirtualDiskRawDiskMappingVer1BackingInfo `xml:"parent,omitempty"`
}

type VirtualDiskVFlashCacheConfigInfo struct {
	*DynamicData

	VFlashModule         string `xml:"vFlashModule,omitempty"`
	ReservationInMB      int64  `xml:"reservationInMB,omitempty"`
	CacheConsistencyType string `xml:"cacheConsistencyType,omitempty"`
	CacheMode            string `xml:"cacheMode,omitempty"`
	BlockSizeInKB        int64  `xml:"blockSizeInKB,omitempty"`
}

type VirtualDisk struct {
	*VirtualDevice

	CapacityInKB          int64                             `xml:"capacityInKB,omitempty"`
	CapacityInBytes       int64                             `xml:"capacityInBytes,omitempty"`
	Shares                *SharesInfo                       `xml:"shares,omitempty"`
	StorageIOAllocation   *StorageIOAllocationInfo          `xml:"storageIOAllocation,omitempty"`
	DiskObjectId          string                            `xml:"diskObjectId,omitempty"`
	VFlashCacheConfigInfo *VirtualDiskVFlashCacheConfigInfo `xml:"vFlashCacheConfigInfo,omitempty"`
}

type ArrayOfVirtualDisk struct {
	VirtualDisk []*VirtualDisk `xml:"VirtualDisk,omitempty"`
}

type VirtualDiskId struct {
	*DynamicData

	Vm     *ManagedObjectReference `xml:"vm,omitempty"`
	DiskId int32                   `xml:"diskId,omitempty"`
}

type VirtualDiskSparseVer1BackingOption struct {
	*VirtualDeviceFileBackingOption

	DiskModes    *ChoiceOption `xml:"diskModes,omitempty"`
	Split        *BoolOption   `xml:"split,omitempty"`
	WriteThrough *BoolOption   `xml:"writeThrough,omitempty"`
	Growable     bool          `xml:"growable,omitempty"`
}

type VirtualDiskSparseVer2BackingOption struct {
	*VirtualDeviceFileBackingOption

	DiskMode     *ChoiceOption `xml:"diskMode,omitempty"`
	Split        *BoolOption   `xml:"split,omitempty"`
	WriteThrough *BoolOption   `xml:"writeThrough,omitempty"`
	Growable     bool          `xml:"growable,omitempty"`
	HotGrowable  bool          `xml:"hotGrowable,omitempty"`
	Uuid         bool          `xml:"uuid,omitempty"`
}

type VirtualDiskFlatVer1BackingOption struct {
	*VirtualDeviceFileBackingOption

	DiskMode     *ChoiceOption `xml:"diskMode,omitempty"`
	Split        *BoolOption   `xml:"split,omitempty"`
	WriteThrough *BoolOption   `xml:"writeThrough,omitempty"`
	Growable     bool          `xml:"growable,omitempty"`
}

type VirtualDiskDeltaDiskFormatsSupported struct {
	*DynamicData

	DatastoreType   string        `xml:"datastoreType,omitempty"`
	DeltaDiskFormat *ChoiceOption `xml:"deltaDiskFormat,omitempty"`
}

type ArrayOfVirtualDiskDeltaDiskFormatsSupported struct {
	VirtualDiskDeltaDiskFormatsSupported []*VirtualDiskDeltaDiskFormatsSupported `xml:"VirtualDiskDeltaDiskFormatsSupported,omitempty"`
}

type VirtualDiskFlatVer2BackingOption struct {
	*VirtualDeviceFileBackingOption

	DiskMode                  *ChoiceOption                           `xml:"diskMode,omitempty"`
	Split                     *BoolOption                             `xml:"split,omitempty"`
	WriteThrough              *BoolOption                             `xml:"writeThrough,omitempty"`
	Growable                  bool                                    `xml:"growable,omitempty"`
	HotGrowable               bool                                    `xml:"hotGrowable,omitempty"`
	Uuid                      bool                                    `xml:"uuid,omitempty"`
	ThinProvisioned           *BoolOption                             `xml:"thinProvisioned,omitempty"`
	EagerlyScrub              *BoolOption                             `xml:"eagerlyScrub,omitempty"`
	DeltaDiskFormat           *ChoiceOption                           `xml:"deltaDiskFormat,omitempty"`
	DeltaDiskFormatsSupported []*VirtualDiskDeltaDiskFormatsSupported `xml:"deltaDiskFormatsSupported,omitempty"`
}

type VirtualDiskSeSparseBackingOption struct {
	*VirtualDeviceFileBackingOption

	DiskMode                  *ChoiceOption                           `xml:"diskMode,omitempty"`
	WriteThrough              *BoolOption                             `xml:"writeThrough,omitempty"`
	Growable                  bool                                    `xml:"growable,omitempty"`
	HotGrowable               bool                                    `xml:"hotGrowable,omitempty"`
	Uuid                      bool                                    `xml:"uuid,omitempty"`
	DeltaDiskFormatsSupported []*VirtualDiskDeltaDiskFormatsSupported `xml:"deltaDiskFormatsSupported,omitempty"`
}

type VirtualDiskRawDiskVer2BackingOption struct {
	*VirtualDeviceDeviceBackingOption

	DescriptorFileNameExtensions *ChoiceOption `xml:"descriptorFileNameExtensions,omitempty"`
	Uuid                         bool          `xml:"uuid,omitempty"`
}

type VirtualDiskPartitionedRawDiskVer2BackingOption struct {
	*VirtualDiskRawDiskVer2BackingOption
}

type VirtualDiskRawDiskMappingVer1BackingOption struct {
	*VirtualDeviceDeviceBackingOption

	DescriptorFileNameExtensions *ChoiceOption `xml:"descriptorFileNameExtensions,omitempty"`
	CompatibilityMode            *ChoiceOption `xml:"compatibilityMode,omitempty"`
	DiskMode                     *ChoiceOption `xml:"diskMode,omitempty"`
	Uuid                         bool          `xml:"uuid,omitempty"`
}

type VirtualDiskOptionVFlashCacheConfigOption struct {
	*DynamicData

	CacheConsistencyType *ChoiceOption `xml:"cacheConsistencyType,omitempty"`
	CacheMode            *ChoiceOption `xml:"cacheMode,omitempty"`
	ReservationInMB      *LongOption   `xml:"reservationInMB,omitempty"`
	BlockSizeInKB        *LongOption   `xml:"blockSizeInKB,omitempty"`
}

type VirtualDiskOption struct {
	*VirtualDeviceOption

	CapacityInKB            *LongOption                               `xml:"capacityInKB,omitempty"`
	IoAllocationOption      *StorageIOAllocationOption                `xml:"ioAllocationOption,omitempty"`
	VFlashCacheConfigOption *VirtualDiskOptionVFlashCacheConfigOption `xml:"vFlashCacheConfigOption,omitempty"`
}

type VirtualDiskConfigSpec struct {
	*VirtualDeviceConfigSpec

	MigrateCache bool `xml:"migrateCache,omitempty"`
}

type VirtualE1000 struct {
	*VirtualEthernetCard
}

type VirtualE1000Option struct {
	*VirtualEthernetCardOption
}

type VirtualE1000e struct {
	*VirtualEthernetCard
}

type VirtualE1000eOption struct {
	*VirtualEthernetCardOption
}

type VirtualEnsoniq1371 struct {
	*VirtualSoundCard
}

type VirtualEnsoniq1371Option struct {
	*VirtualSoundCardOption
}

type VirtualEthernetCardNetworkBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo

	Network           *ManagedObjectReference `xml:"network,omitempty"`
	InPassthroughMode bool                    `xml:"inPassthroughMode,omitempty"`
}

type VirtualEthernetCardLegacyNetworkBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo
}

type VirtualEthernetCardDistributedVirtualPortBackingInfo struct {
	*VirtualDeviceBackingInfo

	Port *DistributedVirtualSwitchPortConnection `xml:"port,omitempty"`
}

type VirtualEthernetCardOpaqueNetworkBackingInfo struct {
	*VirtualDeviceBackingInfo

	OpaqueNetworkId   string `xml:"opaqueNetworkId,omitempty"`
	OpaqueNetworkType string `xml:"opaqueNetworkType,omitempty"`
}

type VirtualEthernetCard struct {
	*VirtualDevice

	AddressType      string `xml:"addressType,omitempty"`
	MacAddress       string `xml:"macAddress,omitempty"`
	WakeOnLanEnabled bool   `xml:"wakeOnLanEnabled,omitempty"`
}

type VirtualEthernetCardNetworkBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualEthernetCardOpaqueNetworkBackingOption struct {
	*VirtualDeviceBackingOption
}

type VirtualEthernetCardLegacyNetworkBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualEthernetCardDVPortBackingOption struct {
	*VirtualDeviceBackingOption
}

type VirtualEthernetCardOption struct {
	*VirtualDeviceOption

	SupportedOUI              *ChoiceOption `xml:"supportedOUI,omitempty"`
	MacType                   *ChoiceOption `xml:"macType,omitempty"`
	WakeOnLanEnabled          *BoolOption   `xml:"wakeOnLanEnabled,omitempty"`
	VmDirectPathGen2Supported bool          `xml:"vmDirectPathGen2Supported,omitempty"`
}

type VirtualFloppyImageBackingInfo struct {
	*VirtualDeviceFileBackingInfo
}

type VirtualFloppyDeviceBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo
}

type VirtualFloppyRemoteDeviceBackingInfo struct {
	*VirtualDeviceRemoteDeviceBackingInfo
}

type VirtualFloppy struct {
	*VirtualDevice
}

type VirtualFloppyImageBackingOption struct {
	*VirtualDeviceFileBackingOption
}

type VirtualFloppyDeviceBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualFloppyRemoteDeviceBackingOption struct {
	*VirtualDeviceRemoteDeviceBackingOption
}

type VirtualFloppyOption struct {
	*VirtualDeviceOption
}

type VirtualHdAudioCard struct {
	*VirtualSoundCard
}

type VirtualHdAudioCardOption struct {
	*VirtualSoundCardOption
}

type VirtualIDEController struct {
	*VirtualController
}

type VirtualIDEControllerOption struct {
	*VirtualControllerOption

	NumIDEDisks  *IntOption `xml:"numIDEDisks,omitempty"`
	NumIDECdroms *IntOption `xml:"numIDECdroms,omitempty"`
}

type VirtualKeyboard struct {
	*VirtualDevice
}

type VirtualKeyboardOption struct {
	*VirtualDeviceOption
}

type VirtualLsiLogicController struct {
	*VirtualSCSIController
}

type VirtualLsiLogicControllerOption struct {
	*VirtualSCSIControllerOption
}

type VirtualLsiLogicSASController struct {
	*VirtualSCSIController
}

type VirtualLsiLogicSASControllerOption struct {
	*VirtualSCSIControllerOption
}

type VirtualPCIController struct {
	*VirtualController
}

type VirtualPCIControllerOption struct {
	*VirtualControllerOption

	NumSCSIControllers            *IntOption `xml:"numSCSIControllers,omitempty"`
	NumEthernetCards              *IntOption `xml:"numEthernetCards,omitempty"`
	NumVideoCards                 *IntOption `xml:"numVideoCards,omitempty"`
	NumSoundCards                 *IntOption `xml:"numSoundCards,omitempty"`
	NumVmiRoms                    *IntOption `xml:"numVmiRoms,omitempty"`
	NumVmciDevices                *IntOption `xml:"numVmciDevices,omitempty"`
	NumPCIPassthroughDevices      *IntOption `xml:"numPCIPassthroughDevices,omitempty"`
	NumSasSCSIControllers         *IntOption `xml:"numSasSCSIControllers,omitempty"`
	NumVmxnet3EthernetCards       *IntOption `xml:"numVmxnet3EthernetCards,omitempty"`
	NumParaVirtualSCSIControllers *IntOption `xml:"numParaVirtualSCSIControllers,omitempty"`
	NumSATAControllers            *IntOption `xml:"numSATAControllers,omitempty"`
}

type VirtualPCIPassthroughDeviceBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo

	Id       string `xml:"id,omitempty"`
	DeviceId string `xml:"deviceId,omitempty"`
	SystemId string `xml:"systemId,omitempty"`
	VendorId int16  `xml:"vendorId,omitempty"`
}

type VirtualPCIPassthrough struct {
	*VirtualDevice
}

type VirtualPCIPassthroughDeviceBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualPCIPassthroughOption struct {
	*VirtualDeviceOption
}

type VirtualPCNet32 struct {
	*VirtualEthernetCard
}

type VirtualPCNet32Option struct {
	*VirtualEthernetCardOption

	SupportsMorphing bool `xml:"supportsMorphing,omitempty"`
}

type VirtualPS2Controller struct {
	*VirtualController
}

type VirtualPS2ControllerOption struct {
	*VirtualControllerOption

	NumKeyboards       *IntOption `xml:"numKeyboards,omitempty"`
	NumPointingDevices *IntOption `xml:"numPointingDevices,omitempty"`
}

type VirtualParallelPortFileBackingInfo struct {
	*VirtualDeviceFileBackingInfo
}

type VirtualParallelPortDeviceBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo
}

type VirtualParallelPort struct {
	*VirtualDevice
}

type VirtualParallelPortFileBackingOption struct {
	*VirtualDeviceFileBackingOption
}

type VirtualParallelPortDeviceBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualParallelPortOption struct {
	*VirtualDeviceOption
}

type VirtualPointingDeviceDeviceBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo

	HostPointingDevice string `xml:"hostPointingDevice,omitempty"`
}

type VirtualPointingDevice struct {
	*VirtualDevice
}

type VirtualPointingDeviceBackingOption struct {
	*VirtualDeviceDeviceBackingOption

	HostPointingDevice *ChoiceOption `xml:"hostPointingDevice,omitempty"`
}

type VirtualPointingDeviceOption struct {
	*VirtualDeviceOption
}

type VirtualSATAController struct {
	*VirtualController
}

type VirtualSATAControllerOption struct {
	*VirtualControllerOption

	NumSATADisks  *IntOption `xml:"numSATADisks,omitempty"`
	NumSATACdroms *IntOption `xml:"numSATACdroms,omitempty"`
}

type ArrayOfVirtualSCSISharing struct {
	VirtualSCSISharing []*VirtualSCSISharing `xml:"VirtualSCSISharing,omitempty"`
}

type VirtualSCSIController struct {
	*VirtualController

	HotAddRemove       bool                `xml:"hotAddRemove,omitempty"`
	SharedBus          *VirtualSCSISharing `xml:"sharedBus,omitempty"`
	ScsiCtlrUnitNumber int32               `xml:"scsiCtlrUnitNumber,omitempty"`
}

type VirtualSCSIControllerOption struct {
	*VirtualControllerOption

	NumSCSIDisks       *IntOption            `xml:"numSCSIDisks,omitempty"`
	NumSCSICdroms      *IntOption            `xml:"numSCSICdroms,omitempty"`
	NumSCSIPassthrough *IntOption            `xml:"numSCSIPassthrough,omitempty"`
	Sharing            []*VirtualSCSISharing `xml:"sharing,omitempty"`
	DefaultSharedIndex int32                 `xml:"defaultSharedIndex,omitempty"`
	HotAddRemove       *BoolOption           `xml:"hotAddRemove,omitempty"`
	ScsiCtlrUnitNumber int32                 `xml:"scsiCtlrUnitNumber,omitempty"`
}

type VirtualSCSIPassthroughDeviceBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo
}

type VirtualSCSIPassthrough struct {
	*VirtualDevice
}

type VirtualSCSIPassthroughDeviceBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualSCSIPassthroughOption struct {
	*VirtualDeviceOption
}

type VirtualSIOController struct {
	*VirtualController
}

type VirtualSIOControllerOption struct {
	*VirtualControllerOption

	NumFloppyDrives  *IntOption `xml:"numFloppyDrives,omitempty"`
	NumSerialPorts   *IntOption `xml:"numSerialPorts,omitempty"`
	NumParallelPorts *IntOption `xml:"numParallelPorts,omitempty"`
}

type VirtualSerialPortFileBackingInfo struct {
	*VirtualDeviceFileBackingInfo
}

type VirtualSerialPortDeviceBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo
}

type VirtualSerialPortPipeBackingInfo struct {
	*VirtualDevicePipeBackingInfo

	Endpoint string `xml:"endpoint,omitempty"`
	NoRxLoss bool   `xml:"noRxLoss,omitempty"`
}

type VirtualSerialPortURIBackingInfo struct {
	*VirtualDeviceURIBackingInfo
}

type VirtualSerialPortThinPrintBackingInfo struct {
	*VirtualDeviceBackingInfo
}

type VirtualSerialPort struct {
	*VirtualDevice

	YieldOnPoll bool `xml:"yieldOnPoll,omitempty"`
}

type VirtualSerialPortFileBackingOption struct {
	*VirtualDeviceFileBackingOption
}

type VirtualSerialPortDeviceBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualSerialPortPipeBackingOption struct {
	*VirtualDevicePipeBackingOption

	Endpoint *ChoiceOption `xml:"endpoint,omitempty"`
	NoRxLoss *BoolOption   `xml:"noRxLoss,omitempty"`
}

type VirtualSerialPortURIBackingOption struct {
	*VirtualDeviceURIBackingOption
}

type VirtualSerialPortThinPrintBackingOption struct {
	*VirtualDeviceBackingOption
}

type VirtualSerialPortOption struct {
	*VirtualDeviceOption

	YieldOnPoll *BoolOption `xml:"yieldOnPoll,omitempty"`
}

type VirtualSoundBlaster16 struct {
	*VirtualSoundCard
}

type VirtualSoundBlaster16Option struct {
	*VirtualSoundCardOption
}

type VirtualSoundCardDeviceBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo
}

type VirtualSoundCard struct {
	*VirtualDevice
}

type VirtualSoundCardDeviceBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualSoundCardOption struct {
	*VirtualDeviceOption
}

type VirtualSriovEthernetCardSriovBackingInfo struct {
	*VirtualDeviceBackingInfo

	PhysicalFunctionBacking *VirtualPCIPassthroughDeviceBackingInfo `xml:"physicalFunctionBacking,omitempty"`
	VirtualFunctionBacking  *VirtualPCIPassthroughDeviceBackingInfo `xml:"virtualFunctionBacking,omitempty"`
	VirtualFunctionIndex    int32                                   `xml:"virtualFunctionIndex,omitempty"`
}

type VirtualSriovEthernetCard struct {
	*VirtualEthernetCard

	AllowGuestOSMtuChange bool                                      `xml:"allowGuestOSMtuChange,omitempty"`
	SriovBacking          *VirtualSriovEthernetCardSriovBackingInfo `xml:"sriovBacking,omitempty"`
}

type VirtualSriovEthernetCardSriovBackingOption struct {
	*VirtualDeviceBackingOption
}

type VirtualSriovEthernetCardOption struct {
	*VirtualEthernetCardOption
}

type VirtualUSBUSBBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo
}

type VirtualUSBRemoteHostBackingInfo struct {
	*VirtualDeviceDeviceBackingInfo

	Hostname string `xml:"hostname,omitempty"`
}

type VirtualUSBRemoteClientBackingInfo struct {
	*VirtualDeviceRemoteDeviceBackingInfo

	Hostname string `xml:"hostname,omitempty"`
}

type VirtualUSB struct {
	*VirtualDevice

	Connected bool     `xml:"connected,omitempty"`
	Vendor    int32    `xml:"vendor,omitempty"`
	Product   int32    `xml:"product,omitempty"`
	Family    []string `xml:"family,omitempty"`
	Speed     []string `xml:"speed,omitempty"`
}

type VirtualUSBControllerPciBusSlotInfo struct {
	*VirtualDevicePciBusSlotInfo

	EhciPciSlotNumber int32 `xml:"ehciPciSlotNumber,omitempty"`
}

type VirtualUSBController struct {
	*VirtualController

	AutoConnectDevices bool `xml:"autoConnectDevices,omitempty"`
	EhciEnabled        bool `xml:"ehciEnabled,omitempty"`
}

type VirtualUSBControllerOption struct {
	*VirtualControllerOption

	AutoConnectDevices *BoolOption `xml:"autoConnectDevices,omitempty"`
	EhciSupported      *BoolOption `xml:"ehciSupported,omitempty"`
	SupportedSpeeds    []string    `xml:"supportedSpeeds,omitempty"`
}

type VirtualUSBUSBBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualUSBRemoteHostBackingOption struct {
	*VirtualDeviceDeviceBackingOption
}

type VirtualUSBRemoteClientBackingOption struct {
	*VirtualDeviceRemoteDeviceBackingOption
}

type VirtualUSBOption struct {
	*VirtualDeviceOption
}

type VirtualUSBXHCIController struct {
	*VirtualController

	AutoConnectDevices bool `xml:"autoConnectDevices,omitempty"`
}

type VirtualUSBXHCIControllerOption struct {
	*VirtualControllerOption

	AutoConnectDevices *BoolOption `xml:"autoConnectDevices,omitempty"`
	SupportedSpeeds    []string    `xml:"supportedSpeeds,omitempty"`
}

type VirtualMachineVMCIDevice struct {
	*VirtualDevice

	Id                             int64 `xml:"id,omitempty"`
	AllowUnrestrictedCommunication bool  `xml:"allowUnrestrictedCommunication,omitempty"`
}

type VirtualMachineVMCIDeviceOption struct {
	*VirtualDeviceOption

	AllowUnrestrictedCommunication *BoolOption `xml:"allowUnrestrictedCommunication,omitempty"`
}

type VirtualMachineVMIROM struct {
	*VirtualDevice
}

type VirtualVMIROMOption struct {
	*VirtualDeviceOption
}

type VirtualMachineVideoCard struct {
	*VirtualDevice

	VideoRamSizeInKB int64  `xml:"videoRamSizeInKB,omitempty"`
	NumDisplays      int32  `xml:"numDisplays,omitempty"`
	UseAutoDetect    bool   `xml:"useAutoDetect,omitempty"`
	Enable3DSupport  bool   `xml:"enable3DSupport,omitempty"`
	Use3dRenderer    string `xml:"use3dRenderer,omitempty"`
}

type VirtualVideoCardOption struct {
	*VirtualDeviceOption

	VideoRamSizeInKB       *LongOption `xml:"videoRamSizeInKB,omitempty"`
	NumDisplays            *IntOption  `xml:"numDisplays,omitempty"`
	UseAutoDetect          *BoolOption `xml:"useAutoDetect,omitempty"`
	Support3D              *BoolOption `xml:"support3D,omitempty"`
	Use3dRendererSupported *BoolOption `xml:"use3dRendererSupported,omitempty"`
}

type VirtualVmxnet struct {
	*VirtualEthernetCard
}

type VirtualVmxnet2 struct {
	*VirtualVmxnet
}

type VirtualVmxnet2Option struct {
	*VirtualVmxnetOption
}

type VirtualVmxnet3 struct {
	*VirtualVmxnet
}

type VirtualVmxnet3Option struct {
	*VirtualVmxnetOption
}

type VirtualVmxnetOption struct {
	*VirtualEthernetCardOption
}

type GuestFileAttributes struct {
	*DynamicData

	ModificationTime time.Time `xml:"modificationTime,omitempty"`
	AccessTime       time.Time `xml:"accessTime,omitempty"`
	SymlinkTarget    string    `xml:"symlinkTarget,omitempty"`
}

type GuestPosixFileAttributes struct {
	*GuestFileAttributes

	OwnerId     int32 `xml:"ownerId,omitempty"`
	GroupId     int32 `xml:"groupId,omitempty"`
	Permissions int64 `xml:"permissions,omitempty"`
}

type GuestWindowsFileAttributes struct {
	*GuestFileAttributes

	Hidden     bool      `xml:"hidden,omitempty"`
	ReadOnly   bool      `xml:"readOnly,omitempty"`
	CreateTime time.Time `xml:"createTime,omitempty"`
}

type GuestFileInfo struct {
	*DynamicData

	Path       string               `xml:"path,omitempty"`
	Type_      string               `xml:"type,omitempty"`
	Size       int64                `xml:"size,omitempty"`
	Attributes *GuestFileAttributes `xml:"attributes,omitempty"`
}

type ArrayOfGuestFileInfo struct {
	GuestFileInfo []*GuestFileInfo `xml:"GuestFileInfo,omitempty"`
}

type GuestListFileInfo struct {
	*DynamicData

	Files     []*GuestFileInfo `xml:"files,omitempty"`
	Remaining int32            `xml:"remaining,omitempty"`
}

type FileTransferInformation struct {
	*DynamicData

	Attributes *GuestFileAttributes `xml:"attributes,omitempty"`
	Size       int64                `xml:"size,omitempty"`
	Url        string               `xml:"url,omitempty"`
}

type GuestAuthentication struct {
	*DynamicData

	InteractiveSession bool `xml:"interactiveSession,omitempty"`
}

type NamePasswordAuthentication struct {
	*GuestAuthentication

	Username string `xml:"username,omitempty"`
	Password string `xml:"password,omitempty"`
}

type GuestProgramSpec struct {
	*DynamicData

	ProgramPath      string   `xml:"programPath,omitempty"`
	Arguments        string   `xml:"arguments,omitempty"`
	WorkingDirectory string   `xml:"workingDirectory,omitempty"`
	EnvVariables     []string `xml:"envVariables,omitempty"`
}

type GuestWindowsProgramSpec struct {
	*GuestProgramSpec

	StartMinimized bool `xml:"startMinimized,omitempty"`
}

type GuestProcessInfo struct {
	*DynamicData

	Name      string    `xml:"name,omitempty"`
	Pid       int64     `xml:"pid,omitempty"`
	Owner     string    `xml:"owner,omitempty"`
	CmdLine   string    `xml:"cmdLine,omitempty"`
	StartTime time.Time `xml:"startTime,omitempty"`
	EndTime   time.Time `xml:"endTime,omitempty"`
	ExitCode  int32     `xml:"exitCode,omitempty"`
}

type ArrayOfGuestProcessInfo struct {
	GuestProcessInfo []*GuestProcessInfo `xml:"GuestProcessInfo,omitempty"`
}

type SSPIAuthentication struct {
	*GuestAuthentication

	SspiToken string `xml:"sspiToken,omitempty"`
}

type TicketedSessionAuthentication struct {
	*GuestAuthentication

	Ticket string `xml:"ticket,omitempty"`
}

type VsanClusterConfigInfoHostDefaultInfo struct {
	*DynamicData

	Uuid             string `xml:"uuid,omitempty"`
	AutoClaimStorage bool   `xml:"autoClaimStorage,omitempty"`
}

type VsanClusterConfigInfo struct {
	*DynamicData

	Enabled       bool                                  `xml:"enabled,omitempty"`
	DefaultConfig *VsanClusterConfigInfoHostDefaultInfo `xml:"defaultConfig,omitempty"`
}

type VsanHostClusterStatusStateCompletionEstimate struct {
	*DynamicData

	CompleteTime    time.Time `xml:"completeTime,omitempty"`
	PercentComplete int32     `xml:"percentComplete,omitempty"`
}

type VsanHostClusterStatusState struct {
	*DynamicData

	State      string                                        `xml:"state,omitempty"`
	Completion *VsanHostClusterStatusStateCompletionEstimate `xml:"completion,omitempty"`
}

type VsanHostClusterStatus struct {
	*DynamicData

	Uuid       string                      `xml:"uuid,omitempty"`
	NodeUuid   string                      `xml:"nodeUuid,omitempty"`
	Health     string                      `xml:"health,omitempty"`
	NodeState  *VsanHostClusterStatusState `xml:"nodeState,omitempty"`
	MemberUuid []string                    `xml:"memberUuid,omitempty"`
}

type VsanHostConfigInfoStorageInfo struct {
	*DynamicData

	AutoClaimStorage bool                   `xml:"autoClaimStorage,omitempty"`
	DiskMapping      []*VsanHostDiskMapping `xml:"diskMapping,omitempty"`
}

type VsanHostConfigInfoClusterInfo struct {
	*DynamicData

	Uuid     string `xml:"uuid,omitempty"`
	NodeUuid string `xml:"nodeUuid,omitempty"`
}

type VsanHostConfigInfoNetworkInfoPortConfig struct {
	*DynamicData

	IpConfig *VsanHostIpConfig `xml:"ipConfig,omitempty"`
	Device   string            `xml:"device,omitempty"`
}

type ArrayOfVsanHostConfigInfoNetworkInfoPortConfig struct {
	VsanHostConfigInfoNetworkInfoPortConfig []*VsanHostConfigInfoNetworkInfoPortConfig `xml:"VsanHostConfigInfoNetworkInfoPortConfig,omitempty"`
}

type VsanHostConfigInfoNetworkInfo struct {
	*DynamicData

	Port []*VsanHostConfigInfoNetworkInfoPortConfig `xml:"port,omitempty"`
}

type VsanHostConfigInfo struct {
	*DynamicData

	Enabled     bool                           `xml:"enabled,omitempty"`
	HostSystem  *ManagedObjectReference        `xml:"hostSystem,omitempty"`
	ClusterInfo *VsanHostConfigInfoClusterInfo `xml:"clusterInfo,omitempty"`
	StorageInfo *VsanHostConfigInfoStorageInfo `xml:"storageInfo,omitempty"`
	NetworkInfo *VsanHostConfigInfoNetworkInfo `xml:"networkInfo,omitempty"`
}

type ArrayOfVsanHostConfigInfo struct {
	VsanHostConfigInfo []*VsanHostConfigInfo `xml:"VsanHostConfigInfo,omitempty"`
}

type VsanHostDecommissionMode struct {
	*DynamicData

	ObjectAction string `xml:"objectAction,omitempty"`
}

type VsanHostDiskMapResult struct {
	*DynamicData

	Mapping    *VsanHostDiskMapping  `xml:"mapping,omitempty"`
	DiskResult []*VsanHostDiskResult `xml:"diskResult,omitempty"`
	Error      *LocalizedMethodFault `xml:"error,omitempty"`
}

type ArrayOfVsanHostDiskMapResult struct {
	VsanHostDiskMapResult []*VsanHostDiskMapResult `xml:"VsanHostDiskMapResult,omitempty"`
}

type VsanHostDiskMapping struct {
	*DynamicData

	Ssd    *HostScsiDisk   `xml:"ssd,omitempty"`
	NonSsd []*HostScsiDisk `xml:"nonSsd,omitempty"`
}

type ArrayOfVsanHostDiskMapping struct {
	VsanHostDiskMapping []*VsanHostDiskMapping `xml:"VsanHostDiskMapping,omitempty"`
}

type VsanHostDiskResult struct {
	*DynamicData

	Disk     *HostScsiDisk         `xml:"disk,omitempty"`
	State    string                `xml:"state,omitempty"`
	VsanUuid string                `xml:"vsanUuid,omitempty"`
	Error    *LocalizedMethodFault `xml:"error,omitempty"`
}

type ArrayOfVsanHostDiskResult struct {
	VsanHostDiskResult []*VsanHostDiskResult `xml:"VsanHostDiskResult,omitempty"`
}

type VsanHostIpConfig struct {
	*DynamicData

	UpstreamIpAddress   string `xml:"upstreamIpAddress,omitempty"`
	DownstreamIpAddress string `xml:"downstreamIpAddress,omitempty"`
}

type VsanHostMembershipInfo struct {
	*DynamicData

	NodeUuid string `xml:"nodeUuid,omitempty"`
	Hostname string `xml:"hostname,omitempty"`
}

type ArrayOfVsanHostMembershipInfo struct {
	VsanHostMembershipInfo []*VsanHostMembershipInfo `xml:"VsanHostMembershipInfo,omitempty"`
}

type VsanHostRuntimeInfoDiskIssue struct {
	*DynamicData

	DiskId string `xml:"diskId,omitempty"`
	Issue  string `xml:"issue,omitempty"`
}

type ArrayOfVsanHostRuntimeInfoDiskIssue struct {
	VsanHostRuntimeInfoDiskIssue []*VsanHostRuntimeInfoDiskIssue `xml:"VsanHostRuntimeInfoDiskIssue,omitempty"`
}

type VsanHostRuntimeInfo struct {
	*DynamicData

	MembershipList []*VsanHostMembershipInfo       `xml:"membershipList,omitempty"`
	DiskIssues     []*VsanHostRuntimeInfoDiskIssue `xml:"diskIssues,omitempty"`
	AccessGenNo    int32                           `xml:"accessGenNo,omitempty"`
}

type AddAuthorizationRoleRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Name    string                  `xml:"name,omitempty"`
	PrivIds []string                `xml:"privIds,omitempty"`
}

type RemoveAuthorizationRoleRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	RoleId     int32                   `xml:"roleId,omitempty"`
	FailIfUsed bool                    `xml:"failIfUsed,omitempty"`
}

type UpdateAuthorizationRoleRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	RoleId  int32                   `xml:"roleId,omitempty"`
	NewName string                  `xml:"newName,omitempty"`
	PrivIds []string                `xml:"privIds,omitempty"`
}

type MergePermissionsRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	SrcRoleId int32                   `xml:"srcRoleId,omitempty"`
	DstRoleId int32                   `xml:"dstRoleId,omitempty"`
}

type RetrieveRolePermissionsRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	RoleId int32                   `xml:"roleId,omitempty"`
}

type RetrieveEntityPermissionsRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Entity    *ManagedObjectReference `xml:"entity,omitempty"`
	Inherited bool                    `xml:"inherited,omitempty"`
}

type RetrieveAllPermissionsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type SetEntityPermissionsRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Entity     *ManagedObjectReference `xml:"entity,omitempty"`
	Permission []*Permission           `xml:"permission,omitempty"`
}

type ResetEntityPermissionsRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Entity     *ManagedObjectReference `xml:"entity,omitempty"`
	Permission []*Permission           `xml:"permission,omitempty"`
}

type RemoveEntityPermissionRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Entity  *ManagedObjectReference `xml:"entity,omitempty"`
	User    string                  `xml:"user,omitempty"`
	IsGroup bool                    `xml:"isGroup,omitempty"`
}

type HasPrivilegeOnEntityRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Entity    *ManagedObjectReference `xml:"entity,omitempty"`
	SessionId string                  `xml:"sessionId,omitempty"`
	PrivId    []string                `xml:"privId,omitempty"`
}

type HasPrivilegeOnEntitiesRequestType struct {
	_this     *ManagedObjectReference   `xml:"_this,omitempty"`
	Entity    []*ManagedObjectReference `xml:"entity,omitempty"`
	SessionId string                    `xml:"sessionId,omitempty"`
	PrivId    []string                  `xml:"privId,omitempty"`
}

type ReconfigureClusterRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Spec   *ClusterConfigSpec      `xml:"spec,omitempty"`
	Modify bool                    `xml:"modify,omitempty"`
}

type ApplyRecommendationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   string                  `xml:"key,omitempty"`
}

type CancelRecommendationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   string                  `xml:"key,omitempty"`
}

type RecommendHostsForVmRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Pool  *ManagedObjectReference `xml:"pool,omitempty"`
}

type AddHostRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	Spec         *HostConnectSpec        `xml:"spec,omitempty"`
	AsConnected  bool                    `xml:"asConnected,omitempty"`
	ResourcePool *ManagedObjectReference `xml:"resourcePool,omitempty"`
	License      string                  `xml:"license,omitempty"`
}

type MoveIntoRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	Host  []*ManagedObjectReference `xml:"host,omitempty"`
}

type MoveHostIntoRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	Host         *ManagedObjectReference `xml:"host,omitempty"`
	ResourcePool *ManagedObjectReference `xml:"resourcePool,omitempty"`
}

type RefreshRecommendationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type RetrieveDasAdvancedRuntimeInfoRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ClusterEnterMaintenanceModeRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Host   []*ManagedObjectReference `xml:"host,omitempty"`
	Option []*OptionValue            `xml:"option,omitempty"`
}

type ReconfigureComputeResourceRequestType struct {
	_this  *ManagedObjectReference    `xml:"_this,omitempty"`
	Spec   *ComputeResourceConfigSpec `xml:"spec,omitempty"`
	Modify bool                       `xml:"modify,omitempty"`
}

type AddCustomFieldDefRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	Name           string                  `xml:"name,omitempty"`
	MoType         string                  `xml:"moType,omitempty"`
	FieldDefPolicy *PrivilegePolicyDef     `xml:"fieldDefPolicy,omitempty"`
	FieldPolicy    *PrivilegePolicyDef     `xml:"fieldPolicy,omitempty"`
}

type RemoveCustomFieldDefRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   int32                   `xml:"key,omitempty"`
}

type RenameCustomFieldDefRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   int32                   `xml:"key,omitempty"`
	Name  string                  `xml:"name,omitempty"`
}

type SetFieldRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
	Key    int32                   `xml:"key,omitempty"`
	Value  string                  `xml:"value,omitempty"`
}

type DoesCustomizationSpecExistRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
}

type GetCustomizationSpecRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
}

type CreateCustomizationSpecRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Item  *CustomizationSpecItem  `xml:"item,omitempty"`
}

type OverwriteCustomizationSpecRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Item  *CustomizationSpecItem  `xml:"item,omitempty"`
}

type DeleteCustomizationSpecRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
}

type DuplicateCustomizationSpecRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Name    string                  `xml:"name,omitempty"`
	NewName string                  `xml:"newName,omitempty"`
}

type RenameCustomizationSpecRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Name    string                  `xml:"name,omitempty"`
	NewName string                  `xml:"newName,omitempty"`
}

type CustomizationSpecItemToXmlRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Item  *CustomizationSpecItem  `xml:"item,omitempty"`
}

type XmlToCustomizationSpecItemRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	SpecItemXml string                  `xml:"specItemXml,omitempty"`
}

type CheckCustomizationResourcesRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	GuestOs string                  `xml:"guestOs,omitempty"`
}

type QueryConnectionInfoRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	Hostname      string                  `xml:"hostname,omitempty"`
	Port          int32                   `xml:"port,omitempty"`
	Username      string                  `xml:"username,omitempty"`
	Password      string                  `xml:"password,omitempty"`
	SslThumbprint string                  `xml:"sslThumbprint,omitempty"`
}

type PowerOnMultiVMRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Vm     []*ManagedObjectReference `xml:"vm,omitempty"`
	Option []*OptionValue            `xml:"option,omitempty"`
}

type queryDatacenterConfigOptionDescriptorRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ReconfigureDatacenterRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Spec   *DatacenterConfigSpec   `xml:"spec,omitempty"`
	Modify bool                    `xml:"modify,omitempty"`
}

type RefreshDatastoreRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type RefreshDatastoreStorageInfoRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateVirtualMachineFilesRequestType struct {
	_this                     *ManagedObjectReference            `xml:"_this,omitempty"`
	MountPathDatastoreMapping []*DatastoreMountPathDatastorePair `xml:"mountPathDatastoreMapping,omitempty"`
}

type RenameDatastoreRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	NewName string                  `xml:"newName,omitempty"`
}

type DestroyDatastoreRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type DatastoreEnterMaintenanceModeRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type DatastoreExitMaintenanceModeRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateDirectoryRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	Datastore   *ManagedObjectReference `xml:"datastore,omitempty"`
	DisplayName string                  `xml:"displayName,omitempty"`
	Policy      string                  `xml:"policy,omitempty"`
}

type DeleteDirectoryRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	Datacenter    *ManagedObjectReference `xml:"datacenter,omitempty"`
	DatastorePath string                  `xml:"datastorePath,omitempty"`
}

type QueryDescriptionsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type BrowseDiagnosticLogRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
	Key   string                  `xml:"key,omitempty"`
	Start int32                   `xml:"start,omitempty"`
	Lines int32                   `xml:"lines,omitempty"`
}

type GenerateLogBundlesRequestType struct {
	_this          *ManagedObjectReference   `xml:"_this,omitempty"`
	IncludeDefault bool                      `xml:"includeDefault,omitempty"`
	Host           []*ManagedObjectReference `xml:"host,omitempty"`
}

type FetchDVPortKeysRequestType struct {
	_this    *ManagedObjectReference               `xml:"_this,omitempty"`
	Criteria *DistributedVirtualSwitchPortCriteria `xml:"criteria,omitempty"`
}

type FetchDVPortsRequestType struct {
	_this    *ManagedObjectReference               `xml:"_this,omitempty"`
	Criteria *DistributedVirtualSwitchPortCriteria `xml:"criteria,omitempty"`
}

type QueryUsedVlanIdInDvsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ReconfigureDvsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *DVSConfigSpec          `xml:"spec,omitempty"`
}

type PerformDvsProductSpecOperationRequestType struct {
	_this       *ManagedObjectReference              `xml:"_this,omitempty"`
	Operation   string                               `xml:"operation,omitempty"`
	ProductSpec *DistributedVirtualSwitchProductSpec `xml:"productSpec,omitempty"`
}

type MergeDvsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Dvs   *ManagedObjectReference `xml:"dvs,omitempty"`
}

type AddDVPortgroupRequestType struct {
	_this *ManagedObjectReference  `xml:"_this,omitempty"`
	Spec  []*DVPortgroupConfigSpec `xml:"spec,omitempty"`
}

type MoveDVPortRequestType struct {
	_this                   *ManagedObjectReference `xml:"_this,omitempty"`
	PortKey                 []string                `xml:"portKey,omitempty"`
	DestinationPortgroupKey string                  `xml:"destinationPortgroupKey,omitempty"`
}

type UpdateDvsCapabilityRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Capability *DVSCapability          `xml:"capability,omitempty"`
}

type ReconfigureDVPortRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Port  []*DVPortConfigSpec     `xml:"port,omitempty"`
}

type RefreshDVPortStateRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	PortKeys []string                `xml:"portKeys,omitempty"`
}

type RectifyDvsHostRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	Hosts []*ManagedObjectReference `xml:"hosts,omitempty"`
}

type UpdateNetworkResourcePoolRequestType struct {
	_this      *ManagedObjectReference             `xml:"_this,omitempty"`
	ConfigSpec []*DVSNetworkResourcePoolConfigSpec `xml:"configSpec,omitempty"`
}

type AddNetworkResourcePoolRequestType struct {
	_this      *ManagedObjectReference             `xml:"_this,omitempty"`
	ConfigSpec []*DVSNetworkResourcePoolConfigSpec `xml:"configSpec,omitempty"`
}

type RemoveNetworkResourcePoolRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   []string                `xml:"key,omitempty"`
}

type EnableNetworkResourceManagementRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Enable bool                    `xml:"enable,omitempty"`
}

type DVSRollbackRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	EntityBackup *EntityBackupConfig     `xml:"entityBackup,omitempty"`
}

type CreateDVPortgroupRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *DVPortgroupConfigSpec  `xml:"spec,omitempty"`
}

type UpdateDVSHealthCheckConfigRequestType struct {
	_this             *ManagedObjectReference `xml:"_this,omitempty"`
	HealthCheckConfig []*DVSHealthCheckConfig `xml:"healthCheckConfig,omitempty"`
}

type LookupDvPortGroupRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	PortgroupKey string                  `xml:"portgroupKey,omitempty"`
}

type QueryConfigOptionDescriptorRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryConfigOptionRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   string                  `xml:"key,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type QueryConfigTargetRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type QueryTargetCapabilitiesRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type setCustomValueRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   string                  `xml:"key,omitempty"`
	Value string                  `xml:"value,omitempty"`
}

type UnregisterExtensionRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	ExtensionKey string                  `xml:"extensionKey,omitempty"`
}

type FindExtensionRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	ExtensionKey string                  `xml:"extensionKey,omitempty"`
}

type RegisterExtensionRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Extension *Extension              `xml:"extension,omitempty"`
}

type UpdateExtensionRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Extension *Extension              `xml:"extension,omitempty"`
}

type GetPublicKeyRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type SetPublicKeyRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	ExtensionKey string                  `xml:"extensionKey,omitempty"`
	PublicKey    string                  `xml:"publicKey,omitempty"`
}

type SetExtensionCertificateRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	ExtensionKey   string                  `xml:"extensionKey,omitempty"`
	CertificatePem string                  `xml:"certificatePem,omitempty"`
}

type QueryManagedByRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	ExtensionKey string                  `xml:"extensionKey,omitempty"`
}

type QueryExtensionIpAllocationUsageRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	ExtensionKeys []string                `xml:"extensionKeys,omitempty"`
}

type MoveDatastoreFileRequestType struct {
	_this                 *ManagedObjectReference `xml:"_this,omitempty"`
	SourceName            string                  `xml:"sourceName,omitempty"`
	SourceDatacenter      *ManagedObjectReference `xml:"sourceDatacenter,omitempty"`
	DestinationName       string                  `xml:"destinationName,omitempty"`
	DestinationDatacenter *ManagedObjectReference `xml:"destinationDatacenter,omitempty"`
	Force                 bool                    `xml:"force,omitempty"`
}

type CopyDatastoreFileRequestType struct {
	_this                 *ManagedObjectReference `xml:"_this,omitempty"`
	SourceName            string                  `xml:"sourceName,omitempty"`
	SourceDatacenter      *ManagedObjectReference `xml:"sourceDatacenter,omitempty"`
	DestinationName       string                  `xml:"destinationName,omitempty"`
	DestinationDatacenter *ManagedObjectReference `xml:"destinationDatacenter,omitempty"`
	Force                 bool                    `xml:"force,omitempty"`
}

type DeleteDatastoreFileRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
}

type MakeDirectoryRequestType struct {
	_this                   *ManagedObjectReference `xml:"_this,omitempty"`
	Name                    string                  `xml:"name,omitempty"`
	Datacenter              *ManagedObjectReference `xml:"datacenter,omitempty"`
	CreateParentDirectories bool                    `xml:"createParentDirectories,omitempty"`
}

type ChangeOwnerRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
	Owner      string                  `xml:"owner,omitempty"`
}

type CreateFolderRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
}

type MoveIntoFolderRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	List  []*ManagedObjectReference `xml:"list,omitempty"`
}

type CreateVMRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Config *VirtualMachineConfigSpec `xml:"config,omitempty"`
	Pool   *ManagedObjectReference   `xml:"pool,omitempty"`
	Host   *ManagedObjectReference   `xml:"host,omitempty"`
}

type RegisterVMRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Path       string                  `xml:"path,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	AsTemplate bool                    `xml:"asTemplate,omitempty"`
	Pool       *ManagedObjectReference `xml:"pool,omitempty"`
	Host       *ManagedObjectReference `xml:"host,omitempty"`
}

type CreateClusterRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
	Spec  *ClusterConfigSpec      `xml:"spec,omitempty"`
}

type CreateClusterExRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
	Spec  *ClusterConfigSpecEx    `xml:"spec,omitempty"`
}

type AddStandaloneHostRequestType struct {
	_this        *ManagedObjectReference    `xml:"_this,omitempty"`
	Spec         *HostConnectSpec           `xml:"spec,omitempty"`
	CompResSpec  *ComputeResourceConfigSpec `xml:"compResSpec,omitempty"`
	AddConnected bool                       `xml:"addConnected,omitempty"`
	License      string                     `xml:"license,omitempty"`
}

type CreateDatacenterRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
}

type UnregisterAndDestroyRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateDVSRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *DVSCreateSpec          `xml:"spec,omitempty"`
}

type CreateStoragePodRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
}

type SetCollectorPageSizeRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	MaxCount int32                   `xml:"maxCount,omitempty"`
}

type RewindCollectorRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ResetCollectorRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type DestroyCollectorRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryTpmAttestationReportRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryHostConnectionInfoRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateSystemResourcesRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	ResourceInfo *HostSystemResourceInfo `xml:"resourceInfo,omitempty"`
}

type UpdateSystemSwapConfigurationRequestType struct {
	_this         *ManagedObjectReference      `xml:"_this,omitempty"`
	SysSwapConfig *HostSystemSwapConfiguration `xml:"sysSwapConfig,omitempty"`
}

type ReconnectHostRequestType struct {
	_this         *ManagedObjectReference  `xml:"_this,omitempty"`
	CnxSpec       *HostConnectSpec         `xml:"cnxSpec,omitempty"`
	ReconnectSpec *HostSystemReconnectSpec `xml:"reconnectSpec,omitempty"`
}

type DisconnectHostRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type EnterMaintenanceModeRequestType struct {
	_this                 *ManagedObjectReference `xml:"_this,omitempty"`
	Timeout               int32                   `xml:"timeout,omitempty"`
	EvacuatePoweredOffVms bool                    `xml:"evacuatePoweredOffVms,omitempty"`
	MaintenanceSpec       *HostMaintenanceSpec    `xml:"maintenanceSpec,omitempty"`
}

type ExitMaintenanceModeRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Timeout int32                   `xml:"timeout,omitempty"`
}

type RebootHostRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Force bool                    `xml:"force,omitempty"`
}

type ShutdownHostRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Force bool                    `xml:"force,omitempty"`
}

type PowerDownHostToStandByRequestType struct {
	_this                 *ManagedObjectReference `xml:"_this,omitempty"`
	TimeoutSec            int32                   `xml:"timeoutSec,omitempty"`
	EvacuatePoweredOffVms bool                    `xml:"evacuatePoweredOffVms,omitempty"`
}

type PowerUpHostFromStandByRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	TimeoutSec int32                   `xml:"timeoutSec,omitempty"`
}

type QueryMemoryOverheadRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	MemorySize   int64                   `xml:"memorySize,omitempty"`
	VideoRamSize int32                   `xml:"videoRamSize,omitempty"`
	NumVcpus     int32                   `xml:"numVcpus,omitempty"`
}

type QueryMemoryOverheadExRequestType struct {
	_this        *ManagedObjectReference   `xml:"_this,omitempty"`
	VmConfigInfo *VirtualMachineConfigInfo `xml:"vmConfigInfo,omitempty"`
}

type ReconfigureHostForDASRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateFlagsRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	FlagInfo *HostFlagInfo           `xml:"flagInfo,omitempty"`
}

type EnterLockdownModeRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ExitLockdownModeRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type AcquireCimServicesTicketRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateIpmiRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	IpmiInfo *HostIpmiInfo           `xml:"ipmiInfo,omitempty"`
}

type RetrieveHardwareUptimeRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type HttpNfcLeaseGetManifestRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type HttpNfcLeaseCompleteRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type HttpNfcLeaseAbortRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Fault *LocalizedMethodFault   `xml:"fault,omitempty"`
}

type HttpNfcLeaseProgressRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Percent int32                   `xml:"percent,omitempty"`
}

type QueryIpPoolsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Dc    *ManagedObjectReference `xml:"dc,omitempty"`
}

type CreateIpPoolRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Dc    *ManagedObjectReference `xml:"dc,omitempty"`
	Pool  *IpPool                 `xml:"pool,omitempty"`
}

type UpdateIpPoolRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Dc    *ManagedObjectReference `xml:"dc,omitempty"`
	Pool  *IpPool                 `xml:"pool,omitempty"`
}

type DestroyIpPoolRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Dc    *ManagedObjectReference `xml:"dc,omitempty"`
	Id    int32                   `xml:"id,omitempty"`
	Force bool                    `xml:"force,omitempty"`
}

type AllocateIpv4AddressRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	Dc           *ManagedObjectReference `xml:"dc,omitempty"`
	PoolId       int32                   `xml:"poolId,omitempty"`
	AllocationId string                  `xml:"allocationId,omitempty"`
}

type AllocateIpv6AddressRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	Dc           *ManagedObjectReference `xml:"dc,omitempty"`
	PoolId       int32                   `xml:"poolId,omitempty"`
	AllocationId string                  `xml:"allocationId,omitempty"`
}

type ReleaseIpAllocationRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	Dc           *ManagedObjectReference `xml:"dc,omitempty"`
	PoolId       int32                   `xml:"poolId,omitempty"`
	AllocationId string                  `xml:"allocationId,omitempty"`
}

type QueryIPAllocationsRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	Dc           *ManagedObjectReference `xml:"dc,omitempty"`
	PoolId       int32                   `xml:"poolId,omitempty"`
	ExtensionKey string                  `xml:"extensionKey,omitempty"`
}

type UpdateAssignedLicenseRequestType struct {
	_this             *ManagedObjectReference `xml:"_this,omitempty"`
	Entity            string                  `xml:"entity,omitempty"`
	LicenseKey        string                  `xml:"licenseKey,omitempty"`
	EntityDisplayName string                  `xml:"entityDisplayName,omitempty"`
}

type RemoveAssignedLicenseRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	EntityId string                  `xml:"entityId,omitempty"`
}

type QueryAssignedLicensesRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	EntityId string                  `xml:"entityId,omitempty"`
}

type QuerySupportedFeaturesRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type QueryLicenseSourceAvailabilityRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type QueryLicenseUsageRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type SetLicenseEditionRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Host       *ManagedObjectReference `xml:"host,omitempty"`
	FeatureKey string                  `xml:"featureKey,omitempty"`
}

type CheckLicenseFeatureRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Host       *ManagedObjectReference `xml:"host,omitempty"`
	FeatureKey string                  `xml:"featureKey,omitempty"`
}

type EnableFeatureRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Host       *ManagedObjectReference `xml:"host,omitempty"`
	FeatureKey string                  `xml:"featureKey,omitempty"`
}

type DisableFeatureRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Host       *ManagedObjectReference `xml:"host,omitempty"`
	FeatureKey string                  `xml:"featureKey,omitempty"`
}

type ConfigureLicenseSourceRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	Host          *ManagedObjectReference `xml:"host,omitempty"`
	LicenseSource *LicenseSource          `xml:"licenseSource,omitempty"`
}

type UpdateLicenseRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	LicenseKey string                  `xml:"licenseKey,omitempty"`
	Labels     []*KeyValue             `xml:"labels,omitempty"`
}

type AddLicenseRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	LicenseKey string                  `xml:"licenseKey,omitempty"`
	Labels     []*KeyValue             `xml:"labels,omitempty"`
}

type RemoveLicenseRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	LicenseKey string                  `xml:"licenseKey,omitempty"`
}

type DecodeLicenseRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	LicenseKey string                  `xml:"licenseKey,omitempty"`
}

type UpdateLicenseLabelRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	LicenseKey string                  `xml:"licenseKey,omitempty"`
	LabelKey   string                  `xml:"labelKey,omitempty"`
	LabelValue string                  `xml:"labelValue,omitempty"`
}

type RemoveLicenseLabelRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	LicenseKey string                  `xml:"licenseKey,omitempty"`
	LabelKey   string                  `xml:"labelKey,omitempty"`
}

type ReloadRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type RenameRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	NewName string                  `xml:"newName,omitempty"`
}

type DestroyRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type DestroyNetworkRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ValidateHostRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	OvfDescriptor string                  `xml:"ovfDescriptor,omitempty"`
	Host          *ManagedObjectReference `xml:"host,omitempty"`
	Vhp           *OvfValidateHostParams  `xml:"vhp,omitempty"`
}

type ParseDescriptorRequestType struct {
	_this         *ManagedObjectReference   `xml:"_this,omitempty"`
	OvfDescriptor string                    `xml:"ovfDescriptor,omitempty"`
	Pdp           *OvfParseDescriptorParams `xml:"pdp,omitempty"`
}

type CreateImportSpecRequestType struct {
	_this         *ManagedObjectReference    `xml:"_this,omitempty"`
	OvfDescriptor string                     `xml:"ovfDescriptor,omitempty"`
	ResourcePool  *ManagedObjectReference    `xml:"resourcePool,omitempty"`
	Datastore     *ManagedObjectReference    `xml:"datastore,omitempty"`
	Cisp          *OvfCreateImportSpecParams `xml:"cisp,omitempty"`
}

type CreateDescriptorRequestType struct {
	_this *ManagedObjectReference    `xml:"_this,omitempty"`
	Obj   *ManagedObjectReference    `xml:"obj,omitempty"`
	Cdp   *OvfCreateDescriptorParams `xml:"cdp,omitempty"`
}

type QueryPerfProviderSummaryRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
}

type QueryAvailablePerfMetricRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Entity     *ManagedObjectReference `xml:"entity,omitempty"`
	BeginTime  time.Time               `xml:"beginTime,omitempty"`
	EndTime    time.Time               `xml:"endTime,omitempty"`
	IntervalId int32                   `xml:"intervalId,omitempty"`
}

type QueryPerfCounterRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	CounterId []int32                 `xml:"counterId,omitempty"`
}

type QueryPerfCounterByLevelRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Level int32                   `xml:"level,omitempty"`
}

type QueryPerfRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	QuerySpec []*PerfQuerySpec        `xml:"querySpec,omitempty"`
}

type QueryPerfCompositeRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	QuerySpec *PerfQuerySpec          `xml:"querySpec,omitempty"`
}

type CreatePerfIntervalRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	IntervalId *PerfInterval           `xml:"intervalId,omitempty"`
}

type RemovePerfIntervalRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	SamplePeriod int32                   `xml:"samplePeriod,omitempty"`
}

type UpdatePerfIntervalRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	Interval *PerfInterval           `xml:"interval,omitempty"`
}

type UpdateCounterLevelMappingRequestType struct {
	_this           *ManagedObjectReference                  `xml:"_this,omitempty"`
	CounterLevelMap []*PerformanceManagerCounterLevelMapping `xml:"counterLevelMap,omitempty"`
}

type ResetCounterLevelMappingRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	Counters []int32                 `xml:"counters,omitempty"`
}

type EstimateDatabaseSizeRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	DbSizeParam *DatabaseSizeParam      `xml:"dbSizeParam,omitempty"`
}

type UpdateConfigRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Name   string                  `xml:"name,omitempty"`
	Config *ResourceConfigSpec     `xml:"config,omitempty"`
}

type MoveIntoResourcePoolRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	List  []*ManagedObjectReference `xml:"list,omitempty"`
}

type UpdateChildResourceConfigurationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  []*ResourceConfigSpec   `xml:"spec,omitempty"`
}

type CreateResourcePoolRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
	Spec  *ResourceConfigSpec     `xml:"spec,omitempty"`
}

type DestroyChildrenRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateVAppRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	ResSpec    *ResourceConfigSpec     `xml:"resSpec,omitempty"`
	ConfigSpec *VAppConfigSpec         `xml:"configSpec,omitempty"`
	VmFolder   *ManagedObjectReference `xml:"vmFolder,omitempty"`
}

type CreateChildVMRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Config *VirtualMachineConfigSpec `xml:"config,omitempty"`
	Host   *ManagedObjectReference   `xml:"host,omitempty"`
}

type RegisterChildVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Path  string                  `xml:"path,omitempty"`
	Name  string                  `xml:"name,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type ImportVAppRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Spec   *ImportSpec             `xml:"spec,omitempty"`
	Folder *ManagedObjectReference `xml:"folder,omitempty"`
	Host   *ManagedObjectReference `xml:"host,omitempty"`
}

type QueryResourceConfigOptionRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type RefreshRuntimeRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type FindByUuidRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	Datacenter   *ManagedObjectReference `xml:"datacenter,omitempty"`
	Uuid         string                  `xml:"uuid,omitempty"`
	VmSearch     bool                    `xml:"vmSearch,omitempty"`
	InstanceUuid bool                    `xml:"instanceUuid,omitempty"`
}

type FindByDatastorePathRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
	Path       string                  `xml:"path,omitempty"`
}

type FindByDnsNameRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
	DnsName    string                  `xml:"dnsName,omitempty"`
	VmSearch   bool                    `xml:"vmSearch,omitempty"`
}

type FindByIpRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
	Ip         string                  `xml:"ip,omitempty"`
	VmSearch   bool                    `xml:"vmSearch,omitempty"`
}

type FindByInventoryPathRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	InventoryPath string                  `xml:"inventoryPath,omitempty"`
}

type FindChildRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
	Name   string                  `xml:"name,omitempty"`
}

type FindAllByUuidRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	Datacenter   *ManagedObjectReference `xml:"datacenter,omitempty"`
	Uuid         string                  `xml:"uuid,omitempty"`
	VmSearch     bool                    `xml:"vmSearch,omitempty"`
	InstanceUuid bool                    `xml:"instanceUuid,omitempty"`
}

type FindAllByDnsNameRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
	DnsName    string                  `xml:"dnsName,omitempty"`
	VmSearch   bool                    `xml:"vmSearch,omitempty"`
}

type FindAllByIpRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
	Ip         string                  `xml:"ip,omitempty"`
	VmSearch   bool                    `xml:"vmSearch,omitempty"`
}

type CurrentTimeRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type RetrieveServiceContentRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ValidateMigrationRequestType struct {
	_this    *ManagedObjectReference   `xml:"_this,omitempty"`
	Vm       []*ManagedObjectReference `xml:"vm,omitempty"`
	State    *VirtualMachinePowerState `xml:"state,omitempty"`
	TestType []string                  `xml:"testType,omitempty"`
	Pool     *ManagedObjectReference   `xml:"pool,omitempty"`
	Host     *ManagedObjectReference   `xml:"host,omitempty"`
}

type QueryVMotionCompatibilityRequestType struct {
	_this         *ManagedObjectReference   `xml:"_this,omitempty"`
	Vm            *ManagedObjectReference   `xml:"vm,omitempty"`
	Host          []*ManagedObjectReference `xml:"host,omitempty"`
	Compatibility []string                  `xml:"compatibility,omitempty"`
}

type RetrieveProductComponentsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryServiceListRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	ServiceName string                  `xml:"serviceName,omitempty"`
	Location    []string                `xml:"location,omitempty"`
}

type UpdateServiceMessageRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Message string                  `xml:"message,omitempty"`
}

type LoginByTokenRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Locale string                  `xml:"locale,omitempty"`
}

type LoginRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	UserName string                  `xml:"userName,omitempty"`
	Password string                  `xml:"password,omitempty"`
	Locale   string                  `xml:"locale,omitempty"`
}

type LoginBySSPIRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	Base64Token string                  `xml:"base64Token,omitempty"`
	Locale      string                  `xml:"locale,omitempty"`
}

type LogoutRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type AcquireLocalTicketRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	UserName string                  `xml:"userName,omitempty"`
}

type AcquireGenericServiceTicketRequestType struct {
	_this *ManagedObjectReference           `xml:"_this,omitempty"`
	Spec  *SessionManagerServiceRequestSpec `xml:"spec,omitempty"`
}

type TerminateSessionRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	SessionId []string                `xml:"sessionId,omitempty"`
}

type SetLocaleRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Locale string                  `xml:"locale,omitempty"`
}

type LoginExtensionBySubjectNameRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	ExtensionKey string                  `xml:"extensionKey,omitempty"`
	Locale       string                  `xml:"locale,omitempty"`
}

type LoginExtensionByCertificateRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	ExtensionKey string                  `xml:"extensionKey,omitempty"`
	Locale       string                  `xml:"locale,omitempty"`
}

type ImpersonateUserRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	UserName string                  `xml:"userName,omitempty"`
	Locale   string                  `xml:"locale,omitempty"`
}

type SessionIsActiveRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	SessionID string                  `xml:"sessionID,omitempty"`
	UserName  string                  `xml:"userName,omitempty"`
}

type AcquireCloneTicketRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CloneSessionRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	CloneTicket string                  `xml:"cloneTicket,omitempty"`
}

type ExecuteSimpleCommandRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Arguments []string                `xml:"arguments,omitempty"`
}

type ConfigureDatastoreIORMRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
	Spec      *StorageIORMConfigSpec  `xml:"spec,omitempty"`
}

type QueryIORMConfigOptionRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type QueryDatastorePerformanceSummaryRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
}

type ApplyStorageDrsRecommendationToPodRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Pod   *ManagedObjectReference `xml:"pod,omitempty"`
	Key   string                  `xml:"key,omitempty"`
}

type ApplyStorageDrsRecommendationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   []string                `xml:"key,omitempty"`
}

type CancelStorageDrsRecommendationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   []string                `xml:"key,omitempty"`
}

type RefreshStorageDrsRecommendationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Pod   *ManagedObjectReference `xml:"pod,omitempty"`
}

type ConfigureStorageDrsForPodRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Pod    *ManagedObjectReference `xml:"pod,omitempty"`
	Spec   *StorageDrsConfigSpec   `xml:"spec,omitempty"`
	Modify bool                    `xml:"modify,omitempty"`
}

type RecommendDatastoresRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	StorageSpec *StoragePlacementSpec   `xml:"storageSpec,omitempty"`
}

type CancelTaskRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateProgressRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	PercentDone int32                   `xml:"percentDone,omitempty"`
}

type SetTaskStateRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	State  *TaskInfoState          `xml:"state,omitempty"`
	Result interface{}             `xml:"result,omitempty"`
	Fault  *LocalizedMethodFault   `xml:"fault,omitempty"`
}

type SetTaskDescriptionRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	Description *LocalizableMessage     `xml:"description,omitempty"`
}

type ReadNextTasksRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	MaxCount int32                   `xml:"maxCount,omitempty"`
}

type ReadPreviousTasksRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	MaxCount int32                   `xml:"maxCount,omitempty"`
}

type CreateCollectorForTasksRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Filter *TaskFilterSpec         `xml:"filter,omitempty"`
}

type CreateTaskRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	Obj           *ManagedObjectReference `xml:"obj,omitempty"`
	TaskTypeId    string                  `xml:"taskTypeId,omitempty"`
	InitiatedBy   string                  `xml:"initiatedBy,omitempty"`
	Cancelable    bool                    `xml:"cancelable,omitempty"`
	ParentTaskKey string                  `xml:"parentTaskKey,omitempty"`
}

type RetrieveUserGroupsRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	Domain         string                  `xml:"domain,omitempty"`
	SearchStr      string                  `xml:"searchStr,omitempty"`
	BelongsToGroup string                  `xml:"belongsToGroup,omitempty"`
	BelongsToUser  string                  `xml:"belongsToUser,omitempty"`
	ExactMatch     bool                    `xml:"exactMatch,omitempty"`
	FindUsers      bool                    `xml:"findUsers,omitempty"`
	FindGroups     bool                    `xml:"findGroups,omitempty"`
}

type UpdateVAppConfigRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *VAppConfigSpec         `xml:"spec,omitempty"`
}

type UpdateLinkedChildrenRequestType struct {
	_this        *ManagedObjectReference   `xml:"_this,omitempty"`
	AddChangeSet []*VirtualAppLinkInfo     `xml:"addChangeSet,omitempty"`
	RemoveSet    []*ManagedObjectReference `xml:"removeSet,omitempty"`
}

type CloneVAppRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Name   string                  `xml:"name,omitempty"`
	Target *ManagedObjectReference `xml:"target,omitempty"`
	Spec   *VAppCloneSpec          `xml:"spec,omitempty"`
}

type ExportVAppRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type PowerOnVAppRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type PowerOffVAppRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Force bool                    `xml:"force,omitempty"`
}

type SuspendVAppRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type unregisterVAppRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateVirtualDiskRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
	Spec       *VirtualDiskSpec        `xml:"spec,omitempty"`
}

type DeleteVirtualDiskRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
}

type MoveVirtualDiskRequestType struct {
	_this            *ManagedObjectReference      `xml:"_this,omitempty"`
	SourceName       string                       `xml:"sourceName,omitempty"`
	SourceDatacenter *ManagedObjectReference      `xml:"sourceDatacenter,omitempty"`
	DestName         string                       `xml:"destName,omitempty"`
	DestDatacenter   *ManagedObjectReference      `xml:"destDatacenter,omitempty"`
	Force            bool                         `xml:"force,omitempty"`
	Profile          []*VirtualMachineProfileSpec `xml:"profile,omitempty"`
}

type CopyVirtualDiskRequestType struct {
	_this            *ManagedObjectReference `xml:"_this,omitempty"`
	SourceName       string                  `xml:"sourceName,omitempty"`
	SourceDatacenter *ManagedObjectReference `xml:"sourceDatacenter,omitempty"`
	DestName         string                  `xml:"destName,omitempty"`
	DestDatacenter   *ManagedObjectReference `xml:"destDatacenter,omitempty"`
	DestSpec         *VirtualDiskSpec        `xml:"destSpec,omitempty"`
	Force            bool                    `xml:"force,omitempty"`
}

type ExtendVirtualDiskRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	Name          string                  `xml:"name,omitempty"`
	Datacenter    *ManagedObjectReference `xml:"datacenter,omitempty"`
	NewCapacityKb int64                   `xml:"newCapacityKb,omitempty"`
	EagerZero     bool                    `xml:"eagerZero,omitempty"`
}

type QueryVirtualDiskFragmentationRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
}

type DefragmentVirtualDiskRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
}

type ShrinkVirtualDiskRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
	Copy       bool                    `xml:"copy,omitempty"`
}

type InflateVirtualDiskRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
}

type EagerZeroVirtualDiskRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
}

type ZeroFillVirtualDiskRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
}

type SetVirtualDiskUuidRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
	Uuid       string                  `xml:"uuid,omitempty"`
}

type QueryVirtualDiskUuidRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
}

type QueryVirtualDiskGeometryRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Name       string                  `xml:"name,omitempty"`
	Datacenter *ManagedObjectReference `xml:"datacenter,omitempty"`
}

type RefreshStorageInfoRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateSnapshotRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	Name        string                  `xml:"name,omitempty"`
	Description string                  `xml:"description,omitempty"`
	Memory      bool                    `xml:"memory,omitempty"`
	Quiesce     bool                    `xml:"quiesce,omitempty"`
}

type RevertToCurrentSnapshotRequestType struct {
	_this           *ManagedObjectReference `xml:"_this,omitempty"`
	Host            *ManagedObjectReference `xml:"host,omitempty"`
	SuppressPowerOn bool                    `xml:"suppressPowerOn,omitempty"`
}

type RemoveAllSnapshotsRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	Consolidate bool                    `xml:"consolidate,omitempty"`
}

type ConsolidateVMDisksRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type EstimateStorageForConsolidateSnapshotsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ReconfigVMRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	Spec  *VirtualMachineConfigSpec `xml:"spec,omitempty"`
}

type UpgradeVMRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Version string                  `xml:"version,omitempty"`
}

type ExtractOvfEnvironmentRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type PowerOnVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type PowerOffVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type SuspendVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ResetVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ShutdownGuestRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type RebootGuestRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type StandbyGuestRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type AnswerVMRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	QuestionId   string                  `xml:"questionId,omitempty"`
	AnswerChoice string                  `xml:"answerChoice,omitempty"`
}

type CustomizeVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *CustomizationSpec      `xml:"spec,omitempty"`
}

type CheckCustomizationSpecRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *CustomizationSpec      `xml:"spec,omitempty"`
}

type MigrateVMRequestType struct {
	_this    *ManagedObjectReference     `xml:"_this,omitempty"`
	Pool     *ManagedObjectReference     `xml:"pool,omitempty"`
	Host     *ManagedObjectReference     `xml:"host,omitempty"`
	Priority *VirtualMachineMovePriority `xml:"priority,omitempty"`
	State    *VirtualMachinePowerState   `xml:"state,omitempty"`
}

type RelocateVMRequestType struct {
	_this    *ManagedObjectReference     `xml:"_this,omitempty"`
	Spec     *VirtualMachineRelocateSpec `xml:"spec,omitempty"`
	Priority *VirtualMachineMovePriority `xml:"priority,omitempty"`
}

type CloneVMRequestType struct {
	_this  *ManagedObjectReference  `xml:"_this,omitempty"`
	Folder *ManagedObjectReference  `xml:"folder,omitempty"`
	Name   string                   `xml:"name,omitempty"`
	Spec   *VirtualMachineCloneSpec `xml:"spec,omitempty"`
}

type ExportVmRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type MarkAsTemplateRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type MarkAsVirtualMachineRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Pool  *ManagedObjectReference `xml:"pool,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type UnregisterVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ResetGuestInformationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type MountToolsInstallerRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UnmountToolsInstallerRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpgradeToolsRequestType struct {
	_this            *ManagedObjectReference `xml:"_this,omitempty"`
	InstallerOptions string                  `xml:"installerOptions,omitempty"`
}

type AcquireMksTicketRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type AcquireTicketRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	TicketType string                  `xml:"ticketType,omitempty"`
}

type SetScreenResolutionRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Width  int32                   `xml:"width,omitempty"`
	Height int32                   `xml:"height,omitempty"`
}

type DefragmentAllDisksRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateSecondaryVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type TurnOffFaultToleranceForVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type MakePrimaryVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
}

type TerminateFaultTolerantVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
}

type DisableSecondaryVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
}

type EnableSecondaryVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type SetDisplayTopologyRequestType struct {
	_this    *ManagedObjectReference          `xml:"_this,omitempty"`
	Displays []*VirtualMachineDisplayTopology `xml:"displays,omitempty"`
}

type StartRecordingRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	Name        string                  `xml:"name,omitempty"`
	Description string                  `xml:"description,omitempty"`
}

type StopRecordingRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type StartReplayingRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	ReplaySnapshot *ManagedObjectReference `xml:"replaySnapshot,omitempty"`
}

type StopReplayingRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type PromoteDisksRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Unlink bool                    `xml:"unlink,omitempty"`
	Disks  []*VirtualDisk          `xml:"disks,omitempty"`
}

type CreateScreenshotRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryChangedDiskAreasRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	Snapshot    *ManagedObjectReference `xml:"snapshot,omitempty"`
	DeviceKey   int32                   `xml:"deviceKey,omitempty"`
	StartOffset int64                   `xml:"startOffset,omitempty"`
	ChangeId    string                  `xml:"changeId,omitempty"`
}

type QueryUnownedFilesRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type reloadVirtualMachineFromPathRequestType struct {
	_this             *ManagedObjectReference `xml:"_this,omitempty"`
	ConfigurationPath string                  `xml:"configurationPath,omitempty"`
}

type QueryFaultToleranceCompatibilityRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type TerminateVMRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type RemoveAlarmRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ReconfigureAlarmRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *AlarmSpec              `xml:"spec,omitempty"`
}

type CreateAlarmRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
	Spec   *AlarmSpec              `xml:"spec,omitempty"`
}

type GetAlarmRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
}

type AreAlarmActionsEnabledRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
}

type EnableAlarmActionsRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Entity  *ManagedObjectReference `xml:"entity,omitempty"`
	Enabled bool                    `xml:"enabled,omitempty"`
}

type GetAlarmStateRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
}

type AcknowledgeAlarmRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Alarm  *ManagedObjectReference `xml:"alarm,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
}

type ReconfigureDVPortgroupRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *DVPortgroupConfigSpec  `xml:"spec,omitempty"`
}

type DVPortgroupRollbackRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	EntityBackup *EntityBackupConfig     `xml:"entityBackup,omitempty"`
}

type QueryAvailableDvsSpecRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryCompatibleHostForNewDvsRequestType struct {
	_this             *ManagedObjectReference              `xml:"_this,omitempty"`
	Container         *ManagedObjectReference              `xml:"container,omitempty"`
	Recursive         bool                                 `xml:"recursive,omitempty"`
	SwitchProductSpec *DistributedVirtualSwitchProductSpec `xml:"switchProductSpec,omitempty"`
}

type QueryCompatibleHostForExistingDvsRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Container *ManagedObjectReference `xml:"container,omitempty"`
	Recursive bool                    `xml:"recursive,omitempty"`
	Dvs       *ManagedObjectReference `xml:"dvs,omitempty"`
}

type QueryDvsCompatibleHostSpecRequestType struct {
	_this             *ManagedObjectReference              `xml:"_this,omitempty"`
	SwitchProductSpec *DistributedVirtualSwitchProductSpec `xml:"switchProductSpec,omitempty"`
}

type QueryDvsFeatureCapabilityRequestType struct {
	_this             *ManagedObjectReference              `xml:"_this,omitempty"`
	SwitchProductSpec *DistributedVirtualSwitchProductSpec `xml:"switchProductSpec,omitempty"`
}

type QueryDvsByUuidRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Uuid  string                  `xml:"uuid,omitempty"`
}

type QueryDvsConfigTargetRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
	Dvs   *ManagedObjectReference `xml:"dvs,omitempty"`
}

type QueryDvsCheckCompatibilityRequestType struct {
	_this          *ManagedObjectReference                             `xml:"_this,omitempty"`
	HostContainer  *DistributedVirtualSwitchManagerHostContainer       `xml:"hostContainer,omitempty"`
	DvsProductSpec *DistributedVirtualSwitchManagerDvsProductSpec      `xml:"dvsProductSpec,omitempty"`
	HostFilterSpec []*DistributedVirtualSwitchManagerHostDvsFilterSpec `xml:"hostFilterSpec,omitempty"`
}

type RectifyDvsOnHostRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	Hosts []*ManagedObjectReference `xml:"hosts,omitempty"`
}

type DVSManagerExportEntityRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	SelectionSet []*SelectionSet         `xml:"selectionSet,omitempty"`
}

type DVSManagerImportEntityRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	EntityBackup []*EntityBackupConfig   `xml:"entityBackup,omitempty"`
	ImportType   string                  `xml:"importType,omitempty"`
}

type DVSManagerLookupDvPortGroupRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	SwitchUuid   string                  `xml:"switchUuid,omitempty"`
	PortgroupKey string                  `xml:"portgroupKey,omitempty"`
}

type UpdateDVSLacpGroupConfigRequestType struct {
	_this         *ManagedObjectReference   `xml:"_this,omitempty"`
	LacpGroupSpec []*VMwareDvsLacpGroupSpec `xml:"lacpGroupSpec,omitempty"`
}

type ReadNextEventsRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	MaxCount int32                   `xml:"maxCount,omitempty"`
}

type ReadPreviousEventsRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	MaxCount int32                   `xml:"maxCount,omitempty"`
}

type RetrieveArgumentDescriptionRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	EventTypeId string                  `xml:"eventTypeId,omitempty"`
}

type CreateCollectorForEventsRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Filter *EventFilterSpec        `xml:"filter,omitempty"`
}

type LogUserEventRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
	Msg    string                  `xml:"msg,omitempty"`
}

type QueryEventsRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Filter *EventFilterSpec        `xml:"filter,omitempty"`
}

type PostEventRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	EventToPost *Event                  `xml:"eventToPost,omitempty"`
	TaskInfo    *TaskInfo               `xml:"taskInfo,omitempty"`
}

type JoinDomainRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	DomainName string                  `xml:"domainName,omitempty"`
	UserName   string                  `xml:"userName,omitempty"`
	Password   string                  `xml:"password,omitempty"`
}

type JoinDomainWithCAMRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	DomainName string                  `xml:"domainName,omitempty"`
	CamServer  string                  `xml:"camServer,omitempty"`
}

type ImportCertificateForCAMRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	CertPath  string                  `xml:"certPath,omitempty"`
	CamServer string                  `xml:"camServer,omitempty"`
}

type LeaveCurrentDomainRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Force bool                    `xml:"force,omitempty"`
}

type ReconfigureAutostartRequestType struct {
	_this *ManagedObjectReference     `xml:"_this,omitempty"`
	Spec  *HostAutoStartManagerConfig `xml:"spec,omitempty"`
}

type AutoStartPowerOnRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type AutoStartPowerOffRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryBootDevicesRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateBootDeviceRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   string                  `xml:"key,omitempty"`
}

type ConfigureHostCacheRequestType struct {
	_this *ManagedObjectReference     `xml:"_this,omitempty"`
	Spec  *HostCacheConfigurationSpec `xml:"spec,omitempty"`
}

type EnableHyperThreadingRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type DisableHyperThreadingRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type SearchDatastoreRequestType struct {
	_this         *ManagedObjectReference         `xml:"_this,omitempty"`
	DatastorePath string                          `xml:"datastorePath,omitempty"`
	SearchSpec    *HostDatastoreBrowserSearchSpec `xml:"searchSpec,omitempty"`
}

type SearchDatastoreSubFoldersRequestType struct {
	_this         *ManagedObjectReference         `xml:"_this,omitempty"`
	DatastorePath string                          `xml:"datastorePath,omitempty"`
	SearchSpec    *HostDatastoreBrowserSearchSpec `xml:"searchSpec,omitempty"`
}

type DeleteFileRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	DatastorePath string                  `xml:"datastorePath,omitempty"`
}

type UpdateLocalSwapDatastoreRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
}

type QueryAvailableDisksForVmfsRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
}

type QueryVmfsDatastoreCreateOptionsRequestType struct {
	_this            *ManagedObjectReference `xml:"_this,omitempty"`
	DevicePath       string                  `xml:"devicePath,omitempty"`
	VmfsMajorVersion int32                   `xml:"vmfsMajorVersion,omitempty"`
}

type CreateVmfsDatastoreRequestType struct {
	_this *ManagedObjectReference  `xml:"_this,omitempty"`
	Spec  *VmfsDatastoreCreateSpec `xml:"spec,omitempty"`
}

type QueryVmfsDatastoreExtendOptionsRequestType struct {
	_this                    *ManagedObjectReference `xml:"_this,omitempty"`
	Datastore                *ManagedObjectReference `xml:"datastore,omitempty"`
	DevicePath               string                  `xml:"devicePath,omitempty"`
	SuppressExpandCandidates bool                    `xml:"suppressExpandCandidates,omitempty"`
}

type QueryVmfsDatastoreExpandOptionsRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
}

type ExtendVmfsDatastoreRequestType struct {
	_this     *ManagedObjectReference  `xml:"_this,omitempty"`
	Datastore *ManagedObjectReference  `xml:"datastore,omitempty"`
	Spec      *VmfsDatastoreExtendSpec `xml:"spec,omitempty"`
}

type ExpandVmfsDatastoreRequestType struct {
	_this     *ManagedObjectReference  `xml:"_this,omitempty"`
	Datastore *ManagedObjectReference  `xml:"datastore,omitempty"`
	Spec      *VmfsDatastoreExpandSpec `xml:"spec,omitempty"`
}

type CreateNasDatastoreRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *HostNasVolumeSpec      `xml:"spec,omitempty"`
}

type CreateLocalDatastoreRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
	Path  string                  `xml:"path,omitempty"`
}

type RemoveDatastoreRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Datastore *ManagedObjectReference `xml:"datastore,omitempty"`
}

type ConfigureDatastorePrincipalRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	UserName string                  `xml:"userName,omitempty"`
	Password string                  `xml:"password,omitempty"`
}

type QueryUnresolvedVmfsVolumesRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ResignatureUnresolvedVmfsVolumeRequestType struct {
	_this          *ManagedObjectReference            `xml:"_this,omitempty"`
	ResolutionSpec *HostUnresolvedVmfsResignatureSpec `xml:"resolutionSpec,omitempty"`
}

type UpdateDateTimeConfigRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Config *HostDateTimeConfig     `xml:"config,omitempty"`
}

type QueryAvailableTimeZonesRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryDateTimeRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateDateTimeRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	DateTime time.Time               `xml:"dateTime,omitempty"`
}

type RefreshDateTimeSystemRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryAvailablePartitionRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type SelectActivePartitionRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Partition *HostScsiDiskPartition  `xml:"partition,omitempty"`
}

type QueryPartitionCreateOptionsRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	StorageType    string                  `xml:"storageType,omitempty"`
	DiagnosticType string                  `xml:"diagnosticType,omitempty"`
}

type QueryPartitionCreateDescRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	DiskUuid       string                  `xml:"diskUuid,omitempty"`
	DiagnosticType string                  `xml:"diagnosticType,omitempty"`
}

type CreateDiagnosticPartitionRequestType struct {
	_this *ManagedObjectReference            `xml:"_this,omitempty"`
	Spec  *HostDiagnosticPartitionCreateSpec `xml:"spec,omitempty"`
}

type EsxAgentHostManagerUpdateConfigRequestType struct {
	_this      *ManagedObjectReference            `xml:"_this,omitempty"`
	ConfigInfo *HostEsxAgentHostManagerConfigInfo `xml:"configInfo,omitempty"`
}

type UpdateDefaultPolicyRequestType struct {
	_this         *ManagedObjectReference    `xml:"_this,omitempty"`
	DefaultPolicy *HostFirewallDefaultPolicy `xml:"defaultPolicy,omitempty"`
}

type EnableRulesetRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Id    string                  `xml:"id,omitempty"`
}

type DisableRulesetRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Id    string                  `xml:"id,omitempty"`
}

type UpdateRulesetRequestType struct {
	_this *ManagedObjectReference         `xml:"_this,omitempty"`
	Id    string                          `xml:"id,omitempty"`
	Spec  *HostFirewallRulesetRulesetSpec `xml:"spec,omitempty"`
}

type RefreshFirewallRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ResetFirmwareToFactoryDefaultsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type BackupFirmwareConfigurationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryFirmwareConfigUploadURLRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type RestoreFirmwareConfigurationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Force bool                    `xml:"force,omitempty"`
}

type RefreshGraphicsManagerRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type IsSharedGraphicsActiveRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type RefreshHealthStatusSystemRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ResetSystemHealthInfoRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type HostImageConfigGetAcceptanceRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type HostImageConfigGetProfileRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateHostImageAcceptanceLevelRequestType struct {
	_this              *ManagedObjectReference `xml:"_this,omitempty"`
	NewAcceptanceLevel string                  `xml:"newAcceptanceLevel,omitempty"`
}

type QueryVnicStatusRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	VnicDevice string                  `xml:"vnicDevice,omitempty"`
}

type QueryPnicStatusRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	PnicDevice string                  `xml:"pnicDevice,omitempty"`
}

type QueryBoundVnicsRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	IScsiHbaName string                  `xml:"iScsiHbaName,omitempty"`
}

type QueryCandidateNicsRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	IScsiHbaName string                  `xml:"iScsiHbaName,omitempty"`
}

type BindVnicRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	IScsiHbaName string                  `xml:"iScsiHbaName,omitempty"`
	VnicDevice   string                  `xml:"vnicDevice,omitempty"`
}

type UnbindVnicRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	IScsiHbaName string                  `xml:"iScsiHbaName,omitempty"`
	VnicDevice   string                  `xml:"vnicDevice,omitempty"`
	Force        bool                    `xml:"force,omitempty"`
}

type QueryMigrationDependenciesRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	PnicDevice []string                `xml:"pnicDevice,omitempty"`
}

type QueryModulesRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateModuleOptionStringRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Name    string                  `xml:"name,omitempty"`
	Options string                  `xml:"options,omitempty"`
}

type QueryConfiguredModuleOptionStringRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
}

type CreateUserRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	User  *HostAccountSpec        `xml:"user,omitempty"`
}

type UpdateUserRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	User  *HostAccountSpec        `xml:"user,omitempty"`
}

type CreateGroupRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Group *HostAccountSpec        `xml:"group,omitempty"`
}

type RemoveUserRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	UserName string                  `xml:"userName,omitempty"`
}

type RemoveGroupRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	GroupName string                  `xml:"groupName,omitempty"`
}

type AssignUserToGroupRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	User  string                  `xml:"user,omitempty"`
	Group string                  `xml:"group,omitempty"`
}

type UnassignUserFromGroupRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	User  string                  `xml:"user,omitempty"`
	Group string                  `xml:"group,omitempty"`
}

type ReconfigureServiceConsoleReservationRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	CfgBytes int64                   `xml:"cfgBytes,omitempty"`
}

type ReconfigureVirtualMachineReservationRequestType struct {
	_this *ManagedObjectReference              `xml:"_this,omitempty"`
	Spec  *VirtualMachineMemoryReservationSpec `xml:"spec,omitempty"`
}

type UpdateNetworkConfigRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Config     *HostNetworkConfig      `xml:"config,omitempty"`
	ChangeMode string                  `xml:"changeMode,omitempty"`
}

type UpdateDnsConfigRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Config *HostDnsConfig          `xml:"config,omitempty"`
}

type UpdateIpRouteConfigRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Config *HostIpRouteConfig      `xml:"config,omitempty"`
}

type UpdateConsoleIpRouteConfigRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Config *HostIpRouteConfig      `xml:"config,omitempty"`
}

type UpdateIpRouteTableConfigRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Config *HostIpRouteTableConfig `xml:"config,omitempty"`
}

type AddVirtualSwitchRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	VswitchName string                  `xml:"vswitchName,omitempty"`
	Spec        *HostVirtualSwitchSpec  `xml:"spec,omitempty"`
}

type RemoveVirtualSwitchRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	VswitchName string                  `xml:"vswitchName,omitempty"`
}

type UpdateVirtualSwitchRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	VswitchName string                  `xml:"vswitchName,omitempty"`
	Spec        *HostVirtualSwitchSpec  `xml:"spec,omitempty"`
}

type AddPortGroupRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Portgrp *HostPortGroupSpec      `xml:"portgrp,omitempty"`
}

type RemovePortGroupRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	PgName string                  `xml:"pgName,omitempty"`
}

type UpdatePortGroupRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	PgName  string                  `xml:"pgName,omitempty"`
	Portgrp *HostPortGroupSpec      `xml:"portgrp,omitempty"`
}

type UpdatePhysicalNicLinkSpeedRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Device    string                  `xml:"device,omitempty"`
	LinkSpeed *PhysicalNicLinkInfo    `xml:"linkSpeed,omitempty"`
}

type QueryNetworkHintRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Device []string                `xml:"device,omitempty"`
}

type AddVirtualNicRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Portgroup string                  `xml:"portgroup,omitempty"`
	Nic       *HostVirtualNicSpec     `xml:"nic,omitempty"`
}

type RemoveVirtualNicRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Device string                  `xml:"device,omitempty"`
}

type UpdateVirtualNicRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Device string                  `xml:"device,omitempty"`
	Nic    *HostVirtualNicSpec     `xml:"nic,omitempty"`
}

type AddServiceConsoleVirtualNicRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Portgroup string                  `xml:"portgroup,omitempty"`
	Nic       *HostVirtualNicSpec     `xml:"nic,omitempty"`
}

type RemoveServiceConsoleVirtualNicRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Device string                  `xml:"device,omitempty"`
}

type UpdateServiceConsoleVirtualNicRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Device string                  `xml:"device,omitempty"`
	Nic    *HostVirtualNicSpec     `xml:"nic,omitempty"`
}

type RestartServiceConsoleVirtualNicRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Device string                  `xml:"device,omitempty"`
}

type RefreshNetworkSystemRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CheckHostPatchRequestType struct {
	_this      *ManagedObjectReference                    `xml:"_this,omitempty"`
	MetaUrls   []string                                   `xml:"metaUrls,omitempty"`
	BundleUrls []string                                   `xml:"bundleUrls,omitempty"`
	Spec       *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
}

type ScanHostPatchRequestType struct {
	_this      *ManagedObjectReference  `xml:"_this,omitempty"`
	Repository *HostPatchManagerLocator `xml:"repository,omitempty"`
	UpdateID   []string                 `xml:"updateID,omitempty"`
}

type ScanHostPatchV2RequestType struct {
	_this      *ManagedObjectReference                    `xml:"_this,omitempty"`
	MetaUrls   []string                                   `xml:"metaUrls,omitempty"`
	BundleUrls []string                                   `xml:"bundleUrls,omitempty"`
	Spec       *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
}

type StageHostPatchRequestType struct {
	_this      *ManagedObjectReference                    `xml:"_this,omitempty"`
	MetaUrls   []string                                   `xml:"metaUrls,omitempty"`
	BundleUrls []string                                   `xml:"bundleUrls,omitempty"`
	VibUrls    []string                                   `xml:"vibUrls,omitempty"`
	Spec       *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
}

type InstallHostPatchRequestType struct {
	_this      *ManagedObjectReference  `xml:"_this,omitempty"`
	Repository *HostPatchManagerLocator `xml:"repository,omitempty"`
	UpdateID   string                   `xml:"updateID,omitempty"`
	Force      bool                     `xml:"force,omitempty"`
}

type InstallHostPatchV2RequestType struct {
	_this      *ManagedObjectReference                    `xml:"_this,omitempty"`
	MetaUrls   []string                                   `xml:"metaUrls,omitempty"`
	BundleUrls []string                                   `xml:"bundleUrls,omitempty"`
	VibUrls    []string                                   `xml:"vibUrls,omitempty"`
	Spec       *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
}

type UninstallHostPatchRequestType struct {
	_this       *ManagedObjectReference                    `xml:"_this,omitempty"`
	BulletinIds []string                                   `xml:"bulletinIds,omitempty"`
	Spec        *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
}

type QueryHostPatchRequestType struct {
	_this *ManagedObjectReference                    `xml:"_this,omitempty"`
	Spec  *HostPatchManagerPatchManagerOperationSpec `xml:"spec,omitempty"`
}

type RefreshRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdatePassthruConfigRequestType struct {
	_this  *ManagedObjectReference  `xml:"_this,omitempty"`
	Config []*HostPciPassthruConfig `xml:"config,omitempty"`
}

type ConfigurePowerPolicyRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Key   int32                   `xml:"key,omitempty"`
}

type UpdateServicePolicyRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Id     string                  `xml:"id,omitempty"`
	Policy string                  `xml:"policy,omitempty"`
}

type StartServiceRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Id    string                  `xml:"id,omitempty"`
}

type StopServiceRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Id    string                  `xml:"id,omitempty"`
}

type RestartServiceRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Id    string                  `xml:"id,omitempty"`
}

type UninstallServiceRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Id    string                  `xml:"id,omitempty"`
}

type RefreshServicesRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ReconfigureSnmpAgentRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *HostSnmpConfigSpec     `xml:"spec,omitempty"`
}

type SendTestNotificationRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type RetrieveDiskPartitionInfoRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	DevicePath []string                `xml:"devicePath,omitempty"`
}

type ComputeDiskPartitionInfoRequestType struct {
	_this           *ManagedObjectReference  `xml:"_this,omitempty"`
	DevicePath      string                   `xml:"devicePath,omitempty"`
	Layout          *HostDiskPartitionLayout `xml:"layout,omitempty"`
	PartitionFormat string                   `xml:"partitionFormat,omitempty"`
}

type ComputeDiskPartitionInfoForResizeRequestType struct {
	_this           *ManagedObjectReference      `xml:"_this,omitempty"`
	Partition       *HostScsiDiskPartition       `xml:"partition,omitempty"`
	BlockRange      *HostDiskPartitionBlockRange `xml:"blockRange,omitempty"`
	PartitionFormat string                       `xml:"partitionFormat,omitempty"`
}

type UpdateDiskPartitionsRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	DevicePath string                  `xml:"devicePath,omitempty"`
	Spec       *HostDiskPartitionSpec  `xml:"spec,omitempty"`
}

type FormatVmfsRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	CreateSpec *HostVmfsSpec           `xml:"createSpec,omitempty"`
}

type MountVmfsVolumeRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VmfsUuid string                  `xml:"vmfsUuid,omitempty"`
}

type UnmountVmfsVolumeRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VmfsUuid string                  `xml:"vmfsUuid,omitempty"`
}

type DeleteVmfsVolumeStateRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VmfsUuid string                  `xml:"vmfsUuid,omitempty"`
}

type RescanVmfsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type AttachVmfsExtentRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VmfsPath string                  `xml:"vmfsPath,omitempty"`
	Extent   *HostScsiDiskPartition  `xml:"extent,omitempty"`
}

type ExpandVmfsExtentRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VmfsPath string                  `xml:"vmfsPath,omitempty"`
	Extent   *HostScsiDiskPartition  `xml:"extent,omitempty"`
}

type UpgradeVmfsRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VmfsPath string                  `xml:"vmfsPath,omitempty"`
}

type UpgradeVmLayoutRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryUnresolvedVmfsVolumeRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ResolveMultipleUnresolvedVmfsVolumesRequestType struct {
	_this          *ManagedObjectReference             `xml:"_this,omitempty"`
	ResolutionSpec []*HostUnresolvedVmfsResolutionSpec `xml:"resolutionSpec,omitempty"`
}

type ResolveMultipleUnresolvedVmfsVolumesExRequestType struct {
	_this          *ManagedObjectReference             `xml:"_this,omitempty"`
	ResolutionSpec []*HostUnresolvedVmfsResolutionSpec `xml:"resolutionSpec,omitempty"`
}

type UnmountForceMountedVmfsVolumeRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VmfsUuid string                  `xml:"vmfsUuid,omitempty"`
}

type RescanHbaRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	HbaDevice string                  `xml:"hbaDevice,omitempty"`
}

type RescanAllHbaRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateSoftwareInternetScsiEnabledRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Enabled bool                    `xml:"enabled,omitempty"`
}

type UpdateInternetScsiDiscoveryPropertiesRequestType struct {
	_this               *ManagedObjectReference                 `xml:"_this,omitempty"`
	IScsiHbaDevice      string                                  `xml:"iScsiHbaDevice,omitempty"`
	DiscoveryProperties *HostInternetScsiHbaDiscoveryProperties `xml:"discoveryProperties,omitempty"`
}

type UpdateInternetScsiAuthenticationPropertiesRequestType struct {
	_this                    *ManagedObjectReference                      `xml:"_this,omitempty"`
	IScsiHbaDevice           string                                       `xml:"iScsiHbaDevice,omitempty"`
	AuthenticationProperties *HostInternetScsiHbaAuthenticationProperties `xml:"authenticationProperties,omitempty"`
	TargetSet                *HostInternetScsiHbaTargetSet                `xml:"targetSet,omitempty"`
}

type UpdateInternetScsiDigestPropertiesRequestType struct {
	_this            *ManagedObjectReference              `xml:"_this,omitempty"`
	IScsiHbaDevice   string                               `xml:"iScsiHbaDevice,omitempty"`
	TargetSet        *HostInternetScsiHbaTargetSet        `xml:"targetSet,omitempty"`
	DigestProperties *HostInternetScsiHbaDigestProperties `xml:"digestProperties,omitempty"`
}

type UpdateInternetScsiAdvancedOptionsRequestType struct {
	_this          *ManagedObjectReference          `xml:"_this,omitempty"`
	IScsiHbaDevice string                           `xml:"iScsiHbaDevice,omitempty"`
	TargetSet      *HostInternetScsiHbaTargetSet    `xml:"targetSet,omitempty"`
	Options        []*HostInternetScsiHbaParamValue `xml:"options,omitempty"`
}

type UpdateInternetScsiIPPropertiesRequestType struct {
	_this          *ManagedObjectReference          `xml:"_this,omitempty"`
	IScsiHbaDevice string                           `xml:"iScsiHbaDevice,omitempty"`
	IpProperties   *HostInternetScsiHbaIPProperties `xml:"ipProperties,omitempty"`
}

type UpdateInternetScsiNameRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	IScsiHbaDevice string                  `xml:"iScsiHbaDevice,omitempty"`
	IScsiName      string                  `xml:"iScsiName,omitempty"`
}

type UpdateInternetScsiAliasRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	IScsiHbaDevice string                  `xml:"iScsiHbaDevice,omitempty"`
	IScsiAlias     string                  `xml:"iScsiAlias,omitempty"`
}

type AddInternetScsiSendTargetsRequestType struct {
	_this          *ManagedObjectReference          `xml:"_this,omitempty"`
	IScsiHbaDevice string                           `xml:"iScsiHbaDevice,omitempty"`
	Targets        []*HostInternetScsiHbaSendTarget `xml:"targets,omitempty"`
}

type RemoveInternetScsiSendTargetsRequestType struct {
	_this          *ManagedObjectReference          `xml:"_this,omitempty"`
	IScsiHbaDevice string                           `xml:"iScsiHbaDevice,omitempty"`
	Targets        []*HostInternetScsiHbaSendTarget `xml:"targets,omitempty"`
}

type AddInternetScsiStaticTargetsRequestType struct {
	_this          *ManagedObjectReference            `xml:"_this,omitempty"`
	IScsiHbaDevice string                             `xml:"iScsiHbaDevice,omitempty"`
	Targets        []*HostInternetScsiHbaStaticTarget `xml:"targets,omitempty"`
}

type RemoveInternetScsiStaticTargetsRequestType struct {
	_this          *ManagedObjectReference            `xml:"_this,omitempty"`
	IScsiHbaDevice string                             `xml:"iScsiHbaDevice,omitempty"`
	Targets        []*HostInternetScsiHbaStaticTarget `xml:"targets,omitempty"`
}

type EnableMultipathPathRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	PathName string                  `xml:"pathName,omitempty"`
}

type DisableMultipathPathRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	PathName string                  `xml:"pathName,omitempty"`
}

type SetMultipathLunPolicyRequestType struct {
	_this  *ManagedObjectReference             `xml:"_this,omitempty"`
	LunId  string                              `xml:"lunId,omitempty"`
	Policy *HostMultipathInfoLogicalUnitPolicy `xml:"policy,omitempty"`
}

type QueryPathSelectionPolicyOptionsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryStorageArrayTypePolicyOptionsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type UpdateScsiLunDisplayNameRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	LunUuid     string                  `xml:"lunUuid,omitempty"`
	DisplayName string                  `xml:"displayName,omitempty"`
}

type DetachScsiLunRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	LunUuid string                  `xml:"lunUuid,omitempty"`
}

type DeleteScsiLunStateRequestType struct {
	_this            *ManagedObjectReference `xml:"_this,omitempty"`
	LunCanonicalName string                  `xml:"lunCanonicalName,omitempty"`
}

type AttachScsiLunRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	LunUuid string                  `xml:"lunUuid,omitempty"`
}

type RefreshStorageSystemRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type DiscoverFcoeHbasRequestType struct {
	_this    *ManagedObjectReference      `xml:"_this,omitempty"`
	FcoeSpec *FcoeConfigFcoeSpecification `xml:"fcoeSpec,omitempty"`
}

type MarkForRemovalRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	HbaName string                  `xml:"hbaName,omitempty"`
	Remove  bool                    `xml:"remove,omitempty"`
}

type FormatVffsRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	CreateSpec *HostVffsSpec           `xml:"createSpec,omitempty"`
}

type ExtendVffsRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	VffsPath   string                  `xml:"vffsPath,omitempty"`
	DevicePath string                  `xml:"devicePath,omitempty"`
	Spec       *HostDiskPartitionSpec  `xml:"spec,omitempty"`
}

type DestroyVffsRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VffsPath string                  `xml:"vffsPath,omitempty"`
}

type MountVffsVolumeRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VffsUuid string                  `xml:"vffsUuid,omitempty"`
}

type UnmountVffsVolumeRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VffsUuid string                  `xml:"vffsUuid,omitempty"`
}

type DeleteVffsVolumeStateRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VffsUuid string                  `xml:"vffsUuid,omitempty"`
}

type RescanVffsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryAvailableSsdsRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	VffsPath string                  `xml:"vffsPath,omitempty"`
}

type ConfigureVFlashResourceExRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	DevicePath []string                `xml:"devicePath,omitempty"`
}

type HostConfigureVFlashResourceRequestType struct {
	_this *ManagedObjectReference                    `xml:"_this,omitempty"`
	Spec  *HostVFlashManagerVFlashResourceConfigSpec `xml:"spec,omitempty"`
}

type HostRemoveVFlashResourceRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type HostConfigVFlashCacheRequestType struct {
	_this *ManagedObjectReference                 `xml:"_this,omitempty"`
	Spec  *HostVFlashManagerVFlashCacheConfigSpec `xml:"spec,omitempty"`
}

type HostGetVFlashModuleDefaultConfigRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	VFlashModule string                  `xml:"vFlashModule,omitempty"`
}

type UpdateIpConfigRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	IpConfig *HostIpConfig           `xml:"ipConfig,omitempty"`
}

type SelectVnicRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Device string                  `xml:"device,omitempty"`
}

type DeselectVnicRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryNetConfigRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	NicType string                  `xml:"nicType,omitempty"`
}

type SelectVnicForNicTypeRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	NicType string                  `xml:"nicType,omitempty"`
	Device  string                  `xml:"device,omitempty"`
}

type DeselectVnicForNicTypeRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	NicType string                  `xml:"nicType,omitempty"`
	Device  string                  `xml:"device,omitempty"`
}

type QueryCmmdsRequestType struct {
	_this   *ManagedObjectReference             `xml:"_this,omitempty"`
	Queries []*HostVsanInternalSystemCmmdsQuery `xml:"queries,omitempty"`
}

type QueryPhysicalVsanDisksRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Props []string                `xml:"props,omitempty"`
}

type QueryVsanObjectsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Uuids []string                `xml:"uuids,omitempty"`
}

type QueryObjectsOnPhysicalVsanDiskRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Disks []string                `xml:"disks,omitempty"`
}

type QueryDisksForVsanRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	CanonicalName []string                `xml:"canonicalName,omitempty"`
}

type AddDisksRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Disk  []*HostScsiDisk         `xml:"disk,omitempty"`
}

type InitializeDisksRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Mapping []*VsanHostDiskMapping  `xml:"mapping,omitempty"`
}

type RemoveDiskRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Disk  []*HostScsiDisk         `xml:"disk,omitempty"`
}

type RemoveDiskMappingRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Mapping []*VsanHostDiskMapping  `xml:"mapping,omitempty"`
}

type UpdateVsanRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Config *VsanHostConfigInfo     `xml:"config,omitempty"`
}

type QueryHostStatusRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type QueryOptionsRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Name  string                  `xml:"name,omitempty"`
}

type UpdateOptionsRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	ChangedValue []*OptionValue          `xml:"changedValue,omitempty"`
}

type CheckComplianceRequestType struct {
	_this   *ManagedObjectReference   `xml:"_this,omitempty"`
	Profile []*ManagedObjectReference `xml:"profile,omitempty"`
	Entity  []*ManagedObjectReference `xml:"entity,omitempty"`
}

type QueryComplianceStatusRequestType struct {
	_this   *ManagedObjectReference   `xml:"_this,omitempty"`
	Profile []*ManagedObjectReference `xml:"profile,omitempty"`
	Entity  []*ManagedObjectReference `xml:"entity,omitempty"`
}

type ClearComplianceStatusRequestType struct {
	_this   *ManagedObjectReference   `xml:"_this,omitempty"`
	Profile []*ManagedObjectReference `xml:"profile,omitempty"`
	Entity  []*ManagedObjectReference `xml:"entity,omitempty"`
}

type QueryExpressionMetadataRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	ExpressionName []string                `xml:"expressionName,omitempty"`
	Profile        *ManagedObjectReference `xml:"profile,omitempty"`
}

type RetrieveDescriptionRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type DestroyProfileRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type AssociateProfileRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Entity []*ManagedObjectReference `xml:"entity,omitempty"`
}

type DissociateProfileRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Entity []*ManagedObjectReference `xml:"entity,omitempty"`
}

type CheckProfileComplianceRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Entity []*ManagedObjectReference `xml:"entity,omitempty"`
}

type ExportProfileRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateProfileRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	CreateSpec *ProfileCreateSpec      `xml:"createSpec,omitempty"`
}

type QueryPolicyMetadataRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	PolicyName []string                `xml:"policyName,omitempty"`
	Profile    *ManagedObjectReference `xml:"profile,omitempty"`
}

type FindAssociatedProfileRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
}

type UpdateClusterProfileRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Config *ClusterProfileConfigSpec `xml:"config,omitempty"`
}

type UpdateReferenceHostRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type UpdateHostProfileRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Config *HostProfileConfigSpec  `xml:"config,omitempty"`
}

type ExecuteHostProfileRequestType struct {
	_this         *ManagedObjectReference                 `xml:"_this,omitempty"`
	Host          *ManagedObjectReference                 `xml:"host,omitempty"`
	DeferredParam []*ProfileDeferredPolicyOptionParameter `xml:"deferredParam,omitempty"`
}

type ApplyHostConfigRequestType struct {
	_this      *ManagedObjectReference                 `xml:"_this,omitempty"`
	Host       *ManagedObjectReference                 `xml:"host,omitempty"`
	ConfigSpec *HostConfigSpec                         `xml:"configSpec,omitempty"`
	UserInput  []*ProfileDeferredPolicyOptionParameter `xml:"userInput,omitempty"`
}

type GenerateConfigTaskListRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	ConfigSpec *HostConfigSpec         `xml:"configSpec,omitempty"`
	Host       *ManagedObjectReference `xml:"host,omitempty"`
}

type GenerateHostProfileTaskListRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	ConfigSpec *HostConfigSpec         `xml:"configSpec,omitempty"`
	Host       *ManagedObjectReference `xml:"host,omitempty"`
}

type QueryHostProfileMetadataRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	ProfileName []string                `xml:"profileName,omitempty"`
	Profile     *ManagedObjectReference `xml:"profile,omitempty"`
}

type QueryProfileStructureRequestType struct {
	_this   *ManagedObjectReference `xml:"_this,omitempty"`
	Profile *ManagedObjectReference `xml:"profile,omitempty"`
}

type CreateDefaultProfileRequestType struct {
	_this           *ManagedObjectReference `xml:"_this,omitempty"`
	ProfileType     string                  `xml:"profileType,omitempty"`
	ProfileTypeName string                  `xml:"profileTypeName,omitempty"`
	Profile         *ManagedObjectReference `xml:"profile,omitempty"`
}

type UpdateAnswerFileRequestType struct {
	_this      *ManagedObjectReference `xml:"_this,omitempty"`
	Host       *ManagedObjectReference `xml:"host,omitempty"`
	ConfigSpec *AnswerFileCreateSpec   `xml:"configSpec,omitempty"`
}

type RetrieveAnswerFileRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type RetrieveAnswerFileForProfileRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	Host         *ManagedObjectReference `xml:"host,omitempty"`
	ApplyProfile *HostApplyProfile       `xml:"applyProfile,omitempty"`
}

type ExportAnswerFileRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Host  *ManagedObjectReference `xml:"host,omitempty"`
}

type CheckAnswerFileStatusRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	Host  []*ManagedObjectReference `xml:"host,omitempty"`
}

type QueryAnswerFileStatusRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	Host  []*ManagedObjectReference `xml:"host,omitempty"`
}

type RemoveScheduledTaskRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type ReconfigureScheduledTaskRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Spec  *ScheduledTaskSpec      `xml:"spec,omitempty"`
}

type RunScheduledTaskRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateScheduledTaskRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
	Spec   *ScheduledTaskSpec      `xml:"spec,omitempty"`
}

type RetrieveEntityScheduledTaskRequestType struct {
	_this  *ManagedObjectReference `xml:"_this,omitempty"`
	Entity *ManagedObjectReference `xml:"entity,omitempty"`
}

type CreateObjectScheduledTaskRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Obj   *ManagedObjectReference `xml:"obj,omitempty"`
	Spec  *ScheduledTaskSpec      `xml:"spec,omitempty"`
}

type RetrieveObjectScheduledTaskRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Obj   *ManagedObjectReference `xml:"obj,omitempty"`
}

type OpenInventoryViewFolderRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Entity []*ManagedObjectReference `xml:"entity,omitempty"`
}

type CloseInventoryViewFolderRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Entity []*ManagedObjectReference `xml:"entity,omitempty"`
}

type ModifyListViewRequestType struct {
	_this  *ManagedObjectReference   `xml:"_this,omitempty"`
	Add    []*ManagedObjectReference `xml:"add,omitempty"`
	Remove []*ManagedObjectReference `xml:"remove,omitempty"`
}

type ResetListViewRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	Obj   []*ManagedObjectReference `xml:"obj,omitempty"`
}

type ResetListViewFromViewRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	View  *ManagedObjectReference `xml:"view,omitempty"`
}

type DestroyViewRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateInventoryViewRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CreateContainerViewRequestType struct {
	_this     *ManagedObjectReference `xml:"_this,omitempty"`
	Container *ManagedObjectReference `xml:"container,omitempty"`
	Type_     []string                `xml:"type,omitempty"`
	Recursive bool                    `xml:"recursive,omitempty"`
}

type CreateListViewRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	Obj   []*ManagedObjectReference `xml:"obj,omitempty"`
}

type CreateListViewFromViewRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	View  *ManagedObjectReference `xml:"view,omitempty"`
}

type RevertToSnapshotRequestType struct {
	_this           *ManagedObjectReference `xml:"_this,omitempty"`
	Host            *ManagedObjectReference `xml:"host,omitempty"`
	SuppressPowerOn bool                    `xml:"suppressPowerOn,omitempty"`
}

type RemoveSnapshotRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	RemoveChildren bool                    `xml:"removeChildren,omitempty"`
	Consolidate    bool                    `xml:"consolidate,omitempty"`
}

type RenameSnapshotRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	Name        string                  `xml:"name,omitempty"`
	Description string                  `xml:"description,omitempty"`
}

type ExportSnapshotRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
}

type CheckCompatibilityRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	Vm       *ManagedObjectReference `xml:"vm,omitempty"`
	Host     *ManagedObjectReference `xml:"host,omitempty"`
	Pool     *ManagedObjectReference `xml:"pool,omitempty"`
	TestType []string                `xml:"testType,omitempty"`
}

type QueryVMotionCompatibilityExRequestType struct {
	_this *ManagedObjectReference   `xml:"_this,omitempty"`
	Vm    []*ManagedObjectReference `xml:"vm,omitempty"`
	Host  []*ManagedObjectReference `xml:"host,omitempty"`
}

type CheckMigrateRequestType struct {
	_this    *ManagedObjectReference   `xml:"_this,omitempty"`
	Vm       *ManagedObjectReference   `xml:"vm,omitempty"`
	Host     *ManagedObjectReference   `xml:"host,omitempty"`
	Pool     *ManagedObjectReference   `xml:"pool,omitempty"`
	State    *VirtualMachinePowerState `xml:"state,omitempty"`
	TestType []string                  `xml:"testType,omitempty"`
}

type CheckRelocateRequestType struct {
	_this    *ManagedObjectReference     `xml:"_this,omitempty"`
	Vm       *ManagedObjectReference     `xml:"vm,omitempty"`
	Spec     *VirtualMachineRelocateSpec `xml:"spec,omitempty"`
	TestType []string                    `xml:"testType,omitempty"`
}

type ValidateCredentialsInGuestRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Auth  *GuestAuthentication    `xml:"auth,omitempty"`
}

type AcquireCredentialsInGuestRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	Vm            *ManagedObjectReference `xml:"vm,omitempty"`
	RequestedAuth *GuestAuthentication    `xml:"requestedAuth,omitempty"`
	SessionID     int64                   `xml:"sessionID,omitempty"`
}

type ReleaseCredentialsInGuestRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Auth  *GuestAuthentication    `xml:"auth,omitempty"`
}

type MakeDirectoryInGuestRequestType struct {
	_this                   *ManagedObjectReference `xml:"_this,omitempty"`
	Vm                      *ManagedObjectReference `xml:"vm,omitempty"`
	Auth                    *GuestAuthentication    `xml:"auth,omitempty"`
	DirectoryPath           string                  `xml:"directoryPath,omitempty"`
	CreateParentDirectories bool                    `xml:"createParentDirectories,omitempty"`
}

type DeleteFileInGuestRequestType struct {
	_this    *ManagedObjectReference `xml:"_this,omitempty"`
	Vm       *ManagedObjectReference `xml:"vm,omitempty"`
	Auth     *GuestAuthentication    `xml:"auth,omitempty"`
	FilePath string                  `xml:"filePath,omitempty"`
}

type DeleteDirectoryInGuestRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	Vm            *ManagedObjectReference `xml:"vm,omitempty"`
	Auth          *GuestAuthentication    `xml:"auth,omitempty"`
	DirectoryPath string                  `xml:"directoryPath,omitempty"`
	Recursive     bool                    `xml:"recursive,omitempty"`
}

type MoveDirectoryInGuestRequestType struct {
	_this            *ManagedObjectReference `xml:"_this,omitempty"`
	Vm               *ManagedObjectReference `xml:"vm,omitempty"`
	Auth             *GuestAuthentication    `xml:"auth,omitempty"`
	SrcDirectoryPath string                  `xml:"srcDirectoryPath,omitempty"`
	DstDirectoryPath string                  `xml:"dstDirectoryPath,omitempty"`
}

type MoveFileInGuestRequestType struct {
	_this       *ManagedObjectReference `xml:"_this,omitempty"`
	Vm          *ManagedObjectReference `xml:"vm,omitempty"`
	Auth        *GuestAuthentication    `xml:"auth,omitempty"`
	SrcFilePath string                  `xml:"srcFilePath,omitempty"`
	DstFilePath string                  `xml:"dstFilePath,omitempty"`
	Overwrite   bool                    `xml:"overwrite,omitempty"`
}

type CreateTemporaryFileInGuestRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	Vm            *ManagedObjectReference `xml:"vm,omitempty"`
	Auth          *GuestAuthentication    `xml:"auth,omitempty"`
	Prefix        string                  `xml:"prefix,omitempty"`
	Suffix        string                  `xml:"suffix,omitempty"`
	DirectoryPath string                  `xml:"directoryPath,omitempty"`
}

type CreateTemporaryDirectoryInGuestRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	Vm            *ManagedObjectReference `xml:"vm,omitempty"`
	Auth          *GuestAuthentication    `xml:"auth,omitempty"`
	Prefix        string                  `xml:"prefix,omitempty"`
	Suffix        string                  `xml:"suffix,omitempty"`
	DirectoryPath string                  `xml:"directoryPath,omitempty"`
}

type ListFilesInGuestRequestType struct {
	_this        *ManagedObjectReference `xml:"_this,omitempty"`
	Vm           *ManagedObjectReference `xml:"vm,omitempty"`
	Auth         *GuestAuthentication    `xml:"auth,omitempty"`
	FilePath     string                  `xml:"filePath,omitempty"`
	Index        int32                   `xml:"index,omitempty"`
	MaxResults   int32                   `xml:"maxResults,omitempty"`
	MatchPattern string                  `xml:"matchPattern,omitempty"`
}

type ChangeFileAttributesInGuestRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	Vm             *ManagedObjectReference `xml:"vm,omitempty"`
	Auth           *GuestAuthentication    `xml:"auth,omitempty"`
	GuestFilePath  string                  `xml:"guestFilePath,omitempty"`
	FileAttributes *GuestFileAttributes    `xml:"fileAttributes,omitempty"`
}

type InitiateFileTransferFromGuestRequestType struct {
	_this         *ManagedObjectReference `xml:"_this,omitempty"`
	Vm            *ManagedObjectReference `xml:"vm,omitempty"`
	Auth          *GuestAuthentication    `xml:"auth,omitempty"`
	GuestFilePath string                  `xml:"guestFilePath,omitempty"`
}

type InitiateFileTransferToGuestRequestType struct {
	_this          *ManagedObjectReference `xml:"_this,omitempty"`
	Vm             *ManagedObjectReference `xml:"vm,omitempty"`
	Auth           *GuestAuthentication    `xml:"auth,omitempty"`
	GuestFilePath  string                  `xml:"guestFilePath,omitempty"`
	FileAttributes *GuestFileAttributes    `xml:"fileAttributes,omitempty"`
	FileSize       int64                   `xml:"fileSize,omitempty"`
	Overwrite      bool                    `xml:"overwrite,omitempty"`
}

type StartProgramInGuestRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Auth  *GuestAuthentication    `xml:"auth,omitempty"`
	Spec  *GuestProgramSpec       `xml:"spec,omitempty"`
}

type ListProcessesInGuestRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Auth  *GuestAuthentication    `xml:"auth,omitempty"`
	Pids  []int64                 `xml:"pids,omitempty"`
}

type TerminateProcessInGuestRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Auth  *GuestAuthentication    `xml:"auth,omitempty"`
	Pid   int64                   `xml:"pid,omitempty"`
}

type ReadEnvironmentVariableInGuestRequestType struct {
	_this *ManagedObjectReference `xml:"_this,omitempty"`
	Vm    *ManagedObjectReference `xml:"vm,omitempty"`
	Auth  *GuestAuthentication    `xml:"auth,omitempty"`
	Names []string                `xml:"names,omitempty"`
}

type VimPortType struct {
	client *gowsdl.SoapClient
}

func NewVimPortType(url string, tls bool) *VimPortType {
	client := gowsdl.NewSoapClient(url, tls)

	return &VimPortType{
		client: client,
	}
}

/**
* Error can be either of the following types:
*
* - AlreadyExistsFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) AddAuthorizationRole(request *AddAuthorizationRoleRequestType) (*AddAuthorizationRoleResponse, error) {
	response := &AddAuthorizationRoleResponse{}
	err := service.client.Call("AddAuthorizationRole", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RemoveFailedFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveAuthorizationRole(request *RemoveAuthorizationRoleRequestType) (*RemoveAuthorizationRoleResponse, error) {
	response := &RemoveAuthorizationRoleResponse{}
	err := service.client.Call("RemoveAuthorizationRole", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - InvalidNameFault
* - AlreadyExistsFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateAuthorizationRole(request *UpdateAuthorizationRoleRequestType) (*UpdateAuthorizationRoleResponse, error) {
	response := &UpdateAuthorizationRoleResponse{}
	err := service.client.Call("UpdateAuthorizationRole", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - AuthMinimumAdminPermissionFault
* - RuntimeFault
 */
func (service *VimPortType) MergePermissions(request *MergePermissionsRequestType) (*MergePermissionsResponse, error) {
	response := &MergePermissionsResponse{}
	err := service.client.Call("MergePermissions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) RetrieveRolePermissions(request *RetrieveRolePermissionsRequestType) (*RetrieveRolePermissionsResponse, error) {
	response := &RetrieveRolePermissionsResponse{}
	err := service.client.Call("RetrieveRolePermissions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveEntityPermissions(request *RetrieveEntityPermissionsRequestType) (*RetrieveEntityPermissionsResponse, error) {
	response := &RetrieveEntityPermissionsResponse{}
	err := service.client.Call("RetrieveEntityPermissions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveAllPermissions(request *RetrieveAllPermissionsRequestType) (*RetrieveAllPermissionsResponse, error) {
	response := &RetrieveAllPermissionsResponse{}
	err := service.client.Call("RetrieveAllPermissions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - UserNotFoundFault
* - NotFoundFault
* - AuthMinimumAdminPermissionFault
* - RuntimeFault
 */
func (service *VimPortType) SetEntityPermissions(request *SetEntityPermissionsRequestType) (*SetEntityPermissionsResponse, error) {
	response := &SetEntityPermissionsResponse{}
	err := service.client.Call("SetEntityPermissions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - UserNotFoundFault
* - NotFoundFault
* - AuthMinimumAdminPermissionFault
* - RuntimeFault
 */
func (service *VimPortType) ResetEntityPermissions(request *ResetEntityPermissionsRequestType) (*ResetEntityPermissionsResponse, error) {
	response := &ResetEntityPermissionsResponse{}
	err := service.client.Call("ResetEntityPermissions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - AuthMinimumAdminPermissionFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveEntityPermission(request *RemoveEntityPermissionRequestType) (*RemoveEntityPermissionResponse, error) {
	response := &RemoveEntityPermissionResponse{}
	err := service.client.Call("RemoveEntityPermission", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) HasPrivilegeOnEntity(request *HasPrivilegeOnEntityRequestType) (*HasPrivilegeOnEntityResponse, error) {
	response := &HasPrivilegeOnEntityResponse{}
	err := service.client.Call("HasPrivilegeOnEntity", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) HasPrivilegeOnEntities(request *HasPrivilegeOnEntitiesRequestType) (*HasPrivilegeOnEntitiesResponse, error) {
	response := &HasPrivilegeOnEntitiesResponse{}
	err := service.client.Call("HasPrivilegeOnEntities", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureCluster_Task(request *ReconfigureClusterRequestType) (*ReconfigureCluster_TaskResponse, error) {
	response := &ReconfigureCluster_TaskResponse{}
	err := service.client.Call("ReconfigureCluster_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ApplyRecommendation(request *ApplyRecommendationRequestType) (*ApplyRecommendationResponse, error) {
	response := &ApplyRecommendationResponse{}
	err := service.client.Call("ApplyRecommendation", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CancelRecommendation(request *CancelRecommendationRequestType) (*CancelRecommendationResponse, error) {
	response := &CancelRecommendationResponse{}
	err := service.client.Call("CancelRecommendation", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RecommendHostsForVm(request *RecommendHostsForVmRequestType) (*RecommendHostsForVmResponse, error) {
	response := &RecommendHostsForVmResponse{}
	err := service.client.Call("RecommendHostsForVm", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - HostConnectFaultFault
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) AddHost_Task(request *AddHostRequestType) (*AddHost_TaskResponse, error) {
	response := &AddHost_TaskResponse{}
	err := service.client.Call("AddHost_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - TooManyHostsFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) MoveInto_Task(request *MoveIntoRequestType) (*MoveInto_TaskResponse, error) {
	response := &MoveInto_TaskResponse{}
	err := service.client.Call("MoveInto_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TooManyHostsFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) MoveHostInto_Task(request *MoveHostIntoRequestType) (*MoveHostInto_TaskResponse, error) {
	response := &MoveHostInto_TaskResponse{}
	err := service.client.Call("MoveHostInto_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshRecommendation(request *RefreshRecommendationRequestType) (*RefreshRecommendationResponse, error) {
	response := &RefreshRecommendationResponse{}
	err := service.client.Call("RefreshRecommendation", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveDasAdvancedRuntimeInfo(request *RetrieveDasAdvancedRuntimeInfoRequestType) (*RetrieveDasAdvancedRuntimeInfoResponse, error) {
	response := &RetrieveDasAdvancedRuntimeInfoResponse{}
	err := service.client.Call("RetrieveDasAdvancedRuntimeInfo", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ClusterEnterMaintenanceMode(request *ClusterEnterMaintenanceModeRequestType) (*ClusterEnterMaintenanceModeResponse, error) {
	response := &ClusterEnterMaintenanceModeResponse{}
	err := service.client.Call("ClusterEnterMaintenanceMode", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureComputeResource_Task(request *ReconfigureComputeResourceRequestType) (*ReconfigureComputeResource_TaskResponse, error) {
	response := &ReconfigureComputeResource_TaskResponse{}
	err := service.client.Call("ReconfigureComputeResource_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - InvalidPrivilegeFault
* - RuntimeFault
 */
func (service *VimPortType) AddCustomFieldDef(request *AddCustomFieldDefRequestType) (*AddCustomFieldDefResponse, error) {
	response := &AddCustomFieldDefResponse{}
	err := service.client.Call("AddCustomFieldDef", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RemoveCustomFieldDef(request *RemoveCustomFieldDefRequestType) (*RemoveCustomFieldDefResponse, error) {
	response := &RemoveCustomFieldDefResponse{}
	err := service.client.Call("RemoveCustomFieldDef", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) RenameCustomFieldDef(request *RenameCustomFieldDefRequestType) (*RenameCustomFieldDefResponse, error) {
	response := &RenameCustomFieldDefResponse{}
	err := service.client.Call("RenameCustomFieldDef", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) SetField(request *SetFieldRequestType) (*SetFieldResponse, error) {
	response := &SetFieldResponse{}
	err := service.client.Call("SetField", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DoesCustomizationSpecExist(request *DoesCustomizationSpecExistRequestType) (*DoesCustomizationSpecExistResponse, error) {
	response := &DoesCustomizationSpecExistResponse{}
	err := service.client.Call("DoesCustomizationSpecExist", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) GetCustomizationSpec(request *GetCustomizationSpecRequestType) (*GetCustomizationSpecResponse, error) {
	response := &GetCustomizationSpecResponse{}
	err := service.client.Call("GetCustomizationSpec", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - CustomizationFaultFault
* - AlreadyExistsFault
* - RuntimeFault
 */
func (service *VimPortType) CreateCustomizationSpec(request *CreateCustomizationSpecRequestType) (*CreateCustomizationSpecResponse, error) {
	response := &CreateCustomizationSpecResponse{}
	err := service.client.Call("CreateCustomizationSpec", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - CustomizationFaultFault
* - NotFoundFault
* - ConcurrentAccessFault
* - RuntimeFault
 */
func (service *VimPortType) OverwriteCustomizationSpec(request *OverwriteCustomizationSpecRequestType) (*OverwriteCustomizationSpecResponse, error) {
	response := &OverwriteCustomizationSpecResponse{}
	err := service.client.Call("OverwriteCustomizationSpec", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) DeleteCustomizationSpec(request *DeleteCustomizationSpecRequestType) (*DeleteCustomizationSpecResponse, error) {
	response := &DeleteCustomizationSpecResponse{}
	err := service.client.Call("DeleteCustomizationSpec", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - AlreadyExistsFault
* - RuntimeFault
 */
func (service *VimPortType) DuplicateCustomizationSpec(request *DuplicateCustomizationSpecRequestType) (*DuplicateCustomizationSpecResponse, error) {
	response := &DuplicateCustomizationSpecResponse{}
	err := service.client.Call("DuplicateCustomizationSpec", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - AlreadyExistsFault
* - RuntimeFault
 */
func (service *VimPortType) RenameCustomizationSpec(request *RenameCustomizationSpecRequestType) (*RenameCustomizationSpecResponse, error) {
	response := &RenameCustomizationSpecResponse{}
	err := service.client.Call("RenameCustomizationSpec", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CustomizationSpecItemToXml(request *CustomizationSpecItemToXmlRequestType) (*CustomizationSpecItemToXmlResponse, error) {
	response := &CustomizationSpecItemToXmlResponse{}
	err := service.client.Call("CustomizationSpecItemToXml", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - CustomizationFaultFault
* - RuntimeFault
 */
func (service *VimPortType) XmlToCustomizationSpecItem(request *XmlToCustomizationSpecItemRequestType) (*XmlToCustomizationSpecItemResponse, error) {
	response := &XmlToCustomizationSpecItemResponse{}
	err := service.client.Call("XmlToCustomizationSpecItem", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - CustomizationFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CheckCustomizationResources(request *CheckCustomizationResourcesRequestType) (*CheckCustomizationResourcesResponse, error) {
	response := &CheckCustomizationResourcesResponse{}
	err := service.client.Call("CheckCustomizationResources", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - HostConnectFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryConnectionInfo(request *QueryConnectionInfoRequestType) (*QueryConnectionInfoResponse, error) {
	response := &QueryConnectionInfoResponse{}
	err := service.client.Call("QueryConnectionInfo", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) PowerOnMultiVM_Task(request *PowerOnMultiVMRequestType) (*PowerOnMultiVM_TaskResponse, error) {
	response := &PowerOnMultiVM_TaskResponse{}
	err := service.client.Call("PowerOnMultiVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryDatacenterConfigOptionDescriptor(request *queryDatacenterConfigOptionDescriptorRequestType) (*queryDatacenterConfigOptionDescriptorResponse, error) {
	response := &queryDatacenterConfigOptionDescriptorResponse{}
	err := service.client.Call("queryDatacenterConfigOptionDescriptor", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureDatacenter_Task(request *ReconfigureDatacenterRequestType) (*ReconfigureDatacenter_TaskResponse, error) {
	response := &ReconfigureDatacenter_TaskResponse{}
	err := service.client.Call("ReconfigureDatacenter_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RefreshDatastore(request *RefreshDatastoreRequestType) (*RefreshDatastoreResponse, error) {
	response := &RefreshDatastoreResponse{}
	err := service.client.Call("RefreshDatastore", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshDatastoreStorageInfo(request *RefreshDatastoreStorageInfoRequestType) (*RefreshDatastoreStorageInfoResponse, error) {
	response := &RefreshDatastoreStorageInfoResponse{}
	err := service.client.Call("RefreshDatastoreStorageInfo", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ResourceInUseFault
* - PlatformConfigFaultFault
* - TaskInProgressFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateVirtualMachineFiles_Task(request *UpdateVirtualMachineFilesRequestType) (*UpdateVirtualMachineFiles_TaskResponse, error) {
	response := &UpdateVirtualMachineFiles_TaskResponse{}
	err := service.client.Call("UpdateVirtualMachineFiles_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) RenameDatastore(request *RenameDatastoreRequestType) (*RenameDatastoreResponse, error) {
	response := &RenameDatastoreResponse{}
	err := service.client.Call("RenameDatastore", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) DestroyDatastore(request *DestroyDatastoreRequestType) (*DestroyDatastoreResponse, error) {
	response := &DestroyDatastoreResponse{}
	err := service.client.Call("DestroyDatastore", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) DatastoreEnterMaintenanceMode(request *DatastoreEnterMaintenanceModeRequestType) (*DatastoreEnterMaintenanceModeResponse, error) {
	response := &DatastoreEnterMaintenanceModeResponse{}
	err := service.client.Call("DatastoreEnterMaintenanceMode", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) DatastoreExitMaintenanceMode_Task(request *DatastoreExitMaintenanceModeRequestType) (*DatastoreExitMaintenanceMode_TaskResponse, error) {
	response := &DatastoreExitMaintenanceMode_TaskResponse{}
	err := service.client.Call("DatastoreExitMaintenanceMode_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - CannotCreateFileFault
* - FileAlreadyExistsFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) CreateDirectory(request *CreateDirectoryRequestType) (*CreateDirectoryResponse, error) {
	response := &CreateDirectoryResponse{}
	err := service.client.Call("CreateDirectory", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - FileNotFoundFault
* - InvalidDatastoreFault
* - InvalidDatastorePathFault
* - RuntimeFault
 */
func (service *VimPortType) DeleteDirectory(request *DeleteDirectoryRequestType) (*DeleteDirectoryResponse, error) {
	response := &DeleteDirectoryResponse{}
	err := service.client.Call("DeleteDirectory", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryDescriptions(request *QueryDescriptionsRequestType) (*QueryDescriptionsResponse, error) {
	response := &QueryDescriptionsResponse{}
	err := service.client.Call("QueryDescriptions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - CannotAccessFileFault
* - RuntimeFault
 */
func (service *VimPortType) BrowseDiagnosticLog(request *BrowseDiagnosticLogRequestType) (*BrowseDiagnosticLogResponse, error) {
	response := &BrowseDiagnosticLogResponse{}
	err := service.client.Call("BrowseDiagnosticLog", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - LogBundlingFailedFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) GenerateLogBundles_Task(request *GenerateLogBundlesRequestType) (*GenerateLogBundles_TaskResponse, error) {
	response := &GenerateLogBundles_TaskResponse{}
	err := service.client.Call("GenerateLogBundles_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FetchDVPortKeys(request *FetchDVPortKeysRequestType) (*FetchDVPortKeysResponse, error) {
	response := &FetchDVPortKeysResponse{}
	err := service.client.Call("FetchDVPortKeys", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FetchDVPorts(request *FetchDVPortsRequestType) (*FetchDVPortsResponse, error) {
	response := &FetchDVPortsResponse{}
	err := service.client.Call("FetchDVPorts", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryUsedVlanIdInDvs(request *QueryUsedVlanIdInDvsRequestType) (*QueryUsedVlanIdInDvsResponse, error) {
	response := &QueryUsedVlanIdInDvsResponse{}
	err := service.client.Call("QueryUsedVlanIdInDvs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - ConcurrentAccessFault
* - DuplicateNameFault
* - InvalidStateFault
* - InvalidNameFault
* - NotFoundFault
* - AlreadyExistsFault
* - LimitExceededFault
* - ResourceInUseFault
* - ResourceNotAvailableFault
* - DvsNotAuthorizedFault
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureDvs_Task(request *ReconfigureDvsRequestType) (*ReconfigureDvs_TaskResponse, error) {
	response := &ReconfigureDvs_TaskResponse{}
	err := service.client.Call("ReconfigureDvs_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - DvsFaultFault
* - RuntimeFault
 */
func (service *VimPortType) PerformDvsProductSpecOperation_Task(request *PerformDvsProductSpecOperationRequestType) (*PerformDvsProductSpecOperation_TaskResponse, error) {
	response := &PerformDvsProductSpecOperation_TaskResponse{}
	err := service.client.Call("PerformDvsProductSpecOperation_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - NotFoundFault
* - ResourceInUseFault
* - InvalidHostStateFault
* - RuntimeFault
 */
func (service *VimPortType) MergeDvs_Task(request *MergeDvsRequestType) (*MergeDvs_TaskResponse, error) {
	response := &MergeDvs_TaskResponse{}
	err := service.client.Call("MergeDvs_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - DuplicateNameFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) AddDVPortgroup_Task(request *AddDVPortgroupRequestType) (*AddDVPortgroup_TaskResponse, error) {
	response := &AddDVPortgroup_TaskResponse{}
	err := service.client.Call("AddDVPortgroup_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - NotFoundFault
* - ConcurrentAccessFault
* - RuntimeFault
 */
func (service *VimPortType) MoveDVPort_Task(request *MoveDVPortRequestType) (*MoveDVPort_TaskResponse, error) {
	response := &MoveDVPort_TaskResponse{}
	err := service.client.Call("MoveDVPort_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateDvsCapability(request *UpdateDvsCapabilityRequestType) (*UpdateDvsCapabilityResponse, error) {
	response := &UpdateDvsCapabilityResponse{}
	err := service.client.Call("UpdateDvsCapability", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - NotFoundFault
* - ResourceInUseFault
* - ConcurrentAccessFault
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureDVPort_Task(request *ReconfigureDVPortRequestType) (*ReconfigureDVPort_TaskResponse, error) {
	response := &ReconfigureDVPort_TaskResponse{}
	err := service.client.Call("ReconfigureDVPort_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) RefreshDVPortState(request *RefreshDVPortStateRequestType) (*RefreshDVPortStateResponse, error) {
	response := &RefreshDVPortStateResponse{}
	err := service.client.Call("RefreshDVPortState", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) RectifyDvsHost_Task(request *RectifyDvsHostRequestType) (*RectifyDvsHost_TaskResponse, error) {
	response := &RectifyDvsHost_TaskResponse{}
	err := service.client.Call("RectifyDvsHost_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - NotFoundFault
* - InvalidNameFault
* - ConcurrentAccessFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateNetworkResourcePool(request *UpdateNetworkResourcePoolRequestType) (*UpdateNetworkResourcePoolResponse, error) {
	response := &UpdateNetworkResourcePoolResponse{}
	err := service.client.Call("UpdateNetworkResourcePool", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) AddNetworkResourcePool(request *AddNetworkResourcePoolRequestType) (*AddNetworkResourcePoolResponse, error) {
	response := &AddNetworkResourcePoolResponse{}
	err := service.client.Call("AddNetworkResourcePool", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - NotFoundFault
* - InvalidNameFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveNetworkResourcePool(request *RemoveNetworkResourcePoolRequestType) (*RemoveNetworkResourcePoolResponse, error) {
	response := &RemoveNetworkResourcePoolResponse{}
	err := service.client.Call("RemoveNetworkResourcePool", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - RuntimeFault
 */
func (service *VimPortType) EnableNetworkResourceManagement(request *EnableNetworkResourceManagementRequestType) (*EnableNetworkResourceManagementResponse, error) {
	response := &EnableNetworkResourceManagementResponse{}
	err := service.client.Call("EnableNetworkResourceManagement", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - RollbackFailureFault
* - RuntimeFault
 */
func (service *VimPortType) DVSRollback_Task(request *DVSRollbackRequestType) (*DVSRollback_TaskResponse, error) {
	response := &DVSRollback_TaskResponse{}
	err := service.client.Call("DVSRollback_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - DuplicateNameFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateDVPortgroup_Task(request *CreateDVPortgroupRequestType) (*CreateDVPortgroup_TaskResponse, error) {
	response := &CreateDVPortgroup_TaskResponse{}
	err := service.client.Call("CreateDVPortgroup_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateDVSHealthCheckConfig_Task(request *UpdateDVSHealthCheckConfigRequestType) (*UpdateDVSHealthCheckConfig_TaskResponse, error) {
	response := &UpdateDVSHealthCheckConfig_TaskResponse{}
	err := service.client.Call("UpdateDVSHealthCheckConfig_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) LookupDvPortGroup(request *LookupDvPortGroupRequestType) (*LookupDvPortGroupResponse, error) {
	response := &LookupDvPortGroupResponse{}
	err := service.client.Call("LookupDvPortGroup", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryConfigOptionDescriptor(request *QueryConfigOptionDescriptorRequestType) (*QueryConfigOptionDescriptorResponse, error) {
	response := &QueryConfigOptionDescriptorResponse{}
	err := service.client.Call("QueryConfigOptionDescriptor", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryConfigOption(request *QueryConfigOptionRequestType) (*QueryConfigOptionResponse, error) {
	response := &QueryConfigOptionResponse{}
	err := service.client.Call("QueryConfigOption", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryConfigTarget(request *QueryConfigTargetRequestType) (*QueryConfigTargetResponse, error) {
	response := &QueryConfigTargetResponse{}
	err := service.client.Call("QueryConfigTarget", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryTargetCapabilities(request *QueryTargetCapabilitiesRequestType) (*QueryTargetCapabilitiesResponse, error) {
	response := &QueryTargetCapabilitiesResponse{}
	err := service.client.Call("QueryTargetCapabilities", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) SetCustomValue(request *setCustomValueRequestType) (*setCustomValueResponse, error) {
	response := &setCustomValueResponse{}
	err := service.client.Call("setCustomValue", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) UnregisterExtension(request *UnregisterExtensionRequestType) (*UnregisterExtensionResponse, error) {
	response := &UnregisterExtensionResponse{}
	err := service.client.Call("UnregisterExtension", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FindExtension(request *FindExtensionRequestType) (*FindExtensionResponse, error) {
	response := &FindExtensionResponse{}
	err := service.client.Call("FindExtension", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RegisterExtension(request *RegisterExtensionRequestType) (*RegisterExtensionResponse, error) {
	response := &RegisterExtensionResponse{}
	err := service.client.Call("RegisterExtension", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateExtension(request *UpdateExtensionRequestType) (*UpdateExtensionResponse, error) {
	response := &UpdateExtensionResponse{}
	err := service.client.Call("UpdateExtension", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) GetPublicKey(request *GetPublicKeyRequestType) (*GetPublicKeyResponse, error) {
	response := &GetPublicKeyResponse{}
	err := service.client.Call("GetPublicKey", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) SetPublicKey(request *SetPublicKeyRequestType) (*SetPublicKeyResponse, error) {
	response := &SetPublicKeyResponse{}
	err := service.client.Call("SetPublicKey", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - NoClientCertificateFault
* - RuntimeFault
 */
func (service *VimPortType) SetExtensionCertificate(request *SetExtensionCertificateRequestType) (*SetExtensionCertificateResponse, error) {
	response := &SetExtensionCertificateResponse{}
	err := service.client.Call("SetExtensionCertificate", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryManagedBy(request *QueryManagedByRequestType) (*QueryManagedByResponse, error) {
	response := &QueryManagedByResponse{}
	err := service.client.Call("QueryManagedBy", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryExtensionIpAllocationUsage(request *QueryExtensionIpAllocationUsageRequestType) (*QueryExtensionIpAllocationUsageResponse, error) {
	response := &QueryExtensionIpAllocationUsageResponse{}
	err := service.client.Call("QueryExtensionIpAllocationUsage", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidDatastoreFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MoveDatastoreFile_Task(request *MoveDatastoreFileRequestType) (*MoveDatastoreFile_TaskResponse, error) {
	response := &MoveDatastoreFile_TaskResponse{}
	err := service.client.Call("MoveDatastoreFile_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidDatastoreFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CopyDatastoreFile_Task(request *CopyDatastoreFileRequestType) (*CopyDatastoreFile_TaskResponse, error) {
	response := &CopyDatastoreFile_TaskResponse{}
	err := service.client.Call("CopyDatastoreFile_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidDatastoreFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DeleteDatastoreFile_Task(request *DeleteDatastoreFileRequestType) (*DeleteDatastoreFile_TaskResponse, error) {
	response := &DeleteDatastoreFile_TaskResponse{}
	err := service.client.Call("DeleteDatastoreFile_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidDatastoreFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MakeDirectory(request *MakeDirectoryRequestType) (*MakeDirectoryResponse, error) {
	response := &MakeDirectoryResponse{}
	err := service.client.Call("MakeDirectory", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidDatastoreFault
* - FileFaultFault
* - UserNotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) ChangeOwner(request *ChangeOwnerRequestType) (*ChangeOwnerResponse, error) {
	response := &ChangeOwnerResponse{}
	err := service.client.Call("ChangeOwner", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateFolder(request *CreateFolderRequestType) (*CreateFolderResponse, error) {
	response := &CreateFolderResponse{}
	err := service.client.Call("CreateFolder", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - InvalidFolderFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) MoveIntoFolder_Task(request *MoveIntoFolderRequestType) (*MoveIntoFolder_TaskResponse, error) {
	response := &MoveIntoFolder_TaskResponse{}
	err := service.client.Call("MoveIntoFolder_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - VmConfigFaultFault
* - FileFaultFault
* - OutOfBoundsFault
* - DuplicateNameFault
* - InvalidNameFault
* - InvalidDatastoreFault
* - InsufficientResourcesFaultFault
* - AlreadyExistsFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) CreateVM_Task(request *CreateVMRequestType) (*CreateVM_TaskResponse, error) {
	response := &CreateVM_TaskResponse{}
	err := service.client.Call("CreateVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - OutOfBoundsFault
* - DuplicateNameFault
* - AlreadyExistsFault
* - InvalidDatastoreFault
* - NotFoundFault
* - InvalidNameFault
* - VmConfigFaultFault
* - InsufficientResourcesFaultFault
* - FileFaultFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) RegisterVM_Task(request *RegisterVMRequestType) (*RegisterVM_TaskResponse, error) {
	response := &RegisterVM_TaskResponse{}
	err := service.client.Call("RegisterVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateCluster(request *CreateClusterRequestType) (*CreateClusterResponse, error) {
	response := &CreateClusterResponse{}
	err := service.client.Call("CreateCluster", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateClusterEx(request *CreateClusterExRequestType) (*CreateClusterExResponse, error) {
	response := &CreateClusterExResponse{}
	err := service.client.Call("CreateClusterEx", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - HostConnectFaultFault
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) AddStandaloneHost_Task(request *AddStandaloneHostRequestType) (*AddStandaloneHost_TaskResponse, error) {
	response := &AddStandaloneHost_TaskResponse{}
	err := service.client.Call("AddStandaloneHost_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateDatacenter(request *CreateDatacenterRequestType) (*CreateDatacenterResponse, error) {
	response := &CreateDatacenterResponse{}
	err := service.client.Call("CreateDatacenter", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ConcurrentAccessFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) UnregisterAndDestroy_Task(request *UnregisterAndDestroyRequestType) (*UnregisterAndDestroy_TaskResponse, error) {
	response := &UnregisterAndDestroy_TaskResponse{}
	err := service.client.Call("UnregisterAndDestroy_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - DuplicateNameFault
* - InvalidNameFault
* - NotFoundFault
* - DvsNotAuthorizedFault
* - RuntimeFault
 */
func (service *VimPortType) CreateDVS_Task(request *CreateDVSRequestType) (*CreateDVS_TaskResponse, error) {
	response := &CreateDVS_TaskResponse{}
	err := service.client.Call("CreateDVS_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateStoragePod(request *CreateStoragePodRequestType) (*CreateStoragePodResponse, error) {
	response := &CreateStoragePodResponse{}
	err := service.client.Call("CreateStoragePod", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) SetCollectorPageSize(request *SetCollectorPageSizeRequestType) (*SetCollectorPageSizeResponse, error) {
	response := &SetCollectorPageSizeResponse{}
	err := service.client.Call("SetCollectorPageSize", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RewindCollector(request *RewindCollectorRequestType) (*RewindCollectorResponse, error) {
	response := &RewindCollectorResponse{}
	err := service.client.Call("RewindCollector", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ResetCollector(request *ResetCollectorRequestType) (*ResetCollectorResponse, error) {
	response := &ResetCollectorResponse{}
	err := service.client.Call("ResetCollector", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DestroyCollector(request *DestroyCollectorRequestType) (*DestroyCollectorResponse, error) {
	response := &DestroyCollectorResponse{}
	err := service.client.Call("DestroyCollector", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryTpmAttestationReport(request *QueryTpmAttestationReportRequestType) (*QueryTpmAttestationReportResponse, error) {
	response := &QueryTpmAttestationReportResponse{}
	err := service.client.Call("QueryTpmAttestationReport", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryHostConnectionInfo(request *QueryHostConnectionInfoRequestType) (*QueryHostConnectionInfoResponse, error) {
	response := &QueryHostConnectionInfoResponse{}
	err := service.client.Call("QueryHostConnectionInfo", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateSystemResources(request *UpdateSystemResourcesRequestType) (*UpdateSystemResourcesResponse, error) {
	response := &UpdateSystemResourcesResponse{}
	err := service.client.Call("UpdateSystemResources", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateSystemSwapConfiguration(request *UpdateSystemSwapConfigurationRequestType) (*UpdateSystemSwapConfigurationResponse, error) {
	response := &UpdateSystemSwapConfigurationResponse{}
	err := service.client.Call("UpdateSystemSwapConfiguration", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - InvalidStateFault
* - InvalidNameFault
* - HostConnectFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ReconnectHost_Task(request *ReconnectHostRequestType) (*ReconnectHost_TaskResponse, error) {
	response := &ReconnectHost_TaskResponse{}
	err := service.client.Call("ReconnectHost_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DisconnectHost_Task(request *DisconnectHostRequestType) (*DisconnectHost_TaskResponse, error) {
	response := &DisconnectHost_TaskResponse{}
	err := service.client.Call("DisconnectHost_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - TimedoutFault
* - RuntimeFault
 */
func (service *VimPortType) EnterMaintenanceMode_Task(request *EnterMaintenanceModeRequestType) (*EnterMaintenanceMode_TaskResponse, error) {
	response := &EnterMaintenanceMode_TaskResponse{}
	err := service.client.Call("EnterMaintenanceMode_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - TimedoutFault
* - RuntimeFault
 */
func (service *VimPortType) ExitMaintenanceMode_Task(request *ExitMaintenanceModeRequestType) (*ExitMaintenanceMode_TaskResponse, error) {
	response := &ExitMaintenanceMode_TaskResponse{}
	err := service.client.Call("ExitMaintenanceMode_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) RebootHost_Task(request *RebootHostRequestType) (*RebootHost_TaskResponse, error) {
	response := &RebootHost_TaskResponse{}
	err := service.client.Call("RebootHost_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) ShutdownHost_Task(request *ShutdownHostRequestType) (*ShutdownHost_TaskResponse, error) {
	response := &ShutdownHost_TaskResponse{}
	err := service.client.Call("ShutdownHost_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostPowerOpFailedFault
* - InvalidStateFault
* - NotSupportedFault
* - TimedoutFault
* - RequestCanceledFault
* - RuntimeFault
 */
func (service *VimPortType) PowerDownHostToStandBy_Task(request *PowerDownHostToStandByRequestType) (*PowerDownHostToStandBy_TaskResponse, error) {
	response := &PowerDownHostToStandBy_TaskResponse{}
	err := service.client.Call("PowerDownHostToStandBy_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostPowerOpFailedFault
* - InvalidStateFault
* - NotSupportedFault
* - TimedoutFault
* - RuntimeFault
 */
func (service *VimPortType) PowerUpHostFromStandBy_Task(request *PowerUpHostFromStandByRequestType) (*PowerUpHostFromStandBy_TaskResponse, error) {
	response := &PowerUpHostFromStandBy_TaskResponse{}
	err := service.client.Call("PowerUpHostFromStandBy_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryMemoryOverhead(request *QueryMemoryOverheadRequestType) (*QueryMemoryOverheadResponse, error) {
	response := &QueryMemoryOverheadResponse{}
	err := service.client.Call("QueryMemoryOverhead", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryMemoryOverheadEx(request *QueryMemoryOverheadExRequestType) (*QueryMemoryOverheadExResponse, error) {
	response := &QueryMemoryOverheadExResponse{}
	err := service.client.Call("QueryMemoryOverheadEx", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DasConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureHostForDAS_Task(request *ReconfigureHostForDASRequestType) (*ReconfigureHostForDAS_TaskResponse, error) {
	response := &ReconfigureHostForDAS_TaskResponse{}
	err := service.client.Call("ReconfigureHostForDAS_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateFlags(request *UpdateFlagsRequestType) (*UpdateFlagsResponse, error) {
	response := &UpdateFlagsResponse{}
	err := service.client.Call("UpdateFlags", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) EnterLockdownMode(request *EnterLockdownModeRequestType) (*EnterLockdownModeResponse, error) {
	response := &EnterLockdownModeResponse{}
	err := service.client.Call("EnterLockdownMode", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ExitLockdownMode(request *ExitLockdownModeRequestType) (*ExitLockdownModeResponse, error) {
	response := &ExitLockdownModeResponse{}
	err := service.client.Call("ExitLockdownMode", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AcquireCimServicesTicket(request *AcquireCimServicesTicketRequestType) (*AcquireCimServicesTicketResponse, error) {
	response := &AcquireCimServicesTicketResponse{}
	err := service.client.Call("AcquireCimServicesTicket", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidIpmiLoginInfoFault
* - InvalidIpmiMacAddressFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateIpmi(request *UpdateIpmiRequestType) (*UpdateIpmiResponse, error) {
	response := &UpdateIpmiResponse{}
	err := service.client.Call("UpdateIpmi", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveHardwareUptime(request *RetrieveHardwareUptimeRequestType) (*RetrieveHardwareUptimeResponse, error) {
	response := &RetrieveHardwareUptimeResponse{}
	err := service.client.Call("RetrieveHardwareUptime", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TimedoutFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) HttpNfcLeaseGetManifest(request *HttpNfcLeaseGetManifestRequestType) (*HttpNfcLeaseGetManifestResponse, error) {
	response := &HttpNfcLeaseGetManifestResponse{}
	err := service.client.Call("HttpNfcLeaseGetManifest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TimedoutFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) HttpNfcLeaseComplete(request *HttpNfcLeaseCompleteRequestType) (*HttpNfcLeaseCompleteResponse, error) {
	response := &HttpNfcLeaseCompleteResponse{}
	err := service.client.Call("HttpNfcLeaseComplete", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TimedoutFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) HttpNfcLeaseAbort(request *HttpNfcLeaseAbortRequestType) (*HttpNfcLeaseAbortResponse, error) {
	response := &HttpNfcLeaseAbortResponse{}
	err := service.client.Call("HttpNfcLeaseAbort", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TimedoutFault
* - RuntimeFault
 */
func (service *VimPortType) HttpNfcLeaseProgress(request *HttpNfcLeaseProgressRequestType) (*HttpNfcLeaseProgressResponse, error) {
	response := &HttpNfcLeaseProgressResponse{}
	err := service.client.Call("HttpNfcLeaseProgress", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryIpPools(request *QueryIpPoolsRequestType) (*QueryIpPoolsResponse, error) {
	response := &QueryIpPoolsResponse{}
	err := service.client.Call("QueryIpPools", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CreateIpPool(request *CreateIpPoolRequestType) (*CreateIpPoolResponse, error) {
	response := &CreateIpPoolResponse{}
	err := service.client.Call("CreateIpPool", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateIpPool(request *UpdateIpPoolRequestType) (*UpdateIpPoolResponse, error) {
	response := &UpdateIpPoolResponse{}
	err := service.client.Call("UpdateIpPool", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) DestroyIpPool(request *DestroyIpPoolRequestType) (*DestroyIpPoolResponse, error) {
	response := &DestroyIpPoolResponse{}
	err := service.client.Call("DestroyIpPool", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AllocateIpv4Address(request *AllocateIpv4AddressRequestType) (*AllocateIpv4AddressResponse, error) {
	response := &AllocateIpv4AddressResponse{}
	err := service.client.Call("AllocateIpv4Address", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AllocateIpv6Address(request *AllocateIpv6AddressRequestType) (*AllocateIpv6AddressResponse, error) {
	response := &AllocateIpv6AddressResponse{}
	err := service.client.Call("AllocateIpv6Address", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReleaseIpAllocation(request *ReleaseIpAllocationRequestType) (*ReleaseIpAllocationResponse, error) {
	response := &ReleaseIpAllocationResponse{}
	err := service.client.Call("ReleaseIpAllocation", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryIPAllocations(request *QueryIPAllocationsRequestType) (*QueryIPAllocationsResponse, error) {
	response := &QueryIPAllocationsResponse{}
	err := service.client.Call("QueryIPAllocations", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - LicenseEntityNotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateAssignedLicense(request *UpdateAssignedLicenseRequestType) (*UpdateAssignedLicenseResponse, error) {
	response := &UpdateAssignedLicenseResponse{}
	err := service.client.Call("UpdateAssignedLicense", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - LicenseEntityNotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveAssignedLicense(request *RemoveAssignedLicenseRequestType) (*RemoveAssignedLicenseResponse, error) {
	response := &RemoveAssignedLicenseResponse{}
	err := service.client.Call("RemoveAssignedLicense", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryAssignedLicenses(request *QueryAssignedLicensesRequestType) (*QueryAssignedLicensesResponse, error) {
	response := &QueryAssignedLicensesResponse{}
	err := service.client.Call("QueryAssignedLicenses", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QuerySupportedFeatures(request *QuerySupportedFeaturesRequestType) (*QuerySupportedFeaturesResponse, error) {
	response := &QuerySupportedFeaturesResponse{}
	err := service.client.Call("QuerySupportedFeatures", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryLicenseSourceAvailability(request *QueryLicenseSourceAvailabilityRequestType) (*QueryLicenseSourceAvailabilityResponse, error) {
	response := &QueryLicenseSourceAvailabilityResponse{}
	err := service.client.Call("QueryLicenseSourceAvailability", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryLicenseUsage(request *QueryLicenseUsageRequestType) (*QueryLicenseUsageResponse, error) {
	response := &QueryLicenseUsageResponse{}
	err := service.client.Call("QueryLicenseUsage", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - LicenseServerUnavailableFault
* - RuntimeFault
 */
func (service *VimPortType) SetLicenseEdition(request *SetLicenseEditionRequestType) (*SetLicenseEditionResponse, error) {
	response := &SetLicenseEditionResponse{}
	err := service.client.Call("SetLicenseEdition", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) CheckLicenseFeature(request *CheckLicenseFeatureRequestType) (*CheckLicenseFeatureResponse, error) {
	response := &CheckLicenseFeatureResponse{}
	err := service.client.Call("CheckLicenseFeature", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - LicenseServerUnavailableFault
* - RuntimeFault
 */
func (service *VimPortType) EnableFeature(request *EnableFeatureRequestType) (*EnableFeatureResponse, error) {
	response := &EnableFeatureResponse{}
	err := service.client.Call("EnableFeature", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - LicenseServerUnavailableFault
* - RuntimeFault
 */
func (service *VimPortType) DisableFeature(request *DisableFeatureRequestType) (*DisableFeatureResponse, error) {
	response := &DisableFeatureResponse{}
	err := service.client.Call("DisableFeature", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - CannotAccessLocalSourceFault
* - InvalidLicenseFault
* - LicenseServerUnavailableFault
* - RuntimeFault
 */
func (service *VimPortType) ConfigureLicenseSource(request *ConfigureLicenseSourceRequestType) (*ConfigureLicenseSourceResponse, error) {
	response := &ConfigureLicenseSourceResponse{}
	err := service.client.Call("ConfigureLicenseSource", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateLicense(request *UpdateLicenseRequestType) (*UpdateLicenseResponse, error) {
	response := &UpdateLicenseResponse{}
	err := service.client.Call("UpdateLicense", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AddLicense(request *AddLicenseRequestType) (*AddLicenseResponse, error) {
	response := &AddLicenseResponse{}
	err := service.client.Call("AddLicense", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RemoveLicense(request *RemoveLicenseRequestType) (*RemoveLicenseResponse, error) {
	response := &RemoveLicenseResponse{}
	err := service.client.Call("RemoveLicense", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DecodeLicense(request *DecodeLicenseRequestType) (*DecodeLicenseResponse, error) {
	response := &DecodeLicenseResponse{}
	err := service.client.Call("DecodeLicense", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateLicenseLabel(request *UpdateLicenseLabelRequestType) (*UpdateLicenseLabelResponse, error) {
	response := &UpdateLicenseLabelResponse{}
	err := service.client.Call("UpdateLicenseLabel", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RemoveLicenseLabel(request *RemoveLicenseLabelRequestType) (*RemoveLicenseLabelResponse, error) {
	response := &RemoveLicenseLabelResponse{}
	err := service.client.Call("RemoveLicenseLabel", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) Reload(request *ReloadRequestType) (*ReloadResponse, error) {
	response := &ReloadResponse{}
	err := service.client.Call("Reload", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) Rename_Task(request *RenameRequestType) (*Rename_TaskResponse, error) {
	response := &Rename_TaskResponse{}
	err := service.client.Call("Rename_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - VimFaultFault
* - RuntimeFault
 */
func (service *VimPortType) Destroy_Task(request *DestroyRequestType) (*Destroy_TaskResponse, error) {
	response := &Destroy_TaskResponse{}
	err := service.client.Call("Destroy_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) DestroyNetwork(request *DestroyNetworkRequestType) (*DestroyNetworkResponse, error) {
	response := &DestroyNetworkResponse{}
	err := service.client.Call("DestroyNetwork", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - ConcurrentAccessFault
* - FileFaultFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) ValidateHost(request *ValidateHostRequestType) (*ValidateHostResponse, error) {
	response := &ValidateHostResponse{}
	err := service.client.Call("ValidateHost", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - VmConfigFaultFault
* - ConcurrentAccessFault
* - FileFaultFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) ParseDescriptor(request *ParseDescriptorRequestType) (*ParseDescriptorResponse, error) {
	response := &ParseDescriptorResponse{}
	err := service.client.Call("ParseDescriptor", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - VmConfigFaultFault
* - ConcurrentAccessFault
* - FileFaultFault
* - InvalidStateFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) CreateImportSpec(request *CreateImportSpecRequestType) (*CreateImportSpecResponse, error) {
	response := &CreateImportSpecResponse{}
	err := service.client.Call("CreateImportSpec", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - VmConfigFaultFault
* - ConcurrentAccessFault
* - FileFaultFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) CreateDescriptor(request *CreateDescriptorRequestType) (*CreateDescriptorResponse, error) {
	response := &CreateDescriptorResponse{}
	err := service.client.Call("CreateDescriptor", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryPerfProviderSummary(request *QueryPerfProviderSummaryRequestType) (*QueryPerfProviderSummaryResponse, error) {
	response := &QueryPerfProviderSummaryResponse{}
	err := service.client.Call("QueryPerfProviderSummary", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryAvailablePerfMetric(request *QueryAvailablePerfMetricRequestType) (*QueryAvailablePerfMetricResponse, error) {
	response := &QueryAvailablePerfMetricResponse{}
	err := service.client.Call("QueryAvailablePerfMetric", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryPerfCounter(request *QueryPerfCounterRequestType) (*QueryPerfCounterResponse, error) {
	response := &QueryPerfCounterResponse{}
	err := service.client.Call("QueryPerfCounter", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryPerfCounterByLevel(request *QueryPerfCounterByLevelRequestType) (*QueryPerfCounterByLevelResponse, error) {
	response := &QueryPerfCounterByLevelResponse{}
	err := service.client.Call("QueryPerfCounterByLevel", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryPerf(request *QueryPerfRequestType) (*QueryPerfResponse, error) {
	response := &QueryPerfResponse{}
	err := service.client.Call("QueryPerf", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryPerfComposite(request *QueryPerfCompositeRequestType) (*QueryPerfCompositeResponse, error) {
	response := &QueryPerfCompositeResponse{}
	err := service.client.Call("QueryPerfComposite", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CreatePerfInterval(request *CreatePerfIntervalRequestType) (*CreatePerfIntervalResponse, error) {
	response := &CreatePerfIntervalResponse{}
	err := service.client.Call("CreatePerfInterval", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RemovePerfInterval(request *RemovePerfIntervalRequestType) (*RemovePerfIntervalResponse, error) {
	response := &RemovePerfIntervalResponse{}
	err := service.client.Call("RemovePerfInterval", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdatePerfInterval(request *UpdatePerfIntervalRequestType) (*UpdatePerfIntervalResponse, error) {
	response := &UpdatePerfIntervalResponse{}
	err := service.client.Call("UpdatePerfInterval", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateCounterLevelMapping(request *UpdateCounterLevelMappingRequestType) (*UpdateCounterLevelMappingResponse, error) {
	response := &UpdateCounterLevelMappingResponse{}
	err := service.client.Call("UpdateCounterLevelMapping", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ResetCounterLevelMapping(request *ResetCounterLevelMappingRequestType) (*ResetCounterLevelMappingResponse, error) {
	response := &ResetCounterLevelMappingResponse{}
	err := service.client.Call("ResetCounterLevelMapping", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) EstimateDatabaseSize(request *EstimateDatabaseSizeRequestType) (*EstimateDatabaseSizeResponse, error) {
	response := &EstimateDatabaseSizeResponse{}
	err := service.client.Call("EstimateDatabaseSize", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidNameFault
* - DuplicateNameFault
* - InsufficientResourcesFaultFault
* - ConcurrentAccessFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateConfig(request *UpdateConfigRequestType) (*UpdateConfigResponse, error) {
	response := &UpdateConfigResponse{}
	err := service.client.Call("UpdateConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - InsufficientResourcesFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MoveIntoResourcePool(request *MoveIntoResourcePoolRequestType) (*MoveIntoResourcePoolResponse, error) {
	response := &MoveIntoResourcePoolResponse{}
	err := service.client.Call("MoveIntoResourcePool", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InsufficientResourcesFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateChildResourceConfiguration(request *UpdateChildResourceConfigurationRequestType) (*UpdateChildResourceConfigurationResponse, error) {
	response := &UpdateChildResourceConfigurationResponse{}
	err := service.client.Call("UpdateChildResourceConfiguration", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidNameFault
* - DuplicateNameFault
* - InsufficientResourcesFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CreateResourcePool(request *CreateResourcePoolRequestType) (*CreateResourcePoolResponse, error) {
	response := &CreateResourcePoolResponse{}
	err := service.client.Call("CreateResourcePool", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DestroyChildren(request *DestroyChildrenRequestType) (*DestroyChildrenResponse, error) {
	response := &DestroyChildrenResponse{}
	err := service.client.Call("DestroyChildren", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidNameFault
* - DuplicateNameFault
* - InsufficientResourcesFaultFault
* - InvalidStateFault
* - VmConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CreateVApp(request *CreateVAppRequestType) (*CreateVAppResponse, error) {
	response := &CreateVAppResponse{}
	err := service.client.Call("CreateVApp", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - VmConfigFaultFault
* - FileFaultFault
* - OutOfBoundsFault
* - InvalidNameFault
* - InvalidDatastoreFault
* - InsufficientResourcesFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CreateChildVM_Task(request *CreateChildVMRequestType) (*CreateChildVM_TaskResponse, error) {
	response := &CreateChildVM_TaskResponse{}
	err := service.client.Call("CreateChildVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - OutOfBoundsFault
* - AlreadyExistsFault
* - InvalidDatastoreFault
* - NotFoundFault
* - InvalidNameFault
* - VmConfigFaultFault
* - InsufficientResourcesFaultFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RegisterChildVM_Task(request *RegisterChildVMRequestType) (*RegisterChildVM_TaskResponse, error) {
	response := &RegisterChildVM_TaskResponse{}
	err := service.client.Call("RegisterChildVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - VmConfigFaultFault
* - FileFaultFault
* - OutOfBoundsFault
* - DuplicateNameFault
* - InvalidNameFault
* - InvalidDatastoreFault
* - InsufficientResourcesFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ImportVApp(request *ImportVAppRequestType) (*ImportVAppResponse, error) {
	response := &ImportVAppResponse{}
	err := service.client.Call("ImportVApp", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryResourceConfigOption(request *QueryResourceConfigOptionRequestType) (*QueryResourceConfigOptionResponse, error) {
	response := &QueryResourceConfigOptionResponse{}
	err := service.client.Call("QueryResourceConfigOption", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshRuntime(request *RefreshRuntimeRequestType) (*RefreshRuntimeResponse, error) {
	response := &RefreshRuntimeResponse{}
	err := service.client.Call("RefreshRuntime", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FindByUuid(request *FindByUuidRequestType) (*FindByUuidResponse, error) {
	response := &FindByUuidResponse{}
	err := service.client.Call("FindByUuid", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) FindByDatastorePath(request *FindByDatastorePathRequestType) (*FindByDatastorePathResponse, error) {
	response := &FindByDatastorePathResponse{}
	err := service.client.Call("FindByDatastorePath", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FindByDnsName(request *FindByDnsNameRequestType) (*FindByDnsNameResponse, error) {
	response := &FindByDnsNameResponse{}
	err := service.client.Call("FindByDnsName", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FindByIp(request *FindByIpRequestType) (*FindByIpResponse, error) {
	response := &FindByIpResponse{}
	err := service.client.Call("FindByIp", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FindByInventoryPath(request *FindByInventoryPathRequestType) (*FindByInventoryPathResponse, error) {
	response := &FindByInventoryPathResponse{}
	err := service.client.Call("FindByInventoryPath", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FindChild(request *FindChildRequestType) (*FindChildResponse, error) {
	response := &FindChildResponse{}
	err := service.client.Call("FindChild", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FindAllByUuid(request *FindAllByUuidRequestType) (*FindAllByUuidResponse, error) {
	response := &FindAllByUuidResponse{}
	err := service.client.Call("FindAllByUuid", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FindAllByDnsName(request *FindAllByDnsNameRequestType) (*FindAllByDnsNameResponse, error) {
	response := &FindAllByDnsNameResponse{}
	err := service.client.Call("FindAllByDnsName", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FindAllByIp(request *FindAllByIpRequestType) (*FindAllByIpResponse, error) {
	response := &FindAllByIpResponse{}
	err := service.client.Call("FindAllByIp", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CurrentTime(request *CurrentTimeRequestType) (*CurrentTimeResponse, error) {
	response := &CurrentTimeResponse{}
	err := service.client.Call("CurrentTime", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveServiceContent(request *RetrieveServiceContentRequestType) (*RetrieveServiceContentResponse, error) {
	response := &RetrieveServiceContentResponse{}
	err := service.client.Call("RetrieveServiceContent", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) ValidateMigration(request *ValidateMigrationRequestType) (*ValidateMigrationResponse, error) {
	response := &ValidateMigrationResponse{}
	err := service.client.Call("ValidateMigration", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryVMotionCompatibility(request *QueryVMotionCompatibilityRequestType) (*QueryVMotionCompatibilityResponse, error) {
	response := &QueryVMotionCompatibilityResponse{}
	err := service.client.Call("QueryVMotionCompatibility", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveProductComponents(request *RetrieveProductComponentsRequestType) (*RetrieveProductComponentsResponse, error) {
	response := &RetrieveProductComponentsResponse{}
	err := service.client.Call("RetrieveProductComponents", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryServiceList(request *QueryServiceListRequestType) (*QueryServiceListResponse, error) {
	response := &QueryServiceListResponse{}
	err := service.client.Call("QueryServiceList", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateServiceMessage(request *UpdateServiceMessageRequestType) (*UpdateServiceMessageResponse, error) {
	response := &UpdateServiceMessageResponse{}
	err := service.client.Call("UpdateServiceMessage", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - InvalidLocaleFault
* - RuntimeFault
 */
func (service *VimPortType) LoginByToken(request *LoginByTokenRequestType) (*LoginByTokenResponse, error) {
	response := &LoginByTokenResponse{}
	err := service.client.Call("LoginByToken", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - InvalidLocaleFault
* - RuntimeFault
 */
func (service *VimPortType) Login(request *LoginRequestType) (*LoginResponse, error) {
	response := &LoginResponse{}
	err := service.client.Call("Login", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - SSPIChallengeFault
* - InvalidLoginFault
* - InvalidLocaleFault
* - RuntimeFault
 */
func (service *VimPortType) LoginBySSPI(request *LoginBySSPIRequestType) (*LoginBySSPIResponse, error) {
	response := &LoginBySSPIResponse{}
	err := service.client.Call("LoginBySSPI", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) Logout(request *LogoutRequestType) (*LogoutResponse, error) {
	response := &LogoutResponse{}
	err := service.client.Call("Logout", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - RuntimeFault
 */
func (service *VimPortType) AcquireLocalTicket(request *AcquireLocalTicketRequestType) (*AcquireLocalTicketResponse, error) {
	response := &AcquireLocalTicketResponse{}
	err := service.client.Call("AcquireLocalTicket", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AcquireGenericServiceTicket(request *AcquireGenericServiceTicketRequestType) (*AcquireGenericServiceTicketResponse, error) {
	response := &AcquireGenericServiceTicketResponse{}
	err := service.client.Call("AcquireGenericServiceTicket", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) TerminateSession(request *TerminateSessionRequestType) (*TerminateSessionResponse, error) {
	response := &TerminateSessionResponse{}
	err := service.client.Call("TerminateSession", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLocaleFault
* - RuntimeFault
 */
func (service *VimPortType) SetLocale(request *SetLocaleRequestType) (*SetLocaleResponse, error) {
	response := &SetLocaleResponse{}
	err := service.client.Call("SetLocale", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - InvalidLocaleFault
* - NotFoundFault
* - NoClientCertificateFault
* - NoSubjectNameFault
* - RuntimeFault
 */
func (service *VimPortType) LoginExtensionBySubjectName(request *LoginExtensionBySubjectNameRequestType) (*LoginExtensionBySubjectNameResponse, error) {
	response := &LoginExtensionBySubjectNameResponse{}
	err := service.client.Call("LoginExtensionBySubjectName", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - InvalidLocaleFault
* - NoClientCertificateFault
* - RuntimeFault
 */
func (service *VimPortType) LoginExtensionByCertificate(request *LoginExtensionByCertificateRequestType) (*LoginExtensionByCertificateResponse, error) {
	response := &LoginExtensionByCertificateResponse{}
	err := service.client.Call("LoginExtensionByCertificate", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - InvalidLocaleFault
* - RuntimeFault
 */
func (service *VimPortType) ImpersonateUser(request *ImpersonateUserRequestType) (*ImpersonateUserResponse, error) {
	response := &ImpersonateUserResponse{}
	err := service.client.Call("ImpersonateUser", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) SessionIsActive(request *SessionIsActiveRequestType) (*SessionIsActiveResponse, error) {
	response := &SessionIsActiveResponse{}
	err := service.client.Call("SessionIsActive", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AcquireCloneTicket(request *AcquireCloneTicketRequestType) (*AcquireCloneTicketResponse, error) {
	response := &AcquireCloneTicketResponse{}
	err := service.client.Call("AcquireCloneTicket", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidLoginFault
* - RuntimeFault
 */
func (service *VimPortType) CloneSession(request *CloneSessionRequestType) (*CloneSessionResponse, error) {
	response := &CloneSessionResponse{}
	err := service.client.Call("CloneSession", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ExecuteSimpleCommand(request *ExecuteSimpleCommandRequestType) (*ExecuteSimpleCommandResponse, error) {
	response := &ExecuteSimpleCommandResponse{}
	err := service.client.Call("ExecuteSimpleCommand", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - IORMNotSupportedHostOnDatastoreFault
* - InaccessibleDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) ConfigureDatastoreIORM_Task(request *ConfigureDatastoreIORMRequestType) (*ConfigureDatastoreIORM_TaskResponse, error) {
	response := &ConfigureDatastoreIORM_TaskResponse{}
	err := service.client.Call("ConfigureDatastoreIORM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryIORMConfigOption(request *QueryIORMConfigOptionRequestType) (*QueryIORMConfigOptionResponse, error) {
	response := &QueryIORMConfigOptionResponse{}
	err := service.client.Call("QueryIORMConfigOption", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) QueryDatastorePerformanceSummary(request *QueryDatastorePerformanceSummaryRequestType) (*QueryDatastorePerformanceSummaryResponse, error) {
	response := &QueryDatastorePerformanceSummaryResponse{}
	err := service.client.Call("QueryDatastorePerformanceSummary", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ApplyStorageDrsRecommendationToPod_Task(request *ApplyStorageDrsRecommendationToPodRequestType) (*ApplyStorageDrsRecommendationToPod_TaskResponse, error) {
	response := &ApplyStorageDrsRecommendationToPod_TaskResponse{}
	err := service.client.Call("ApplyStorageDrsRecommendationToPod_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ApplyStorageDrsRecommendation_Task(request *ApplyStorageDrsRecommendationRequestType) (*ApplyStorageDrsRecommendation_TaskResponse, error) {
	response := &ApplyStorageDrsRecommendation_TaskResponse{}
	err := service.client.Call("ApplyStorageDrsRecommendation_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CancelStorageDrsRecommendation(request *CancelStorageDrsRecommendationRequestType) (*CancelStorageDrsRecommendationResponse, error) {
	response := &CancelStorageDrsRecommendationResponse{}
	err := service.client.Call("CancelStorageDrsRecommendation", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshStorageDrsRecommendation(request *RefreshStorageDrsRecommendationRequestType) (*RefreshStorageDrsRecommendationResponse, error) {
	response := &RefreshStorageDrsRecommendationResponse{}
	err := service.client.Call("RefreshStorageDrsRecommendation", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ConfigureStorageDrsForPod_Task(request *ConfigureStorageDrsForPodRequestType) (*ConfigureStorageDrsForPod_TaskResponse, error) {
	response := &ConfigureStorageDrsForPod_TaskResponse{}
	err := service.client.Call("ConfigureStorageDrsForPod_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RecommendDatastores(request *RecommendDatastoresRequestType) (*RecommendDatastoresResponse, error) {
	response := &RecommendDatastoresResponse{}
	err := service.client.Call("RecommendDatastores", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) CancelTask(request *CancelTaskRequestType) (*CancelTaskResponse, error) {
	response := &CancelTaskResponse{}
	err := service.client.Call("CancelTask", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - OutOfBoundsFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateProgress(request *UpdateProgressRequestType) (*UpdateProgressResponse, error) {
	response := &UpdateProgressResponse{}
	err := service.client.Call("UpdateProgress", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) SetTaskState(request *SetTaskStateRequestType) (*SetTaskStateResponse, error) {
	response := &SetTaskStateResponse{}
	err := service.client.Call("SetTaskState", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) SetTaskDescription(request *SetTaskDescriptionRequestType) (*SetTaskDescriptionResponse, error) {
	response := &SetTaskDescriptionResponse{}
	err := service.client.Call("SetTaskDescription", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReadNextTasks(request *ReadNextTasksRequestType) (*ReadNextTasksResponse, error) {
	response := &ReadNextTasksResponse{}
	err := service.client.Call("ReadNextTasks", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReadPreviousTasks(request *ReadPreviousTasksRequestType) (*ReadPreviousTasksResponse, error) {
	response := &ReadPreviousTasksResponse{}
	err := service.client.Call("ReadPreviousTasks", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) CreateCollectorForTasks(request *CreateCollectorForTasksRequestType) (*CreateCollectorForTasksResponse, error) {
	response := &CreateCollectorForTasksResponse{}
	err := service.client.Call("CreateCollectorForTasks", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CreateTask(request *CreateTaskRequestType) (*CreateTaskResponse, error) {
	response := &CreateTaskResponse{}
	err := service.client.Call("CreateTask", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) RetrieveUserGroups(request *RetrieveUserGroupsRequestType) (*RetrieveUserGroupsResponse, error) {
	response := &RetrieveUserGroupsResponse{}
	err := service.client.Call("RetrieveUserGroups", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - VmConfigFaultFault
* - ConcurrentAccessFault
* - FileFaultFault
* - InvalidNameFault
* - DuplicateNameFault
* - InvalidStateFault
* - InsufficientResourcesFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateVAppConfig(request *UpdateVAppConfigRequestType) (*UpdateVAppConfigResponse, error) {
	response := &UpdateVAppConfigResponse{}
	err := service.client.Call("UpdateVAppConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ConcurrentAccessFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateLinkedChildren(request *UpdateLinkedChildrenRequestType) (*UpdateLinkedChildrenResponse, error) {
	response := &UpdateLinkedChildrenResponse{}
	err := service.client.Call("UpdateLinkedChildren", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InvalidDatastoreFault
* - TaskInProgressFault
* - VmConfigFaultFault
* - FileFaultFault
* - MigrationFaultFault
* - InsufficientResourcesFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CloneVApp_Task(request *CloneVAppRequestType) (*CloneVApp_TaskResponse, error) {
	response := &CloneVApp_TaskResponse{}
	err := service.client.Call("CloneVApp_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidPowerStateFault
* - TaskInProgressFault
* - InvalidStateFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ExportVApp(request *ExportVAppRequestType) (*ExportVAppResponse, error) {
	response := &ExportVAppResponse{}
	err := service.client.Call("ExportVApp", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - InsufficientResourcesFaultFault
* - VmConfigFaultFault
* - VAppConfigFaultFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) PowerOnVApp_Task(request *PowerOnVAppRequestType) (*PowerOnVApp_TaskResponse, error) {
	response := &PowerOnVApp_TaskResponse{}
	err := service.client.Call("PowerOnVApp_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - VAppConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) PowerOffVApp_Task(request *PowerOffVAppRequestType) (*PowerOffVApp_TaskResponse, error) {
	response := &PowerOffVApp_TaskResponse{}
	err := service.client.Call("PowerOffVApp_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - VAppConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) SuspendVApp_Task(request *SuspendVAppRequestType) (*SuspendVApp_TaskResponse, error) {
	response := &SuspendVApp_TaskResponse{}
	err := service.client.Call("SuspendVApp_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ConcurrentAccessFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) UnregisterVApp_Task(request *unregisterVAppRequestType) (*unregisterVApp_TaskResponse, error) {
	response := &unregisterVApp_TaskResponse{}
	err := service.client.Call("unregisterVApp_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) CreateVirtualDisk_Task(request *CreateVirtualDiskRequestType) (*CreateVirtualDisk_TaskResponse, error) {
	response := &CreateVirtualDisk_TaskResponse{}
	err := service.client.Call("CreateVirtualDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) DeleteVirtualDisk_Task(request *DeleteVirtualDiskRequestType) (*DeleteVirtualDisk_TaskResponse, error) {
	response := &DeleteVirtualDisk_TaskResponse{}
	err := service.client.Call("DeleteVirtualDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) MoveVirtualDisk_Task(request *MoveVirtualDiskRequestType) (*MoveVirtualDisk_TaskResponse, error) {
	response := &MoveVirtualDisk_TaskResponse{}
	err := service.client.Call("MoveVirtualDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDiskFormatFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) CopyVirtualDisk_Task(request *CopyVirtualDiskRequestType) (*CopyVirtualDisk_TaskResponse, error) {
	response := &CopyVirtualDisk_TaskResponse{}
	err := service.client.Call("CopyVirtualDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) ExtendVirtualDisk_Task(request *ExtendVirtualDiskRequestType) (*ExtendVirtualDisk_TaskResponse, error) {
	response := &ExtendVirtualDisk_TaskResponse{}
	err := service.client.Call("ExtendVirtualDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) QueryVirtualDiskFragmentation(request *QueryVirtualDiskFragmentationRequestType) (*QueryVirtualDiskFragmentationResponse, error) {
	response := &QueryVirtualDiskFragmentationResponse{}
	err := service.client.Call("QueryVirtualDiskFragmentation", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) DefragmentVirtualDisk_Task(request *DefragmentVirtualDiskRequestType) (*DefragmentVirtualDisk_TaskResponse, error) {
	response := &DefragmentVirtualDisk_TaskResponse{}
	err := service.client.Call("DefragmentVirtualDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) ShrinkVirtualDisk_Task(request *ShrinkVirtualDiskRequestType) (*ShrinkVirtualDisk_TaskResponse, error) {
	response := &ShrinkVirtualDisk_TaskResponse{}
	err := service.client.Call("ShrinkVirtualDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) InflateVirtualDisk_Task(request *InflateVirtualDiskRequestType) (*InflateVirtualDisk_TaskResponse, error) {
	response := &InflateVirtualDisk_TaskResponse{}
	err := service.client.Call("InflateVirtualDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) EagerZeroVirtualDisk_Task(request *EagerZeroVirtualDiskRequestType) (*EagerZeroVirtualDisk_TaskResponse, error) {
	response := &EagerZeroVirtualDisk_TaskResponse{}
	err := service.client.Call("EagerZeroVirtualDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) ZeroFillVirtualDisk_Task(request *ZeroFillVirtualDiskRequestType) (*ZeroFillVirtualDisk_TaskResponse, error) {
	response := &ZeroFillVirtualDisk_TaskResponse{}
	err := service.client.Call("ZeroFillVirtualDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) SetVirtualDiskUuid(request *SetVirtualDiskUuidRequestType) (*SetVirtualDiskUuidResponse, error) {
	response := &SetVirtualDiskUuidResponse{}
	err := service.client.Call("SetVirtualDiskUuid", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) QueryVirtualDiskUuid(request *QueryVirtualDiskUuidRequestType) (*QueryVirtualDiskUuidResponse, error) {
	response := &QueryVirtualDiskUuidResponse{}
	err := service.client.Call("QueryVirtualDiskUuid", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) QueryVirtualDiskGeometry(request *QueryVirtualDiskGeometryRequestType) (*QueryVirtualDiskGeometryResponse, error) {
	response := &QueryVirtualDiskGeometryResponse{}
	err := service.client.Call("QueryVirtualDiskGeometry", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshStorageInfo(request *RefreshStorageInfoRequestType) (*RefreshStorageInfoResponse, error) {
	response := &RefreshStorageInfoResponse{}
	err := service.client.Call("RefreshStorageInfo", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - SnapshotFaultFault
* - VmConfigFaultFault
* - FileFaultFault
* - InvalidNameFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) CreateSnapshot_Task(request *CreateSnapshotRequestType) (*CreateSnapshot_TaskResponse, error) {
	response := &CreateSnapshot_TaskResponse{}
	err := service.client.Call("CreateSnapshot_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - SnapshotFaultFault
* - InsufficientResourcesFaultFault
* - InvalidStateFault
* - VmConfigFaultFault
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) RevertToCurrentSnapshot_Task(request *RevertToCurrentSnapshotRequestType) (*RevertToCurrentSnapshot_TaskResponse, error) {
	response := &RevertToCurrentSnapshot_TaskResponse{}
	err := service.client.Call("RevertToCurrentSnapshot_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - SnapshotFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveAllSnapshots_Task(request *RemoveAllSnapshotsRequestType) (*RemoveAllSnapshots_TaskResponse, error) {
	response := &RemoveAllSnapshots_TaskResponse{}
	err := service.client.Call("RemoveAllSnapshots_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - FileFaultFault
* - VmConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ConsolidateVMDisks_Task(request *ConsolidateVMDisksRequestType) (*ConsolidateVMDisks_TaskResponse, error) {
	response := &ConsolidateVMDisks_TaskResponse{}
	err := service.client.Call("ConsolidateVMDisks_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - FileFaultFault
* - VmConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) EstimateStorageForConsolidateSnapshots_Task(request *EstimateStorageForConsolidateSnapshotsRequestType) (*EstimateStorageForConsolidateSnapshots_TaskResponse, error) {
	response := &EstimateStorageForConsolidateSnapshots_TaskResponse{}
	err := service.client.Call("EstimateStorageForConsolidateSnapshots_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - VmConfigFaultFault
* - ConcurrentAccessFault
* - FileFaultFault
* - InvalidNameFault
* - DuplicateNameFault
* - InvalidStateFault
* - InsufficientResourcesFaultFault
* - InvalidDatastoreFault
* - RuntimeFault
 */
func (service *VimPortType) ReconfigVM_Task(request *ReconfigVMRequestType) (*ReconfigVM_TaskResponse, error) {
	response := &ReconfigVM_TaskResponse{}
	err := service.client.Call("ReconfigVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - TaskInProgressFault
* - AlreadyUpgradedFault
* - NoDiskFoundFault
* - RuntimeFault
 */
func (service *VimPortType) UpgradeVM_Task(request *UpgradeVMRequestType) (*UpgradeVM_TaskResponse, error) {
	response := &UpgradeVM_TaskResponse{}
	err := service.client.Call("UpgradeVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) ExtractOvfEnvironment(request *ExtractOvfEnvironmentRequestType) (*ExtractOvfEnvironmentResponse, error) {
	response := &ExtractOvfEnvironmentResponse{}
	err := service.client.Call("ExtractOvfEnvironment", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - InsufficientResourcesFaultFault
* - VmConfigFaultFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) PowerOnVM_Task(request *PowerOnVMRequestType) (*PowerOnVM_TaskResponse, error) {
	response := &PowerOnVM_TaskResponse{}
	err := service.client.Call("PowerOnVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) PowerOffVM_Task(request *PowerOffVMRequestType) (*PowerOffVM_TaskResponse, error) {
	response := &PowerOffVM_TaskResponse{}
	err := service.client.Call("PowerOffVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) SuspendVM_Task(request *SuspendVMRequestType) (*SuspendVM_TaskResponse, error) {
	response := &SuspendVM_TaskResponse{}
	err := service.client.Call("SuspendVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) ResetVM_Task(request *ResetVMRequestType) (*ResetVM_TaskResponse, error) {
	response := &ResetVM_TaskResponse{}
	err := service.client.Call("ResetVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ToolsUnavailableFault
* - TaskInProgressFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) ShutdownGuest(request *ShutdownGuestRequestType) (*ShutdownGuestResponse, error) {
	response := &ShutdownGuestResponse{}
	err := service.client.Call("ShutdownGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ToolsUnavailableFault
* - TaskInProgressFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) RebootGuest(request *RebootGuestRequestType) (*RebootGuestResponse, error) {
	response := &RebootGuestResponse{}
	err := service.client.Call("RebootGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ToolsUnavailableFault
* - TaskInProgressFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) StandbyGuest(request *StandbyGuestRequestType) (*StandbyGuestResponse, error) {
	response := &StandbyGuestResponse{}
	err := service.client.Call("StandbyGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ConcurrentAccessFault
* - RuntimeFault
 */
func (service *VimPortType) AnswerVM(request *AnswerVMRequestType) (*AnswerVMResponse, error) {
	response := &AnswerVMResponse{}
	err := service.client.Call("AnswerVM", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - CustomizationFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CustomizeVM_Task(request *CustomizeVMRequestType) (*CustomizeVM_TaskResponse, error) {
	response := &CustomizeVM_TaskResponse{}
	err := service.client.Call("CustomizeVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - CustomizationFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CheckCustomizationSpec(request *CheckCustomizationSpecRequestType) (*CheckCustomizationSpecResponse, error) {
	response := &CheckCustomizationSpecResponse{}
	err := service.client.Call("CheckCustomizationSpec", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - MigrationFaultFault
* - FileFaultFault
* - TimedoutFault
* - InsufficientResourcesFaultFault
* - InvalidStateFault
* - VmConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MigrateVM_Task(request *MigrateVMRequestType) (*MigrateVM_TaskResponse, error) {
	response := &MigrateVM_TaskResponse{}
	err := service.client.Call("MigrateVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InvalidDatastoreFault
* - MigrationFaultFault
* - VmConfigFaultFault
* - FileFaultFault
* - TimedoutFault
* - InsufficientResourcesFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RelocateVM_Task(request *RelocateVMRequestType) (*RelocateVM_TaskResponse, error) {
	response := &RelocateVM_TaskResponse{}
	err := service.client.Call("RelocateVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - CustomizationFaultFault
* - InvalidStateFault
* - InvalidDatastoreFault
* - TaskInProgressFault
* - VmConfigFaultFault
* - FileFaultFault
* - MigrationFaultFault
* - InsufficientResourcesFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CloneVM_Task(request *CloneVMRequestType) (*CloneVM_TaskResponse, error) {
	response := &CloneVM_TaskResponse{}
	err := service.client.Call("CloneVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidPowerStateFault
* - TaskInProgressFault
* - InvalidStateFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ExportVm(request *ExportVmRequestType) (*ExportVmResponse, error) {
	response := &ExportVmResponse{}
	err := service.client.Call("ExportVm", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - VmConfigFaultFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MarkAsTemplate(request *MarkAsTemplateRequestType) (*MarkAsTemplateResponse, error) {
	response := &MarkAsTemplateResponse{}
	err := service.client.Call("MarkAsTemplate", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InvalidDatastoreFault
* - VmConfigFaultFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MarkAsVirtualMachine(request *MarkAsVirtualMachineRequestType) (*MarkAsVirtualMachineResponse, error) {
	response := &MarkAsVirtualMachineResponse{}
	err := service.client.Call("MarkAsVirtualMachine", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidPowerStateFault
* - RuntimeFault
 */
func (service *VimPortType) UnregisterVM(request *UnregisterVMRequestType) (*UnregisterVMResponse, error) {
	response := &UnregisterVMResponse{}
	err := service.client.Call("UnregisterVM", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) ResetGuestInformation(request *ResetGuestInformationRequestType) (*ResetGuestInformationResponse, error) {
	response := &ResetGuestInformationResponse{}
	err := service.client.Call("ResetGuestInformation", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - VmConfigFaultFault
* - VmToolsUpgradeFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MountToolsInstaller(request *MountToolsInstallerRequestType) (*MountToolsInstallerResponse, error) {
	response := &MountToolsInstallerResponse{}
	err := service.client.Call("MountToolsInstaller", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - VmConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UnmountToolsInstaller(request *UnmountToolsInstallerRequestType) (*UnmountToolsInstallerResponse, error) {
	response := &UnmountToolsInstallerResponse{}
	err := service.client.Call("UnmountToolsInstaller", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - TaskInProgressFault
* - VmToolsUpgradeFaultFault
* - ToolsUnavailableFault
* - VmConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpgradeTools_Task(request *UpgradeToolsRequestType) (*UpgradeTools_TaskResponse, error) {
	response := &UpgradeTools_TaskResponse{}
	err := service.client.Call("UpgradeTools_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AcquireMksTicket(request *AcquireMksTicketRequestType) (*AcquireMksTicketResponse, error) {
	response := &AcquireMksTicketResponse{}
	err := service.client.Call("AcquireMksTicket", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) AcquireTicket(request *AcquireTicketRequestType) (*AcquireTicketResponse, error) {
	response := &AcquireTicketResponse{}
	err := service.client.Call("AcquireTicket", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - ToolsUnavailableFault
* - RuntimeFault
 */
func (service *VimPortType) SetScreenResolution(request *SetScreenResolutionRequestType) (*SetScreenResolutionResponse, error) {
	response := &SetScreenResolutionResponse{}
	err := service.client.Call("SetScreenResolution", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InvalidPowerStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DefragmentAllDisks(request *DefragmentAllDisksRequestType) (*DefragmentAllDisksResponse, error) {
	response := &DefragmentAllDisksResponse{}
	err := service.client.Call("DefragmentAllDisks", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - InsufficientResourcesFaultFault
* - VmFaultToleranceIssueFault
* - FileFaultFault
* - VmConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CreateSecondaryVM_Task(request *CreateSecondaryVMRequestType) (*CreateSecondaryVM_TaskResponse, error) {
	response := &CreateSecondaryVM_TaskResponse{}
	err := service.client.Call("CreateSecondaryVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - VmFaultToleranceIssueFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) TurnOffFaultToleranceForVM_Task(request *TurnOffFaultToleranceForVMRequestType) (*TurnOffFaultToleranceForVM_TaskResponse, error) {
	response := &TurnOffFaultToleranceForVM_TaskResponse{}
	err := service.client.Call("TurnOffFaultToleranceForVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - VmFaultToleranceIssueFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) MakePrimaryVM_Task(request *MakePrimaryVMRequestType) (*MakePrimaryVM_TaskResponse, error) {
	response := &MakePrimaryVM_TaskResponse{}
	err := service.client.Call("MakePrimaryVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - VmFaultToleranceIssueFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) TerminateFaultTolerantVM_Task(request *TerminateFaultTolerantVMRequestType) (*TerminateFaultTolerantVM_TaskResponse, error) {
	response := &TerminateFaultTolerantVM_TaskResponse{}
	err := service.client.Call("TerminateFaultTolerantVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - VmFaultToleranceIssueFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) DisableSecondaryVM_Task(request *DisableSecondaryVMRequestType) (*DisableSecondaryVM_TaskResponse, error) {
	response := &DisableSecondaryVM_TaskResponse{}
	err := service.client.Call("DisableSecondaryVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - VmFaultToleranceIssueFault
* - InvalidStateFault
* - VmConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) EnableSecondaryVM_Task(request *EnableSecondaryVMRequestType) (*EnableSecondaryVM_TaskResponse, error) {
	response := &EnableSecondaryVM_TaskResponse{}
	err := service.client.Call("EnableSecondaryVM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - ToolsUnavailableFault
* - RuntimeFault
 */
func (service *VimPortType) SetDisplayTopology(request *SetDisplayTopologyRequestType) (*SetDisplayTopologyResponse, error) {
	response := &SetDisplayTopologyResponse{}
	err := service.client.Call("SetDisplayTopology", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InvalidPowerStateFault
* - TaskInProgressFault
* - FileFaultFault
* - SnapshotFaultFault
* - VmConfigFaultFault
* - RecordReplayDisabledFault
* - HostIncompatibleForRecordReplayFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) StartRecording_Task(request *StartRecordingRequestType) (*StartRecording_TaskResponse, error) {
	response := &StartRecording_TaskResponse{}
	err := service.client.Call("StartRecording_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InvalidPowerStateFault
* - TaskInProgressFault
* - FileFaultFault
* - SnapshotFaultFault
* - RuntimeFault
 */
func (service *VimPortType) StopRecording_Task(request *StopRecordingRequestType) (*StopRecording_TaskResponse, error) {
	response := &StopRecording_TaskResponse{}
	err := service.client.Call("StopRecording_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InvalidPowerStateFault
* - TaskInProgressFault
* - FileFaultFault
* - SnapshotFaultFault
* - NotFoundFault
* - VmConfigFaultFault
* - RecordReplayDisabledFault
* - HostIncompatibleForRecordReplayFault
* - RuntimeFault
 */
func (service *VimPortType) StartReplaying_Task(request *StartReplayingRequestType) (*StartReplaying_TaskResponse, error) {
	response := &StartReplaying_TaskResponse{}
	err := service.client.Call("StartReplaying_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InvalidPowerStateFault
* - TaskInProgressFault
* - FileFaultFault
* - SnapshotFaultFault
* - RuntimeFault
 */
func (service *VimPortType) StopReplaying_Task(request *StopReplayingRequestType) (*StopReplaying_TaskResponse, error) {
	response := &StopReplaying_TaskResponse{}
	err := service.client.Call("StopReplaying_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InvalidPowerStateFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) PromoteDisks_Task(request *PromoteDisksRequestType) (*PromoteDisks_TaskResponse, error) {
	response := &PromoteDisks_TaskResponse{}
	err := service.client.Call("PromoteDisks_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - FileFaultFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) CreateScreenshot_Task(request *CreateScreenshotRequestType) (*CreateScreenshot_TaskResponse, error) {
	response := &CreateScreenshot_TaskResponse{}
	err := service.client.Call("CreateScreenshot_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileFaultFault
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) QueryChangedDiskAreas(request *QueryChangedDiskAreasRequestType) (*QueryChangedDiskAreasResponse, error) {
	response := &QueryChangedDiskAreasResponse{}
	err := service.client.Call("QueryChangedDiskAreas", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryUnownedFiles(request *QueryUnownedFilesRequestType) (*QueryUnownedFilesResponse, error) {
	response := &QueryUnownedFilesResponse{}
	err := service.client.Call("QueryUnownedFiles", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidPowerStateFault
* - TaskInProgressFault
* - FileFaultFault
* - InvalidStateFault
* - VmConfigFaultFault
* - AlreadyExistsFault
* - RuntimeFault
 */
func (service *VimPortType) ReloadVirtualMachineFromPath_Task(request *reloadVirtualMachineFromPathRequestType) (*reloadVirtualMachineFromPath_TaskResponse, error) {
	response := &reloadVirtualMachineFromPath_TaskResponse{}
	err := service.client.Call("reloadVirtualMachineFromPath_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - VmConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryFaultToleranceCompatibility(request *QueryFaultToleranceCompatibilityRequestType) (*QueryFaultToleranceCompatibilityResponse, error) {
	response := &QueryFaultToleranceCompatibilityResponse{}
	err := service.client.Call("QueryFaultToleranceCompatibility", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) TerminateVM(request *TerminateVMRequestType) (*TerminateVMResponse, error) {
	response := &TerminateVMResponse{}
	err := service.client.Call("TerminateVM", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RemoveAlarm(request *RemoveAlarmRequestType) (*RemoveAlarmResponse, error) {
	response := &RemoveAlarmResponse{}
	err := service.client.Call("RemoveAlarm", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidNameFault
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureAlarm(request *ReconfigureAlarmRequestType) (*ReconfigureAlarmResponse, error) {
	response := &ReconfigureAlarmResponse{}
	err := service.client.Call("ReconfigureAlarm", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidNameFault
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateAlarm(request *CreateAlarmRequestType) (*CreateAlarmResponse, error) {
	response := &CreateAlarmResponse{}
	err := service.client.Call("CreateAlarm", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) GetAlarm(request *GetAlarmRequestType) (*GetAlarmResponse, error) {
	response := &GetAlarmResponse{}
	err := service.client.Call("GetAlarm", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AreAlarmActionsEnabled(request *AreAlarmActionsEnabledRequestType) (*AreAlarmActionsEnabledResponse, error) {
	response := &AreAlarmActionsEnabledResponse{}
	err := service.client.Call("AreAlarmActionsEnabled", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) EnableAlarmActions(request *EnableAlarmActionsRequestType) (*EnableAlarmActionsResponse, error) {
	response := &EnableAlarmActionsResponse{}
	err := service.client.Call("EnableAlarmActions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) GetAlarmState(request *GetAlarmStateRequestType) (*GetAlarmStateResponse, error) {
	response := &GetAlarmStateResponse{}
	err := service.client.Call("GetAlarmState", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AcknowledgeAlarm(request *AcknowledgeAlarmRequestType) (*AcknowledgeAlarmResponse, error) {
	response := &AcknowledgeAlarmResponse{}
	err := service.client.Call("AcknowledgeAlarm", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - ConcurrentAccessFault
* - DuplicateNameFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureDVPortgroup_Task(request *ReconfigureDVPortgroupRequestType) (*ReconfigureDVPortgroup_TaskResponse, error) {
	response := &ReconfigureDVPortgroup_TaskResponse{}
	err := service.client.Call("ReconfigureDVPortgroup_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - RollbackFailureFault
* - RuntimeFault
 */
func (service *VimPortType) DVPortgroupRollback_Task(request *DVPortgroupRollbackRequestType) (*DVPortgroupRollback_TaskResponse, error) {
	response := &DVPortgroupRollback_TaskResponse{}
	err := service.client.Call("DVPortgroupRollback_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryAvailableDvsSpec(request *QueryAvailableDvsSpecRequestType) (*QueryAvailableDvsSpecResponse, error) {
	response := &QueryAvailableDvsSpecResponse{}
	err := service.client.Call("QueryAvailableDvsSpec", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryCompatibleHostForNewDvs(request *QueryCompatibleHostForNewDvsRequestType) (*QueryCompatibleHostForNewDvsResponse, error) {
	response := &QueryCompatibleHostForNewDvsResponse{}
	err := service.client.Call("QueryCompatibleHostForNewDvs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryCompatibleHostForExistingDvs(request *QueryCompatibleHostForExistingDvsRequestType) (*QueryCompatibleHostForExistingDvsResponse, error) {
	response := &QueryCompatibleHostForExistingDvsResponse{}
	err := service.client.Call("QueryCompatibleHostForExistingDvs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryDvsCompatibleHostSpec(request *QueryDvsCompatibleHostSpecRequestType) (*QueryDvsCompatibleHostSpecResponse, error) {
	response := &QueryDvsCompatibleHostSpecResponse{}
	err := service.client.Call("QueryDvsCompatibleHostSpec", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryDvsFeatureCapability(request *QueryDvsFeatureCapabilityRequestType) (*QueryDvsFeatureCapabilityResponse, error) {
	response := &QueryDvsFeatureCapabilityResponse{}
	err := service.client.Call("QueryDvsFeatureCapability", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) QueryDvsByUuid(request *QueryDvsByUuidRequestType) (*QueryDvsByUuidResponse, error) {
	response := &QueryDvsByUuidResponse{}
	err := service.client.Call("QueryDvsByUuid", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryDvsConfigTarget(request *QueryDvsConfigTargetRequestType) (*QueryDvsConfigTargetResponse, error) {
	response := &QueryDvsConfigTargetResponse{}
	err := service.client.Call("QueryDvsConfigTarget", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryDvsCheckCompatibility(request *QueryDvsCheckCompatibilityRequestType) (*QueryDvsCheckCompatibilityResponse, error) {
	response := &QueryDvsCheckCompatibilityResponse{}
	err := service.client.Call("QueryDvsCheckCompatibility", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RectifyDvsOnHost_Task(request *RectifyDvsOnHostRequestType) (*RectifyDvsOnHost_TaskResponse, error) {
	response := &RectifyDvsOnHost_TaskResponse{}
	err := service.client.Call("RectifyDvsOnHost_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - BackupBlobWriteFailureFault
* - RuntimeFault
 */
func (service *VimPortType) DVSManagerExportEntity_Task(request *DVSManagerExportEntityRequestType) (*DVSManagerExportEntity_TaskResponse, error) {
	response := &DVSManagerExportEntity_TaskResponse{}
	err := service.client.Call("DVSManagerExportEntity_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) DVSManagerImportEntity_Task(request *DVSManagerImportEntityRequestType) (*DVSManagerImportEntity_TaskResponse, error) {
	response := &DVSManagerImportEntity_TaskResponse{}
	err := service.client.Call("DVSManagerImportEntity_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) DVSManagerLookupDvPortGroup(request *DVSManagerLookupDvPortGroupRequestType) (*DVSManagerLookupDvPortGroupResponse, error) {
	response := &DVSManagerLookupDvPortGroupResponse{}
	err := service.client.Call("DVSManagerLookupDvPortGroup", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DvsFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateDVSLacpGroupConfig_Task(request *UpdateDVSLacpGroupConfigRequestType) (*UpdateDVSLacpGroupConfig_TaskResponse, error) {
	response := &UpdateDVSLacpGroupConfig_TaskResponse{}
	err := service.client.Call("UpdateDVSLacpGroupConfig_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReadNextEvents(request *ReadNextEventsRequestType) (*ReadNextEventsResponse, error) {
	response := &ReadNextEventsResponse{}
	err := service.client.Call("ReadNextEvents", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReadPreviousEvents(request *ReadPreviousEventsRequestType) (*ReadPreviousEventsResponse, error) {
	response := &ReadPreviousEventsResponse{}
	err := service.client.Call("ReadPreviousEvents", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveArgumentDescription(request *RetrieveArgumentDescriptionRequestType) (*RetrieveArgumentDescriptionResponse, error) {
	response := &RetrieveArgumentDescriptionResponse{}
	err := service.client.Call("RetrieveArgumentDescription", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) CreateCollectorForEvents(request *CreateCollectorForEventsRequestType) (*CreateCollectorForEventsResponse, error) {
	response := &CreateCollectorForEventsResponse{}
	err := service.client.Call("CreateCollectorForEvents", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) LogUserEvent(request *LogUserEventRequestType) (*LogUserEventResponse, error) {
	response := &LogUserEventResponse{}
	err := service.client.Call("LogUserEvent", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryEvents(request *QueryEventsRequestType) (*QueryEventsResponse, error) {
	response := &QueryEventsResponse{}
	err := service.client.Call("QueryEvents", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidEventFault
* - RuntimeFault
 */
func (service *VimPortType) PostEvent(request *PostEventRequestType) (*PostEventResponse, error) {
	response := &PostEventResponse{}
	err := service.client.Call("PostEvent", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - HostConfigFaultFault
* - InvalidLoginFault
* - ActiveDirectoryFaultFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) JoinDomain_Task(request *JoinDomainRequestType) (*JoinDomain_TaskResponse, error) {
	response := &JoinDomain_TaskResponse{}
	err := service.client.Call("JoinDomain_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - HostConfigFaultFault
* - ActiveDirectoryFaultFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) JoinDomainWithCAM_Task(request *JoinDomainWithCAMRequestType) (*JoinDomainWithCAM_TaskResponse, error) {
	response := &JoinDomainWithCAM_TaskResponse{}
	err := service.client.Call("JoinDomainWithCAM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FileNotFoundFault
* - ActiveDirectoryFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ImportCertificateForCAM_Task(request *ImportCertificateForCAMRequestType) (*ImportCertificateForCAM_TaskResponse, error) {
	response := &ImportCertificateForCAM_TaskResponse{}
	err := service.client.Call("ImportCertificateForCAM_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - AuthMinimumAdminPermissionFault
* - ActiveDirectoryFaultFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) LeaveCurrentDomain_Task(request *LeaveCurrentDomainRequestType) (*LeaveCurrentDomain_TaskResponse, error) {
	response := &LeaveCurrentDomain_TaskResponse{}
	err := service.client.Call("LeaveCurrentDomain_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureAutostart(request *ReconfigureAutostartRequestType) (*ReconfigureAutostartResponse, error) {
	response := &ReconfigureAutostartResponse{}
	err := service.client.Call("ReconfigureAutostart", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AutoStartPowerOn(request *AutoStartPowerOnRequestType) (*AutoStartPowerOnResponse, error) {
	response := &AutoStartPowerOnResponse{}
	err := service.client.Call("AutoStartPowerOn", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AutoStartPowerOff(request *AutoStartPowerOffRequestType) (*AutoStartPowerOffResponse, error) {
	response := &AutoStartPowerOffResponse{}
	err := service.client.Call("AutoStartPowerOff", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryBootDevices(request *QueryBootDevicesRequestType) (*QueryBootDevicesResponse, error) {
	response := &QueryBootDevicesResponse{}
	err := service.client.Call("QueryBootDevices", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateBootDevice(request *UpdateBootDeviceRequestType) (*UpdateBootDeviceResponse, error) {
	response := &UpdateBootDeviceResponse{}
	err := service.client.Call("UpdateBootDevice", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ConfigureHostCache_Task(request *ConfigureHostCacheRequestType) (*ConfigureHostCache_TaskResponse, error) {
	response := &ConfigureHostCache_TaskResponse{}
	err := service.client.Call("ConfigureHostCache_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) EnableHyperThreading(request *EnableHyperThreadingRequestType) (*EnableHyperThreadingResponse, error) {
	response := &EnableHyperThreadingResponse{}
	err := service.client.Call("EnableHyperThreading", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DisableHyperThreading(request *DisableHyperThreadingRequestType) (*DisableHyperThreadingResponse, error) {
	response := &DisableHyperThreadingResponse{}
	err := service.client.Call("DisableHyperThreading", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidDatastoreFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) SearchDatastore_Task(request *SearchDatastoreRequestType) (*SearchDatastore_TaskResponse, error) {
	response := &SearchDatastore_TaskResponse{}
	err := service.client.Call("SearchDatastore_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidDatastoreFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) SearchDatastoreSubFolders_Task(request *SearchDatastoreSubFoldersRequestType) (*SearchDatastoreSubFolders_TaskResponse, error) {
	response := &SearchDatastoreSubFolders_TaskResponse{}
	err := service.client.Call("SearchDatastoreSubFolders_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidDatastoreFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DeleteFile(request *DeleteFileRequestType) (*DeleteFileResponse, error) {
	response := &DeleteFileResponse{}
	err := service.client.Call("DeleteFile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InaccessibleDatastoreFault
* - DatastoreNotWritableOnHostFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateLocalSwapDatastore(request *UpdateLocalSwapDatastoreRequestType) (*UpdateLocalSwapDatastoreResponse, error) {
	response := &UpdateLocalSwapDatastoreResponse{}
	err := service.client.Call("UpdateLocalSwapDatastore", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryAvailableDisksForVmfs(request *QueryAvailableDisksForVmfsRequestType) (*QueryAvailableDisksForVmfsResponse, error) {
	response := &QueryAvailableDisksForVmfsResponse{}
	err := service.client.Call("QueryAvailableDisksForVmfs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryVmfsDatastoreCreateOptions(request *QueryVmfsDatastoreCreateOptionsRequestType) (*QueryVmfsDatastoreCreateOptionsResponse, error) {
	response := &QueryVmfsDatastoreCreateOptionsResponse{}
	err := service.client.Call("QueryVmfsDatastoreCreateOptions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CreateVmfsDatastore(request *CreateVmfsDatastoreRequestType) (*CreateVmfsDatastoreResponse, error) {
	response := &CreateVmfsDatastoreResponse{}
	err := service.client.Call("CreateVmfsDatastore", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryVmfsDatastoreExtendOptions(request *QueryVmfsDatastoreExtendOptionsRequestType) (*QueryVmfsDatastoreExtendOptionsResponse, error) {
	response := &QueryVmfsDatastoreExtendOptionsResponse{}
	err := service.client.Call("QueryVmfsDatastoreExtendOptions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryVmfsDatastoreExpandOptions(request *QueryVmfsDatastoreExpandOptionsRequestType) (*QueryVmfsDatastoreExpandOptionsResponse, error) {
	response := &QueryVmfsDatastoreExpandOptionsResponse{}
	err := service.client.Call("QueryVmfsDatastoreExpandOptions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ExtendVmfsDatastore(request *ExtendVmfsDatastoreRequestType) (*ExtendVmfsDatastoreResponse, error) {
	response := &ExtendVmfsDatastoreResponse{}
	err := service.client.Call("ExtendVmfsDatastore", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ExpandVmfsDatastore(request *ExpandVmfsDatastoreRequestType) (*ExpandVmfsDatastoreResponse, error) {
	response := &ExpandVmfsDatastoreResponse{}
	err := service.client.Call("ExpandVmfsDatastore", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - AlreadyExistsFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CreateNasDatastore(request *CreateNasDatastoreRequestType) (*CreateNasDatastoreResponse, error) {
	response := &CreateNasDatastoreResponse{}
	err := service.client.Call("CreateNasDatastore", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - HostConfigFaultFault
* - FileNotFoundFault
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateLocalDatastore(request *CreateLocalDatastoreRequestType) (*CreateLocalDatastoreResponse, error) {
	response := &CreateLocalDatastoreResponse{}
	err := service.client.Call("CreateLocalDatastore", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveDatastore(request *RemoveDatastoreRequestType) (*RemoveDatastoreResponse, error) {
	response := &RemoveDatastoreResponse{}
	err := service.client.Call("RemoveDatastore", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ConfigureDatastorePrincipal(request *ConfigureDatastorePrincipalRequestType) (*ConfigureDatastorePrincipalResponse, error) {
	response := &ConfigureDatastorePrincipalResponse{}
	err := service.client.Call("ConfigureDatastorePrincipal", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryUnresolvedVmfsVolumes(request *QueryUnresolvedVmfsVolumesRequestType) (*QueryUnresolvedVmfsVolumesResponse, error) {
	response := &QueryUnresolvedVmfsVolumesResponse{}
	err := service.client.Call("QueryUnresolvedVmfsVolumes", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - VmfsAmbiguousMountFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ResignatureUnresolvedVmfsVolume_Task(request *ResignatureUnresolvedVmfsVolumeRequestType) (*ResignatureUnresolvedVmfsVolume_TaskResponse, error) {
	response := &ResignatureUnresolvedVmfsVolume_TaskResponse{}
	err := service.client.Call("ResignatureUnresolvedVmfsVolume_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateDateTimeConfig(request *UpdateDateTimeConfigRequestType) (*UpdateDateTimeConfigResponse, error) {
	response := &UpdateDateTimeConfigResponse{}
	err := service.client.Call("UpdateDateTimeConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryAvailableTimeZones(request *QueryAvailableTimeZonesRequestType) (*QueryAvailableTimeZonesResponse, error) {
	response := &QueryAvailableTimeZonesResponse{}
	err := service.client.Call("QueryAvailableTimeZones", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryDateTime(request *QueryDateTimeRequestType) (*QueryDateTimeResponse, error) {
	response := &QueryDateTimeResponse{}
	err := service.client.Call("QueryDateTime", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateDateTime(request *UpdateDateTimeRequestType) (*UpdateDateTimeResponse, error) {
	response := &UpdateDateTimeResponse{}
	err := service.client.Call("UpdateDateTime", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshDateTimeSystem(request *RefreshDateTimeSystemRequestType) (*RefreshDateTimeSystemResponse, error) {
	response := &RefreshDateTimeSystemResponse{}
	err := service.client.Call("RefreshDateTimeSystem", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryAvailablePartition(request *QueryAvailablePartitionRequestType) (*QueryAvailablePartitionResponse, error) {
	response := &QueryAvailablePartitionResponse{}
	err := service.client.Call("QueryAvailablePartition", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) SelectActivePartition(request *SelectActivePartitionRequestType) (*SelectActivePartitionResponse, error) {
	response := &SelectActivePartitionResponse{}
	err := service.client.Call("SelectActivePartition", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryPartitionCreateOptions(request *QueryPartitionCreateOptionsRequestType) (*QueryPartitionCreateOptionsResponse, error) {
	response := &QueryPartitionCreateOptionsResponse{}
	err := service.client.Call("QueryPartitionCreateOptions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryPartitionCreateDesc(request *QueryPartitionCreateDescRequestType) (*QueryPartitionCreateDescResponse, error) {
	response := &QueryPartitionCreateDescResponse{}
	err := service.client.Call("QueryPartitionCreateDesc", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CreateDiagnosticPartition(request *CreateDiagnosticPartitionRequestType) (*CreateDiagnosticPartitionResponse, error) {
	response := &CreateDiagnosticPartitionResponse{}
	err := service.client.Call("CreateDiagnosticPartition", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) EsxAgentHostManagerUpdateConfig(request *EsxAgentHostManagerUpdateConfigRequestType) (*EsxAgentHostManagerUpdateConfigResponse, error) {
	response := &EsxAgentHostManagerUpdateConfigResponse{}
	err := service.client.Call("EsxAgentHostManagerUpdateConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateDefaultPolicy(request *UpdateDefaultPolicyRequestType) (*UpdateDefaultPolicyResponse, error) {
	response := &UpdateDefaultPolicyResponse{}
	err := service.client.Call("UpdateDefaultPolicy", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) EnableRuleset(request *EnableRulesetRequestType) (*EnableRulesetResponse, error) {
	response := &EnableRulesetResponse{}
	err := service.client.Call("EnableRuleset", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DisableRuleset(request *DisableRulesetRequestType) (*DisableRulesetResponse, error) {
	response := &DisableRulesetResponse{}
	err := service.client.Call("DisableRuleset", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateRuleset(request *UpdateRulesetRequestType) (*UpdateRulesetResponse, error) {
	response := &UpdateRulesetResponse{}
	err := service.client.Call("UpdateRuleset", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshFirewall(request *RefreshFirewallRequestType) (*RefreshFirewallResponse, error) {
	response := &RefreshFirewallResponse{}
	err := service.client.Call("RefreshFirewall", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) ResetFirmwareToFactoryDefaults(request *ResetFirmwareToFactoryDefaultsRequestType) (*ResetFirmwareToFactoryDefaultsResponse, error) {
	response := &ResetFirmwareToFactoryDefaultsResponse{}
	err := service.client.Call("ResetFirmwareToFactoryDefaults", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) BackupFirmwareConfiguration(request *BackupFirmwareConfigurationRequestType) (*BackupFirmwareConfigurationResponse, error) {
	response := &BackupFirmwareConfigurationResponse{}
	err := service.client.Call("BackupFirmwareConfiguration", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryFirmwareConfigUploadURL(request *QueryFirmwareConfigUploadURLRequestType) (*QueryFirmwareConfigUploadURLResponse, error) {
	response := &QueryFirmwareConfigUploadURLResponse{}
	err := service.client.Call("QueryFirmwareConfigUploadURL", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - FileFaultFault
* - MismatchedBundleFault
* - InvalidBundleFault
* - RuntimeFault
 */
func (service *VimPortType) RestoreFirmwareConfiguration(request *RestoreFirmwareConfigurationRequestType) (*RestoreFirmwareConfigurationResponse, error) {
	response := &RestoreFirmwareConfigurationResponse{}
	err := service.client.Call("RestoreFirmwareConfiguration", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshGraphicsManager(request *RefreshGraphicsManagerRequestType) (*RefreshGraphicsManagerResponse, error) {
	response := &RefreshGraphicsManagerResponse{}
	err := service.client.Call("RefreshGraphicsManager", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) IsSharedGraphicsActive(request *IsSharedGraphicsActiveRequestType) (*IsSharedGraphicsActiveResponse, error) {
	response := &IsSharedGraphicsActiveResponse{}
	err := service.client.Call("IsSharedGraphicsActive", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshHealthStatusSystem(request *RefreshHealthStatusSystemRequestType) (*RefreshHealthStatusSystemResponse, error) {
	response := &RefreshHealthStatusSystemResponse{}
	err := service.client.Call("RefreshHealthStatusSystem", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ResetSystemHealthInfo(request *ResetSystemHealthInfoRequestType) (*ResetSystemHealthInfoResponse, error) {
	response := &ResetSystemHealthInfoResponse{}
	err := service.client.Call("ResetSystemHealthInfo", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) HostImageConfigGetAcceptance(request *HostImageConfigGetAcceptanceRequestType) (*HostImageConfigGetAcceptanceResponse, error) {
	response := &HostImageConfigGetAcceptanceResponse{}
	err := service.client.Call("HostImageConfigGetAcceptance", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) HostImageConfigGetProfile(request *HostImageConfigGetProfileRequestType) (*HostImageConfigGetProfileResponse, error) {
	response := &HostImageConfigGetProfileResponse{}
	err := service.client.Call("HostImageConfigGetProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateHostImageAcceptanceLevel(request *UpdateHostImageAcceptanceLevelRequestType) (*UpdateHostImageAcceptanceLevelResponse, error) {
	response := &UpdateHostImageAcceptanceLevelResponse{}
	err := service.client.Call("UpdateHostImageAcceptanceLevel", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - IscsiFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryVnicStatus(request *QueryVnicStatusRequestType) (*QueryVnicStatusResponse, error) {
	response := &QueryVnicStatusResponse{}
	err := service.client.Call("QueryVnicStatus", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - IscsiFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryPnicStatus(request *QueryPnicStatusRequestType) (*QueryPnicStatusResponse, error) {
	response := &QueryPnicStatusResponse{}
	err := service.client.Call("QueryPnicStatus", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - IscsiFaultFault
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) QueryBoundVnics(request *QueryBoundVnicsRequestType) (*QueryBoundVnicsResponse, error) {
	response := &QueryBoundVnicsResponse{}
	err := service.client.Call("QueryBoundVnics", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - IscsiFaultFault
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) QueryCandidateNics(request *QueryCandidateNicsRequestType) (*QueryCandidateNicsResponse, error) {
	response := &QueryCandidateNicsResponse{}
	err := service.client.Call("QueryCandidateNics", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - IscsiFaultVnicAlreadyBoundFault
* - IscsiFaultVnicHasNoUplinksFault
* - IscsiFaultVnicHasMultipleUplinksFault
* - IscsiFaultVnicHasWrongUplinkFault
* - IscsiFaultVnicNotFoundFault
* - IscsiFaultInvalidVnicFault
* - PlatformConfigFaultFault
* - IscsiFaultFault
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) BindVnic(request *BindVnicRequestType) (*BindVnicResponse, error) {
	response := &BindVnicResponse{}
	err := service.client.Call("BindVnic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - IscsiFaultVnicNotBoundFault
* - IscsiFaultVnicHasActivePathsFault
* - IscsiFaultVnicIsLastPathFault
* - PlatformConfigFaultFault
* - IscsiFaultFault
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) UnbindVnic(request *UnbindVnicRequestType) (*UnbindVnicResponse, error) {
	response := &UnbindVnicResponse{}
	err := service.client.Call("UnbindVnic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryMigrationDependencies(request *QueryMigrationDependenciesRequestType) (*QueryMigrationDependenciesResponse, error) {
	response := &QueryMigrationDependenciesResponse{}
	err := service.client.Call("QueryMigrationDependencies", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryModules(request *QueryModulesRequestType) (*QueryModulesResponse, error) {
	response := &QueryModulesResponse{}
	err := service.client.Call("QueryModules", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateModuleOptionString(request *UpdateModuleOptionStringRequestType) (*UpdateModuleOptionStringResponse, error) {
	response := &UpdateModuleOptionStringResponse{}
	err := service.client.Call("UpdateModuleOptionString", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) QueryConfiguredModuleOptionString(request *QueryConfiguredModuleOptionStringRequestType) (*QueryConfiguredModuleOptionStringResponse, error) {
	response := &QueryConfiguredModuleOptionStringResponse{}
	err := service.client.Call("QueryConfiguredModuleOptionString", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - AlreadyExistsFault
* - RuntimeFault
 */
func (service *VimPortType) CreateUser(request *CreateUserRequestType) (*CreateUserResponse, error) {
	response := &CreateUserResponse{}
	err := service.client.Call("CreateUser", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - UserNotFoundFault
* - AlreadyExistsFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateUser(request *UpdateUserRequestType) (*UpdateUserResponse, error) {
	response := &UpdateUserResponse{}
	err := service.client.Call("UpdateUser", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - AlreadyExistsFault
* - RuntimeFault
 */
func (service *VimPortType) CreateGroup(request *CreateGroupRequestType) (*CreateGroupResponse, error) {
	response := &CreateGroupResponse{}
	err := service.client.Call("CreateGroup", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - UserNotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveUser(request *RemoveUserRequestType) (*RemoveUserResponse, error) {
	response := &RemoveUserResponse{}
	err := service.client.Call("RemoveUser", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - UserNotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveGroup(request *RemoveGroupRequestType) (*RemoveGroupResponse, error) {
	response := &RemoveGroupResponse{}
	err := service.client.Call("RemoveGroup", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - UserNotFoundFault
* - AlreadyExistsFault
* - RuntimeFault
 */
func (service *VimPortType) AssignUserToGroup(request *AssignUserToGroupRequestType) (*AssignUserToGroupResponse, error) {
	response := &AssignUserToGroupResponse{}
	err := service.client.Call("AssignUserToGroup", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - UserNotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) UnassignUserFromGroup(request *UnassignUserFromGroupRequestType) (*UnassignUserFromGroupResponse, error) {
	response := &UnassignUserFromGroupResponse{}
	err := service.client.Call("UnassignUserFromGroup", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureServiceConsoleReservation(request *ReconfigureServiceConsoleReservationRequestType) (*ReconfigureServiceConsoleReservationResponse, error) {
	response := &ReconfigureServiceConsoleReservationResponse{}
	err := service.client.Call("ReconfigureServiceConsoleReservation", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureVirtualMachineReservation(request *ReconfigureVirtualMachineReservationRequestType) (*ReconfigureVirtualMachineReservationResponse, error) {
	response := &ReconfigureVirtualMachineReservationResponse{}
	err := service.client.Call("ReconfigureVirtualMachineReservation", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - AlreadyExistsFault
* - NotFoundFault
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateNetworkConfig(request *UpdateNetworkConfigRequestType) (*UpdateNetworkConfigResponse, error) {
	response := &UpdateNetworkConfigResponse{}
	err := service.client.Call("UpdateNetworkConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateDnsConfig(request *UpdateDnsConfigRequestType) (*UpdateDnsConfigResponse, error) {
	response := &UpdateDnsConfigResponse{}
	err := service.client.Call("UpdateDnsConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateIpRouteConfig(request *UpdateIpRouteConfigRequestType) (*UpdateIpRouteConfigResponse, error) {
	response := &UpdateIpRouteConfigResponse{}
	err := service.client.Call("UpdateIpRouteConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateConsoleIpRouteConfig(request *UpdateConsoleIpRouteConfigRequestType) (*UpdateConsoleIpRouteConfigResponse, error) {
	response := &UpdateConsoleIpRouteConfigResponse{}
	err := service.client.Call("UpdateConsoleIpRouteConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateIpRouteTableConfig(request *UpdateIpRouteTableConfigRequestType) (*UpdateIpRouteTableConfigResponse, error) {
	response := &UpdateIpRouteTableConfigResponse{}
	err := service.client.Call("UpdateIpRouteTableConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - AlreadyExistsFault
* - ResourceInUseFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) AddVirtualSwitch(request *AddVirtualSwitchRequestType) (*AddVirtualSwitchResponse, error) {
	response := &AddVirtualSwitchResponse{}
	err := service.client.Call("AddVirtualSwitch", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - ResourceInUseFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveVirtualSwitch(request *RemoveVirtualSwitchRequestType) (*RemoveVirtualSwitchResponse, error) {
	response := &RemoveVirtualSwitchResponse{}
	err := service.client.Call("RemoveVirtualSwitch", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - ResourceInUseFault
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateVirtualSwitch(request *UpdateVirtualSwitchRequestType) (*UpdateVirtualSwitchResponse, error) {
	response := &UpdateVirtualSwitchResponse{}
	err := service.client.Call("UpdateVirtualSwitch", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - AlreadyExistsFault
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) AddPortGroup(request *AddPortGroupRequestType) (*AddPortGroupResponse, error) {
	response := &AddPortGroupResponse{}
	err := service.client.Call("AddPortGroup", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - ResourceInUseFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RemovePortGroup(request *RemovePortGroupRequestType) (*RemovePortGroupResponse, error) {
	response := &RemovePortGroupResponse{}
	err := service.client.Call("RemovePortGroup", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - AlreadyExistsFault
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdatePortGroup(request *UpdatePortGroupRequestType) (*UpdatePortGroupResponse, error) {
	response := &UpdatePortGroupResponse{}
	err := service.client.Call("UpdatePortGroup", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdatePhysicalNicLinkSpeed(request *UpdatePhysicalNicLinkSpeedRequestType) (*UpdatePhysicalNicLinkSpeedResponse, error) {
	response := &UpdatePhysicalNicLinkSpeedResponse{}
	err := service.client.Call("UpdatePhysicalNicLinkSpeed", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryNetworkHint(request *QueryNetworkHintRequestType) (*QueryNetworkHintResponse, error) {
	response := &QueryNetworkHintResponse{}
	err := service.client.Call("QueryNetworkHint", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - AlreadyExistsFault
* - HostConfigFaultFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) AddVirtualNic(request *AddVirtualNicRequestType) (*AddVirtualNicResponse, error) {
	response := &AddVirtualNicResponse{}
	err := service.client.Call("AddVirtualNic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveVirtualNic(request *RemoveVirtualNicRequestType) (*RemoveVirtualNicResponse, error) {
	response := &RemoveVirtualNicResponse{}
	err := service.client.Call("RemoveVirtualNic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateVirtualNic(request *UpdateVirtualNicRequestType) (*UpdateVirtualNicResponse, error) {
	response := &UpdateVirtualNicResponse{}
	err := service.client.Call("UpdateVirtualNic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) AddServiceConsoleVirtualNic(request *AddServiceConsoleVirtualNicRequestType) (*AddServiceConsoleVirtualNicResponse, error) {
	response := &AddServiceConsoleVirtualNicResponse{}
	err := service.client.Call("AddServiceConsoleVirtualNic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - ResourceInUseFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveServiceConsoleVirtualNic(request *RemoveServiceConsoleVirtualNicRequestType) (*RemoveServiceConsoleVirtualNicResponse, error) {
	response := &RemoveServiceConsoleVirtualNicResponse{}
	err := service.client.Call("RemoveServiceConsoleVirtualNic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - ResourceInUseFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateServiceConsoleVirtualNic(request *UpdateServiceConsoleVirtualNicRequestType) (*UpdateServiceConsoleVirtualNicResponse, error) {
	response := &UpdateServiceConsoleVirtualNicResponse{}
	err := service.client.Call("UpdateServiceConsoleVirtualNic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RestartServiceConsoleVirtualNic(request *RestartServiceConsoleVirtualNicRequestType) (*RestartServiceConsoleVirtualNicResponse, error) {
	response := &RestartServiceConsoleVirtualNicResponse{}
	err := service.client.Call("RestartServiceConsoleVirtualNic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshNetworkSystem(request *RefreshNetworkSystemRequestType) (*RefreshNetworkSystemResponse, error) {
	response := &RefreshNetworkSystemResponse{}
	err := service.client.Call("RefreshNetworkSystem", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RequestCanceledFault
* - InvalidStateFault
* - TaskInProgressFault
* - PlatformConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CheckHostPatch_Task(request *CheckHostPatchRequestType) (*CheckHostPatch_TaskResponse, error) {
	response := &CheckHostPatch_TaskResponse{}
	err := service.client.Call("CheckHostPatch_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RequestCanceledFault
* - PatchMetadataInvalidFault
* - PlatformConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ScanHostPatch_Task(request *ScanHostPatchRequestType) (*ScanHostPatch_TaskResponse, error) {
	response := &ScanHostPatch_TaskResponse{}
	err := service.client.Call("ScanHostPatch_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RequestCanceledFault
* - InvalidStateFault
* - TaskInProgressFault
* - PlatformConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ScanHostPatchV2_Task(request *ScanHostPatchV2RequestType) (*ScanHostPatchV2_TaskResponse, error) {
	response := &ScanHostPatchV2_TaskResponse{}
	err := service.client.Call("ScanHostPatchV2_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RequestCanceledFault
* - InvalidStateFault
* - TaskInProgressFault
* - PlatformConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) StageHostPatch_Task(request *StageHostPatchRequestType) (*StageHostPatch_TaskResponse, error) {
	response := &StageHostPatch_TaskResponse{}
	err := service.client.Call("StageHostPatch_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - PatchMetadataInvalidFault
* - PatchBinariesNotFoundFault
* - PatchNotApplicableFault
* - NoDiskSpaceFault
* - PatchInstallFailedFault
* - RebootRequiredFault
* - InvalidStateFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) InstallHostPatch_Task(request *InstallHostPatchRequestType) (*InstallHostPatch_TaskResponse, error) {
	response := &InstallHostPatch_TaskResponse{}
	err := service.client.Call("InstallHostPatch_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RequestCanceledFault
* - InvalidStateFault
* - TaskInProgressFault
* - PlatformConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) InstallHostPatchV2_Task(request *InstallHostPatchV2RequestType) (*InstallHostPatchV2_TaskResponse, error) {
	response := &InstallHostPatchV2_TaskResponse{}
	err := service.client.Call("InstallHostPatchV2_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - TaskInProgressFault
* - PlatformConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UninstallHostPatch_Task(request *UninstallHostPatchRequestType) (*UninstallHostPatch_TaskResponse, error) {
	response := &UninstallHostPatch_TaskResponse{}
	err := service.client.Call("UninstallHostPatch_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RequestCanceledFault
* - InvalidStateFault
* - TaskInProgressFault
* - PlatformConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryHostPatch_Task(request *QueryHostPatchRequestType) (*QueryHostPatch_TaskResponse, error) {
	response := &QueryHostPatch_TaskResponse{}
	err := service.client.Call("QueryHostPatch_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) Refresh(request *RefreshRequestType) (*RefreshResponse, error) {
	response := &RefreshResponse{}
	err := service.client.Call("Refresh", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdatePassthruConfig(request *UpdatePassthruConfigRequestType) (*UpdatePassthruConfigResponse, error) {
	response := &UpdatePassthruConfigResponse{}
	err := service.client.Call("UpdatePassthruConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ConfigurePowerPolicy(request *ConfigurePowerPolicyRequestType) (*ConfigurePowerPolicyResponse, error) {
	response := &ConfigurePowerPolicyResponse{}
	err := service.client.Call("ConfigurePowerPolicy", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateServicePolicy(request *UpdateServicePolicyRequestType) (*UpdateServicePolicyResponse, error) {
	response := &UpdateServicePolicyResponse{}
	err := service.client.Call("UpdateServicePolicy", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) StartService(request *StartServiceRequestType) (*StartServiceResponse, error) {
	response := &StartServiceResponse{}
	err := service.client.Call("StartService", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) StopService(request *StopServiceRequestType) (*StopServiceResponse, error) {
	response := &StopServiceResponse{}
	err := service.client.Call("StopService", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RestartService(request *RestartServiceRequestType) (*RestartServiceResponse, error) {
	response := &RestartServiceResponse{}
	err := service.client.Call("RestartService", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UninstallService(request *UninstallServiceRequestType) (*UninstallServiceResponse, error) {
	response := &UninstallServiceResponse{}
	err := service.client.Call("UninstallService", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshServices(request *RefreshServicesRequestType) (*RefreshServicesResponse, error) {
	response := &RefreshServicesResponse{}
	err := service.client.Call("RefreshServices", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - InsufficientResourcesFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureSnmpAgent(request *ReconfigureSnmpAgentRequestType) (*ReconfigureSnmpAgentResponse, error) {
	response := &ReconfigureSnmpAgentResponse{}
	err := service.client.Call("ReconfigureSnmpAgent", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - InsufficientResourcesFaultFault
* - RuntimeFault
 */
func (service *VimPortType) SendTestNotification(request *SendTestNotificationRequestType) (*SendTestNotificationResponse, error) {
	response := &SendTestNotificationResponse{}
	err := service.client.Call("SendTestNotification", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveDiskPartitionInfo(request *RetrieveDiskPartitionInfoRequestType) (*RetrieveDiskPartitionInfoResponse, error) {
	response := &RetrieveDiskPartitionInfoResponse{}
	err := service.client.Call("RetrieveDiskPartitionInfo", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ComputeDiskPartitionInfo(request *ComputeDiskPartitionInfoRequestType) (*ComputeDiskPartitionInfoResponse, error) {
	response := &ComputeDiskPartitionInfoResponse{}
	err := service.client.Call("ComputeDiskPartitionInfo", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ComputeDiskPartitionInfoForResize(request *ComputeDiskPartitionInfoForResizeRequestType) (*ComputeDiskPartitionInfoForResizeResponse, error) {
	response := &ComputeDiskPartitionInfoForResizeResponse{}
	err := service.client.Call("ComputeDiskPartitionInfoForResize", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateDiskPartitions(request *UpdateDiskPartitionsRequestType) (*UpdateDiskPartitionsResponse, error) {
	response := &UpdateDiskPartitionsResponse{}
	err := service.client.Call("UpdateDiskPartitions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - AlreadyExistsFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) FormatVmfs(request *FormatVmfsRequestType) (*FormatVmfsResponse, error) {
	response := &FormatVmfsResponse{}
	err := service.client.Call("FormatVmfs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - InvalidStateFault
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) MountVmfsVolume(request *MountVmfsVolumeRequestType) (*MountVmfsVolumeResponse, error) {
	response := &MountVmfsVolumeResponse{}
	err := service.client.Call("MountVmfsVolume", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - InvalidStateFault
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) UnmountVmfsVolume(request *UnmountVmfsVolumeRequestType) (*UnmountVmfsVolumeResponse, error) {
	response := &UnmountVmfsVolumeResponse{}
	err := service.client.Call("UnmountVmfsVolume", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DeleteVmfsVolumeState(request *DeleteVmfsVolumeStateRequestType) (*DeleteVmfsVolumeStateResponse, error) {
	response := &DeleteVmfsVolumeStateResponse{}
	err := service.client.Call("DeleteVmfsVolumeState", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RescanVmfs(request *RescanVmfsRequestType) (*RescanVmfsResponse, error) {
	response := &RescanVmfsResponse{}
	err := service.client.Call("RescanVmfs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) AttachVmfsExtent(request *AttachVmfsExtentRequestType) (*AttachVmfsExtentResponse, error) {
	response := &AttachVmfsExtentResponse{}
	err := service.client.Call("AttachVmfsExtent", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ExpandVmfsExtent(request *ExpandVmfsExtentRequestType) (*ExpandVmfsExtentResponse, error) {
	response := &ExpandVmfsExtentResponse{}
	err := service.client.Call("ExpandVmfsExtent", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpgradeVmfs(request *UpgradeVmfsRequestType) (*UpgradeVmfsResponse, error) {
	response := &UpgradeVmfsResponse{}
	err := service.client.Call("UpgradeVmfs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpgradeVmLayout(request *UpgradeVmLayoutRequestType) (*UpgradeVmLayoutResponse, error) {
	response := &UpgradeVmLayoutResponse{}
	err := service.client.Call("UpgradeVmLayout", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryUnresolvedVmfsVolume(request *QueryUnresolvedVmfsVolumeRequestType) (*QueryUnresolvedVmfsVolumeResponse, error) {
	response := &QueryUnresolvedVmfsVolumeResponse{}
	err := service.client.Call("QueryUnresolvedVmfsVolume", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ResolveMultipleUnresolvedVmfsVolumes(request *ResolveMultipleUnresolvedVmfsVolumesRequestType) (*ResolveMultipleUnresolvedVmfsVolumesResponse, error) {
	response := &ResolveMultipleUnresolvedVmfsVolumesResponse{}
	err := service.client.Call("ResolveMultipleUnresolvedVmfsVolumes", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ResolveMultipleUnresolvedVmfsVolumesEx_Task(request *ResolveMultipleUnresolvedVmfsVolumesExRequestType) (*ResolveMultipleUnresolvedVmfsVolumesEx_TaskResponse, error) {
	response := &ResolveMultipleUnresolvedVmfsVolumesEx_TaskResponse{}
	err := service.client.Call("ResolveMultipleUnresolvedVmfsVolumesEx_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UnmountForceMountedVmfsVolume(request *UnmountForceMountedVmfsVolumeRequestType) (*UnmountForceMountedVmfsVolumeResponse, error) {
	response := &UnmountForceMountedVmfsVolumeResponse{}
	err := service.client.Call("UnmountForceMountedVmfsVolume", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RescanHba(request *RescanHbaRequestType) (*RescanHbaResponse, error) {
	response := &RescanHbaResponse{}
	err := service.client.Call("RescanHba", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RescanAllHba(request *RescanAllHbaRequestType) (*RescanAllHbaResponse, error) {
	response := &RescanAllHbaResponse{}
	err := service.client.Call("RescanAllHba", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateSoftwareInternetScsiEnabled(request *UpdateSoftwareInternetScsiEnabledRequestType) (*UpdateSoftwareInternetScsiEnabledResponse, error) {
	response := &UpdateSoftwareInternetScsiEnabledResponse{}
	err := service.client.Call("UpdateSoftwareInternetScsiEnabled", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateInternetScsiDiscoveryProperties(request *UpdateInternetScsiDiscoveryPropertiesRequestType) (*UpdateInternetScsiDiscoveryPropertiesResponse, error) {
	response := &UpdateInternetScsiDiscoveryPropertiesResponse{}
	err := service.client.Call("UpdateInternetScsiDiscoveryProperties", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateInternetScsiAuthenticationProperties(request *UpdateInternetScsiAuthenticationPropertiesRequestType) (*UpdateInternetScsiAuthenticationPropertiesResponse, error) {
	response := &UpdateInternetScsiAuthenticationPropertiesResponse{}
	err := service.client.Call("UpdateInternetScsiAuthenticationProperties", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateInternetScsiDigestProperties(request *UpdateInternetScsiDigestPropertiesRequestType) (*UpdateInternetScsiDigestPropertiesResponse, error) {
	response := &UpdateInternetScsiDigestPropertiesResponse{}
	err := service.client.Call("UpdateInternetScsiDigestProperties", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateInternetScsiAdvancedOptions(request *UpdateInternetScsiAdvancedOptionsRequestType) (*UpdateInternetScsiAdvancedOptionsResponse, error) {
	response := &UpdateInternetScsiAdvancedOptionsResponse{}
	err := service.client.Call("UpdateInternetScsiAdvancedOptions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateInternetScsiIPProperties(request *UpdateInternetScsiIPPropertiesRequestType) (*UpdateInternetScsiIPPropertiesResponse, error) {
	response := &UpdateInternetScsiIPPropertiesResponse{}
	err := service.client.Call("UpdateInternetScsiIPProperties", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateInternetScsiName(request *UpdateInternetScsiNameRequestType) (*UpdateInternetScsiNameResponse, error) {
	response := &UpdateInternetScsiNameResponse{}
	err := service.client.Call("UpdateInternetScsiName", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateInternetScsiAlias(request *UpdateInternetScsiAliasRequestType) (*UpdateInternetScsiAliasResponse, error) {
	response := &UpdateInternetScsiAliasResponse{}
	err := service.client.Call("UpdateInternetScsiAlias", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) AddInternetScsiSendTargets(request *AddInternetScsiSendTargetsRequestType) (*AddInternetScsiSendTargetsResponse, error) {
	response := &AddInternetScsiSendTargetsResponse{}
	err := service.client.Call("AddInternetScsiSendTargets", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveInternetScsiSendTargets(request *RemoveInternetScsiSendTargetsRequestType) (*RemoveInternetScsiSendTargetsResponse, error) {
	response := &RemoveInternetScsiSendTargetsResponse{}
	err := service.client.Call("RemoveInternetScsiSendTargets", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) AddInternetScsiStaticTargets(request *AddInternetScsiStaticTargetsRequestType) (*AddInternetScsiStaticTargetsResponse, error) {
	response := &AddInternetScsiStaticTargetsResponse{}
	err := service.client.Call("AddInternetScsiStaticTargets", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveInternetScsiStaticTargets(request *RemoveInternetScsiStaticTargetsRequestType) (*RemoveInternetScsiStaticTargetsResponse, error) {
	response := &RemoveInternetScsiStaticTargetsResponse{}
	err := service.client.Call("RemoveInternetScsiStaticTargets", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) EnableMultipathPath(request *EnableMultipathPathRequestType) (*EnableMultipathPathResponse, error) {
	response := &EnableMultipathPathResponse{}
	err := service.client.Call("EnableMultipathPath", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DisableMultipathPath(request *DisableMultipathPathRequestType) (*DisableMultipathPathResponse, error) {
	response := &DisableMultipathPathResponse{}
	err := service.client.Call("DisableMultipathPath", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) SetMultipathLunPolicy(request *SetMultipathLunPolicyRequestType) (*SetMultipathLunPolicyResponse, error) {
	response := &SetMultipathLunPolicyResponse{}
	err := service.client.Call("SetMultipathLunPolicy", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryPathSelectionPolicyOptions(request *QueryPathSelectionPolicyOptionsRequestType) (*QueryPathSelectionPolicyOptionsResponse, error) {
	response := &QueryPathSelectionPolicyOptionsResponse{}
	err := service.client.Call("QueryPathSelectionPolicyOptions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryStorageArrayTypePolicyOptions(request *QueryStorageArrayTypePolicyOptionsRequestType) (*QueryStorageArrayTypePolicyOptionsResponse, error) {
	response := &QueryStorageArrayTypePolicyOptionsResponse{}
	err := service.client.Call("QueryStorageArrayTypePolicyOptions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - InvalidNameFault
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateScsiLunDisplayName(request *UpdateScsiLunDisplayNameRequestType) (*UpdateScsiLunDisplayNameResponse, error) {
	response := &UpdateScsiLunDisplayNameResponse{}
	err := service.client.Call("UpdateScsiLunDisplayName", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - InvalidStateFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) DetachScsiLun(request *DetachScsiLunRequestType) (*DetachScsiLunResponse, error) {
	response := &DetachScsiLunResponse{}
	err := service.client.Call("DetachScsiLun", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DeleteScsiLunState(request *DeleteScsiLunStateRequestType) (*DeleteScsiLunStateResponse, error) {
	response := &DeleteScsiLunStateResponse{}
	err := service.client.Call("DeleteScsiLunState", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) AttachScsiLun(request *AttachScsiLunRequestType) (*AttachScsiLunResponse, error) {
	response := &AttachScsiLunResponse{}
	err := service.client.Call("AttachScsiLun", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RefreshStorageSystem(request *RefreshStorageSystemRequestType) (*RefreshStorageSystemResponse, error) {
	response := &RefreshStorageSystemResponse{}
	err := service.client.Call("RefreshStorageSystem", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - FcoeFaultPnicHasNoPortSetFault
* - HostConfigFaultFault
* - NotFoundFault
* - RuntimeFault
 */
func (service *VimPortType) DiscoverFcoeHbas(request *DiscoverFcoeHbasRequestType) (*DiscoverFcoeHbasResponse, error) {
	response := &DiscoverFcoeHbasResponse{}
	err := service.client.Call("DiscoverFcoeHbas", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MarkForRemoval(request *MarkForRemovalRequestType) (*MarkForRemovalResponse, error) {
	response := &MarkForRemovalResponse{}
	err := service.client.Call("MarkForRemoval", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - AlreadyExistsFault
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) FormatVffs(request *FormatVffsRequestType) (*FormatVffsResponse, error) {
	response := &FormatVffsResponse{}
	err := service.client.Call("FormatVffs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) ExtendVffs(request *ExtendVffsRequestType) (*ExtendVffsResponse, error) {
	response := &ExtendVffsResponse{}
	err := service.client.Call("ExtendVffs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) DestroyVffs(request *DestroyVffsRequestType) (*DestroyVffsResponse, error) {
	response := &DestroyVffsResponse{}
	err := service.client.Call("DestroyVffs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - InvalidStateFault
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) MountVffsVolume(request *MountVffsVolumeRequestType) (*MountVffsVolumeResponse, error) {
	response := &MountVffsVolumeResponse{}
	err := service.client.Call("MountVffsVolume", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - InvalidStateFault
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) UnmountVffsVolume(request *UnmountVffsVolumeRequestType) (*UnmountVffsVolumeResponse, error) {
	response := &UnmountVffsVolumeResponse{}
	err := service.client.Call("UnmountVffsVolume", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DeleteVffsVolumeState(request *DeleteVffsVolumeStateRequestType) (*DeleteVffsVolumeStateResponse, error) {
	response := &DeleteVffsVolumeStateResponse{}
	err := service.client.Call("DeleteVffsVolumeState", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RescanVffs(request *RescanVffsRequestType) (*RescanVffsResponse, error) {
	response := &RescanVffsResponse{}
	err := service.client.Call("RescanVffs", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) QueryAvailableSsds(request *QueryAvailableSsdsRequestType) (*QueryAvailableSsdsResponse, error) {
	response := &QueryAvailableSsdsResponse{}
	err := service.client.Call("QueryAvailableSsds", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ConfigureVFlashResourceEx_Task(request *ConfigureVFlashResourceExRequestType) (*ConfigureVFlashResourceEx_TaskResponse, error) {
	response := &ConfigureVFlashResourceEx_TaskResponse{}
	err := service.client.Call("ConfigureVFlashResourceEx_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) HostConfigureVFlashResource(request *HostConfigureVFlashResourceRequestType) (*HostConfigureVFlashResourceResponse, error) {
	response := &HostConfigureVFlashResourceResponse{}
	err := service.client.Call("HostConfigureVFlashResource", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) HostRemoveVFlashResource(request *HostRemoveVFlashResourceRequestType) (*HostRemoveVFlashResourceResponse, error) {
	response := &HostRemoveVFlashResourceResponse{}
	err := service.client.Call("HostRemoveVFlashResource", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - InaccessibleVFlashSourceFault
* - ResourceInUseFault
* - RuntimeFault
 */
func (service *VimPortType) HostConfigVFlashCache(request *HostConfigVFlashCacheRequestType) (*HostConfigVFlashCacheResponse, error) {
	response := &HostConfigVFlashCacheResponse{}
	err := service.client.Call("HostConfigVFlashCache", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) HostGetVFlashModuleDefaultConfig(request *HostGetVFlashModuleDefaultConfigRequestType) (*HostGetVFlashModuleDefaultConfigResponse, error) {
	response := &HostGetVFlashModuleDefaultConfigResponse{}
	err := service.client.Call("HostGetVFlashModuleDefaultConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - NotFoundFault
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateIpConfig(request *UpdateIpConfigRequestType) (*UpdateIpConfigResponse, error) {
	response := &UpdateIpConfigResponse{}
	err := service.client.Call("UpdateIpConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) SelectVnic(request *SelectVnicRequestType) (*SelectVnicResponse, error) {
	response := &SelectVnicResponse{}
	err := service.client.Call("SelectVnic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DeselectVnic(request *DeselectVnicRequestType) (*DeselectVnicResponse, error) {
	response := &DeselectVnicResponse{}
	err := service.client.Call("DeselectVnic", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - InvalidArgumentFault
* - RuntimeFault
 */
func (service *VimPortType) QueryNetConfig(request *QueryNetConfigRequestType) (*QueryNetConfigResponse, error) {
	response := &QueryNetConfigResponse{}
	err := service.client.Call("QueryNetConfig", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - InvalidArgumentFault
* - RuntimeFault
 */
func (service *VimPortType) SelectVnicForNicType(request *SelectVnicForNicTypeRequestType) (*SelectVnicForNicTypeResponse, error) {
	response := &SelectVnicForNicTypeResponse{}
	err := service.client.Call("SelectVnicForNicType", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - HostConfigFaultFault
* - InvalidArgumentFault
* - RuntimeFault
 */
func (service *VimPortType) DeselectVnicForNicType(request *DeselectVnicForNicTypeRequestType) (*DeselectVnicForNicTypeResponse, error) {
	response := &DeselectVnicForNicTypeResponse{}
	err := service.client.Call("DeselectVnicForNicType", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryCmmds(request *QueryCmmdsRequestType) (*QueryCmmdsResponse, error) {
	response := &QueryCmmdsResponse{}
	err := service.client.Call("QueryCmmds", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryPhysicalVsanDisks(request *QueryPhysicalVsanDisksRequestType) (*QueryPhysicalVsanDisksResponse, error) {
	response := &QueryPhysicalVsanDisksResponse{}
	err := service.client.Call("QueryPhysicalVsanDisks", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryVsanObjects(request *QueryVsanObjectsRequestType) (*QueryVsanObjectsResponse, error) {
	response := &QueryVsanObjectsResponse{}
	err := service.client.Call("QueryVsanObjects", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryObjectsOnPhysicalVsanDisk(request *QueryObjectsOnPhysicalVsanDiskRequestType) (*QueryObjectsOnPhysicalVsanDiskResponse, error) {
	response := &QueryObjectsOnPhysicalVsanDiskResponse{}
	err := service.client.Call("QueryObjectsOnPhysicalVsanDisk", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryDisksForVsan(request *QueryDisksForVsanRequestType) (*QueryDisksForVsanResponse, error) {
	response := &QueryDisksForVsanResponse{}
	err := service.client.Call("QueryDisksForVsan", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AddDisks_Task(request *AddDisksRequestType) (*AddDisks_TaskResponse, error) {
	response := &AddDisks_TaskResponse{}
	err := service.client.Call("AddDisks_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) InitializeDisks_Task(request *InitializeDisksRequestType) (*InitializeDisks_TaskResponse, error) {
	response := &InitializeDisks_TaskResponse{}
	err := service.client.Call("InitializeDisks_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RemoveDisk_Task(request *RemoveDiskRequestType) (*RemoveDisk_TaskResponse, error) {
	response := &RemoveDisk_TaskResponse{}
	err := service.client.Call("RemoveDisk_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RemoveDiskMapping_Task(request *RemoveDiskMappingRequestType) (*RemoveDiskMapping_TaskResponse, error) {
	response := &RemoveDiskMapping_TaskResponse{}
	err := service.client.Call("RemoveDiskMapping_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateVsan_Task(request *UpdateVsanRequestType) (*UpdateVsan_TaskResponse, error) {
	response := &UpdateVsan_TaskResponse{}
	err := service.client.Call("UpdateVsan_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryHostStatus(request *QueryHostStatusRequestType) (*QueryHostStatusResponse, error) {
	response := &QueryHostStatusResponse{}
	err := service.client.Call("QueryHostStatus", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) QueryOptions(request *QueryOptionsRequestType) (*QueryOptionsResponse, error) {
	response := &QueryOptionsResponse{}
	err := service.client.Call("QueryOptions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidNameFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateOptions(request *UpdateOptionsRequestType) (*UpdateOptionsResponse, error) {
	response := &UpdateOptionsResponse{}
	err := service.client.Call("UpdateOptions", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CheckCompliance_Task(request *CheckComplianceRequestType) (*CheckCompliance_TaskResponse, error) {
	response := &CheckCompliance_TaskResponse{}
	err := service.client.Call("CheckCompliance_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryComplianceStatus(request *QueryComplianceStatusRequestType) (*QueryComplianceStatusResponse, error) {
	response := &QueryComplianceStatusResponse{}
	err := service.client.Call("QueryComplianceStatus", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ClearComplianceStatus(request *ClearComplianceStatusRequestType) (*ClearComplianceStatusResponse, error) {
	response := &ClearComplianceStatusResponse{}
	err := service.client.Call("ClearComplianceStatus", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryExpressionMetadata(request *QueryExpressionMetadataRequestType) (*QueryExpressionMetadataResponse, error) {
	response := &QueryExpressionMetadataResponse{}
	err := service.client.Call("QueryExpressionMetadata", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveDescription(request *RetrieveDescriptionRequestType) (*RetrieveDescriptionResponse, error) {
	response := &RetrieveDescriptionResponse{}
	err := service.client.Call("RetrieveDescription", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DestroyProfile(request *DestroyProfileRequestType) (*DestroyProfileResponse, error) {
	response := &DestroyProfileResponse{}
	err := service.client.Call("DestroyProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) AssociateProfile(request *AssociateProfileRequestType) (*AssociateProfileResponse, error) {
	response := &AssociateProfileResponse{}
	err := service.client.Call("AssociateProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DissociateProfile(request *DissociateProfileRequestType) (*DissociateProfileResponse, error) {
	response := &DissociateProfileResponse{}
	err := service.client.Call("DissociateProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CheckProfileCompliance_Task(request *CheckProfileComplianceRequestType) (*CheckProfileCompliance_TaskResponse, error) {
	response := &CheckProfileCompliance_TaskResponse{}
	err := service.client.Call("CheckProfileCompliance_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ExportProfile(request *ExportProfileRequestType) (*ExportProfileResponse, error) {
	response := &ExportProfileResponse{}
	err := service.client.Call("ExportProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateProfile(request *CreateProfileRequestType) (*CreateProfileResponse, error) {
	response := &CreateProfileResponse{}
	err := service.client.Call("CreateProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryPolicyMetadata(request *QueryPolicyMetadataRequestType) (*QueryPolicyMetadataResponse, error) {
	response := &QueryPolicyMetadataResponse{}
	err := service.client.Call("QueryPolicyMetadata", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) FindAssociatedProfile(request *FindAssociatedProfileRequestType) (*FindAssociatedProfileResponse, error) {
	response := &FindAssociatedProfileResponse{}
	err := service.client.Call("FindAssociatedProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateClusterProfile(request *UpdateClusterProfileRequestType) (*UpdateClusterProfileResponse, error) {
	response := &UpdateClusterProfileResponse{}
	err := service.client.Call("UpdateClusterProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) UpdateReferenceHost(request *UpdateReferenceHostRequestType) (*UpdateReferenceHostResponse, error) {
	response := &UpdateReferenceHostResponse{}
	err := service.client.Call("UpdateReferenceHost", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - DuplicateNameFault
* - ProfileUpdateFailedFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateHostProfile(request *UpdateHostProfileRequestType) (*UpdateHostProfileResponse, error) {
	response := &UpdateHostProfileResponse{}
	err := service.client.Call("UpdateHostProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ExecuteHostProfile(request *ExecuteHostProfileRequestType) (*ExecuteHostProfileResponse, error) {
	response := &ExecuteHostProfileResponse{}
	err := service.client.Call("ExecuteHostProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - HostConfigFailedFault
* - RuntimeFault
 */
func (service *VimPortType) ApplyHostConfig_Task(request *ApplyHostConfigRequestType) (*ApplyHostConfig_TaskResponse, error) {
	response := &ApplyHostConfig_TaskResponse{}
	err := service.client.Call("ApplyHostConfig_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) GenerateConfigTaskList(request *GenerateConfigTaskListRequestType) (*GenerateConfigTaskListResponse, error) {
	response := &GenerateConfigTaskListResponse{}
	err := service.client.Call("GenerateConfigTaskList", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) GenerateHostProfileTaskList_Task(request *GenerateHostProfileTaskListRequestType) (*GenerateHostProfileTaskList_TaskResponse, error) {
	response := &GenerateHostProfileTaskList_TaskResponse{}
	err := service.client.Call("GenerateHostProfileTaskList_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryHostProfileMetadata(request *QueryHostProfileMetadataRequestType) (*QueryHostProfileMetadataResponse, error) {
	response := &QueryHostProfileMetadataResponse{}
	err := service.client.Call("QueryHostProfileMetadata", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryProfileStructure(request *QueryProfileStructureRequestType) (*QueryProfileStructureResponse, error) {
	response := &QueryProfileStructureResponse{}
	err := service.client.Call("QueryProfileStructure", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CreateDefaultProfile(request *CreateDefaultProfileRequestType) (*CreateDefaultProfileResponse, error) {
	response := &CreateDefaultProfileResponse{}
	err := service.client.Call("CreateDefaultProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - AnswerFileUpdateFailedFault
* - RuntimeFault
 */
func (service *VimPortType) UpdateAnswerFile_Task(request *UpdateAnswerFileRequestType) (*UpdateAnswerFile_TaskResponse, error) {
	response := &UpdateAnswerFile_TaskResponse{}
	err := service.client.Call("UpdateAnswerFile_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveAnswerFile(request *RetrieveAnswerFileRequestType) (*RetrieveAnswerFileResponse, error) {
	response := &RetrieveAnswerFileResponse{}
	err := service.client.Call("RetrieveAnswerFile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveAnswerFileForProfile(request *RetrieveAnswerFileForProfileRequestType) (*RetrieveAnswerFileForProfileResponse, error) {
	response := &RetrieveAnswerFileForProfileResponse{}
	err := service.client.Call("RetrieveAnswerFileForProfile", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ExportAnswerFile_Task(request *ExportAnswerFileRequestType) (*ExportAnswerFile_TaskResponse, error) {
	response := &ExportAnswerFile_TaskResponse{}
	err := service.client.Call("ExportAnswerFile_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CheckAnswerFileStatus_Task(request *CheckAnswerFileStatusRequestType) (*CheckAnswerFileStatus_TaskResponse, error) {
	response := &CheckAnswerFileStatus_TaskResponse{}
	err := service.client.Call("CheckAnswerFileStatus_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryAnswerFileStatus(request *QueryAnswerFileStatusRequestType) (*QueryAnswerFileStatusResponse, error) {
	response := &QueryAnswerFileStatusResponse{}
	err := service.client.Call("QueryAnswerFileStatus", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveScheduledTask(request *RemoveScheduledTaskRequestType) (*RemoveScheduledTaskResponse, error) {
	response := &RemoveScheduledTaskResponse{}
	err := service.client.Call("RemoveScheduledTask", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - InvalidNameFault
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) ReconfigureScheduledTask(request *ReconfigureScheduledTaskRequestType) (*ReconfigureScheduledTaskResponse, error) {
	response := &ReconfigureScheduledTaskResponse{}
	err := service.client.Call("ReconfigureScheduledTask", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) RunScheduledTask(request *RunScheduledTaskRequestType) (*RunScheduledTaskResponse, error) {
	response := &RunScheduledTaskResponse{}
	err := service.client.Call("RunScheduledTask", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidNameFault
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateScheduledTask(request *CreateScheduledTaskRequestType) (*CreateScheduledTaskResponse, error) {
	response := &CreateScheduledTaskResponse{}
	err := service.client.Call("CreateScheduledTask", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveEntityScheduledTask(request *RetrieveEntityScheduledTaskRequestType) (*RetrieveEntityScheduledTaskResponse, error) {
	response := &RetrieveEntityScheduledTaskResponse{}
	err := service.client.Call("RetrieveEntityScheduledTask", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidNameFault
* - DuplicateNameFault
* - RuntimeFault
 */
func (service *VimPortType) CreateObjectScheduledTask(request *CreateObjectScheduledTaskRequestType) (*CreateObjectScheduledTaskResponse, error) {
	response := &CreateObjectScheduledTaskResponse{}
	err := service.client.Call("CreateObjectScheduledTask", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) RetrieveObjectScheduledTask(request *RetrieveObjectScheduledTaskRequestType) (*RetrieveObjectScheduledTaskResponse, error) {
	response := &RetrieveObjectScheduledTaskResponse{}
	err := service.client.Call("RetrieveObjectScheduledTask", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) OpenInventoryViewFolder(request *OpenInventoryViewFolderRequestType) (*OpenInventoryViewFolderResponse, error) {
	response := &OpenInventoryViewFolderResponse{}
	err := service.client.Call("OpenInventoryViewFolder", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CloseInventoryViewFolder(request *CloseInventoryViewFolderRequestType) (*CloseInventoryViewFolderResponse, error) {
	response := &CloseInventoryViewFolderResponse{}
	err := service.client.Call("CloseInventoryViewFolder", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ModifyListView(request *ModifyListViewRequestType) (*ModifyListViewResponse, error) {
	response := &ModifyListViewResponse{}
	err := service.client.Call("ModifyListView", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ResetListView(request *ResetListViewRequestType) (*ResetListViewResponse, error) {
	response := &ResetListViewResponse{}
	err := service.client.Call("ResetListView", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) ResetListViewFromView(request *ResetListViewFromViewRequestType) (*ResetListViewFromViewResponse, error) {
	response := &ResetListViewFromViewResponse{}
	err := service.client.Call("ResetListViewFromView", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DestroyView(request *DestroyViewRequestType) (*DestroyViewResponse, error) {
	response := &DestroyViewResponse{}
	err := service.client.Call("DestroyView", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CreateInventoryView(request *CreateInventoryViewRequestType) (*CreateInventoryViewResponse, error) {
	response := &CreateInventoryViewResponse{}
	err := service.client.Call("CreateInventoryView", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CreateContainerView(request *CreateContainerViewRequestType) (*CreateContainerViewResponse, error) {
	response := &CreateContainerViewResponse{}
	err := service.client.Call("CreateContainerView", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CreateListView(request *CreateListViewRequestType) (*CreateListViewResponse, error) {
	response := &CreateListViewResponse{}
	err := service.client.Call("CreateListView", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CreateListViewFromView(request *CreateListViewFromViewRequestType) (*CreateListViewFromViewResponse, error) {
	response := &CreateListViewFromViewResponse{}
	err := service.client.Call("CreateListViewFromView", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InsufficientResourcesFaultFault
* - InvalidStateFault
* - FileFaultFault
* - VmConfigFaultFault
* - RuntimeFault
 */
func (service *VimPortType) RevertToSnapshot_Task(request *RevertToSnapshotRequestType) (*RevertToSnapshot_TaskResponse, error) {
	response := &RevertToSnapshot_TaskResponse{}
	err := service.client.Call("RevertToSnapshot_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) RemoveSnapshot_Task(request *RemoveSnapshotRequestType) (*RemoveSnapshot_TaskResponse, error) {
	response := &RemoveSnapshot_TaskResponse{}
	err := service.client.Call("RemoveSnapshot_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidNameFault
* - TaskInProgressFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) RenameSnapshot(request *RenameSnapshotRequestType) (*RenameSnapshotResponse, error) {
	response := &RenameSnapshotResponse{}
	err := service.client.Call("RenameSnapshot", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - TaskInProgressFault
* - InvalidStateFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ExportSnapshot(request *ExportSnapshotRequestType) (*ExportSnapshotResponse, error) {
	response := &ExportSnapshotResponse{}
	err := service.client.Call("ExportSnapshot", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - NoActiveHostInClusterFault
* - RuntimeFault
 */
func (service *VimPortType) CheckCompatibility_Task(request *CheckCompatibilityRequestType) (*CheckCompatibility_TaskResponse, error) {
	response := &CheckCompatibility_TaskResponse{}
	err := service.client.Call("CheckCompatibility_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) QueryVMotionCompatibilityEx_Task(request *QueryVMotionCompatibilityExRequestType) (*QueryVMotionCompatibilityEx_TaskResponse, error) {
	response := &QueryVMotionCompatibilityEx_TaskResponse{}
	err := service.client.Call("QueryVMotionCompatibilityEx_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) CheckMigrate_Task(request *CheckMigrateRequestType) (*CheckMigrate_TaskResponse, error) {
	response := &CheckMigrate_TaskResponse{}
	err := service.client.Call("CheckMigrate_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) CheckRelocate_Task(request *CheckRelocateRequestType) (*CheckRelocate_TaskResponse, error) {
	response := &CheckRelocate_TaskResponse{}
	err := service.client.Call("CheckRelocate_Task", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) ValidateCredentialsInGuest(request *ValidateCredentialsInGuestRequestType) (*ValidateCredentialsInGuestResponse, error) {
	response := &ValidateCredentialsInGuestResponse{}
	err := service.client.Call("ValidateCredentialsInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - TaskInProgressFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) AcquireCredentialsInGuest(request *AcquireCredentialsInGuestRequestType) (*AcquireCredentialsInGuestResponse, error) {
	response := &AcquireCredentialsInGuestResponse{}
	err := service.client.Call("AcquireCredentialsInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - TaskInProgressFault
* - InvalidStateFault
* - RuntimeFault
 */
func (service *VimPortType) ReleaseCredentialsInGuest(request *ReleaseCredentialsInGuestRequestType) (*ReleaseCredentialsInGuestResponse, error) {
	response := &ReleaseCredentialsInGuestResponse{}
	err := service.client.Call("ReleaseCredentialsInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MakeDirectoryInGuest(request *MakeDirectoryInGuestRequestType) (*MakeDirectoryInGuestResponse, error) {
	response := &MakeDirectoryInGuestResponse{}
	err := service.client.Call("MakeDirectoryInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DeleteFileInGuest(request *DeleteFileInGuestRequestType) (*DeleteFileInGuestResponse, error) {
	response := &DeleteFileInGuestResponse{}
	err := service.client.Call("DeleteFileInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) DeleteDirectoryInGuest(request *DeleteDirectoryInGuestRequestType) (*DeleteDirectoryInGuestResponse, error) {
	response := &DeleteDirectoryInGuestResponse{}
	err := service.client.Call("DeleteDirectoryInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MoveDirectoryInGuest(request *MoveDirectoryInGuestRequestType) (*MoveDirectoryInGuestResponse, error) {
	response := &MoveDirectoryInGuestResponse{}
	err := service.client.Call("MoveDirectoryInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) MoveFileInGuest(request *MoveFileInGuestRequestType) (*MoveFileInGuestResponse, error) {
	response := &MoveFileInGuestResponse{}
	err := service.client.Call("MoveFileInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CreateTemporaryFileInGuest(request *CreateTemporaryFileInGuestRequestType) (*CreateTemporaryFileInGuestResponse, error) {
	response := &CreateTemporaryFileInGuestResponse{}
	err := service.client.Call("CreateTemporaryFileInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) CreateTemporaryDirectoryInGuest(request *CreateTemporaryDirectoryInGuestRequestType) (*CreateTemporaryDirectoryInGuestResponse, error) {
	response := &CreateTemporaryDirectoryInGuestResponse{}
	err := service.client.Call("CreateTemporaryDirectoryInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ListFilesInGuest(request *ListFilesInGuestRequestType) (*ListFilesInGuestResponse, error) {
	response := &ListFilesInGuestResponse{}
	err := service.client.Call("ListFilesInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) ChangeFileAttributesInGuest(request *ChangeFileAttributesInGuestRequestType) (*ChangeFileAttributesInGuestResponse, error) {
	response := &ChangeFileAttributesInGuestResponse{}
	err := service.client.Call("ChangeFileAttributesInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) InitiateFileTransferFromGuest(request *InitiateFileTransferFromGuestRequestType) (*InitiateFileTransferFromGuestResponse, error) {
	response := &InitiateFileTransferFromGuestResponse{}
	err := service.client.Call("InitiateFileTransferFromGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) InitiateFileTransferToGuest(request *InitiateFileTransferToGuestRequestType) (*InitiateFileTransferToGuestResponse, error) {
	response := &InitiateFileTransferToGuestResponse{}
	err := service.client.Call("InitiateFileTransferToGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - FileFaultFault
* - RuntimeFault
 */
func (service *VimPortType) StartProgramInGuest(request *StartProgramInGuestRequestType) (*StartProgramInGuestResponse, error) {
	response := &StartProgramInGuestResponse{}
	err := service.client.Call("StartProgramInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) ListProcessesInGuest(request *ListProcessesInGuestRequestType) (*ListProcessesInGuestResponse, error) {
	response := &ListProcessesInGuestResponse{}
	err := service.client.Call("ListProcessesInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) TerminateProcessInGuest(request *TerminateProcessInGuestRequestType) (*TerminateProcessInGuestResponse, error) {
	response := &TerminateProcessInGuestResponse{}
	err := service.client.Call("TerminateProcessInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - GuestOperationsFaultFault
* - InvalidStateFault
* - TaskInProgressFault
* - RuntimeFault
 */
func (service *VimPortType) ReadEnvironmentVariableInGuest(request *ReadEnvironmentVariableInGuestRequestType) (*ReadEnvironmentVariableInGuestResponse, error) {
	response := &ReadEnvironmentVariableInGuestResponse{}
	err := service.client.Call("ReadEnvironmentVariableInGuest", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DestroyPropertyFilter(request *DestroyPropertyFilterRequestType) (*DestroyPropertyFilterResponse, error) {
	response := &DestroyPropertyFilterResponse{}
	err := service.client.Call("DestroyPropertyFilter", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidPropertyFault
* - RuntimeFault
 */
func (service *VimPortType) CreateFilter(request *CreateFilterRequestType) (*CreateFilterResponse, error) {
	response := &CreateFilterResponse{}
	err := service.client.Call("CreateFilter", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidPropertyFault
* - RuntimeFault
 */
func (service *VimPortType) RetrieveProperties(request *RetrievePropertiesRequestType) (*RetrievePropertiesResponse, error) {
	response := &RetrievePropertiesResponse{}
	err := service.client.Call("RetrieveProperties", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidCollectorVersionFault
* - RuntimeFault
 */
func (service *VimPortType) CheckForUpdates(request *CheckForUpdatesRequestType) (*CheckForUpdatesResponse, error) {
	response := &CheckForUpdatesResponse{}
	err := service.client.Call("CheckForUpdates", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidCollectorVersionFault
* - RuntimeFault
 */
func (service *VimPortType) WaitForUpdates(request *WaitForUpdatesRequestType) (*WaitForUpdatesResponse, error) {
	response := &WaitForUpdatesResponse{}
	err := service.client.Call("WaitForUpdates", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CancelWaitForUpdates(request *CancelWaitForUpdatesRequestType) (*CancelWaitForUpdatesResponse, error) {
	response := &CancelWaitForUpdatesResponse{}
	err := service.client.Call("CancelWaitForUpdates", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidCollectorVersionFault
* - RuntimeFault
 */
func (service *VimPortType) WaitForUpdatesEx(request *WaitForUpdatesExRequestType) (*WaitForUpdatesExResponse, error) {
	response := &WaitForUpdatesExResponse{}
	err := service.client.Call("WaitForUpdatesEx", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidPropertyFault
* - RuntimeFault
 */
func (service *VimPortType) RetrievePropertiesEx(request *RetrievePropertiesExRequestType) (*RetrievePropertiesExResponse, error) {
	response := &RetrievePropertiesExResponse{}
	err := service.client.Call("RetrievePropertiesEx", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidPropertyFault
* - RuntimeFault
 */
func (service *VimPortType) ContinueRetrievePropertiesEx(request *ContinueRetrievePropertiesExRequestType) (*ContinueRetrievePropertiesExResponse, error) {
	response := &ContinueRetrievePropertiesExResponse{}
	err := service.client.Call("ContinueRetrievePropertiesEx", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - InvalidPropertyFault
* - RuntimeFault
 */
func (service *VimPortType) CancelRetrievePropertiesEx(request *CancelRetrievePropertiesExRequestType) (*CancelRetrievePropertiesExResponse, error) {
	response := &CancelRetrievePropertiesExResponse{}
	err := service.client.Call("CancelRetrievePropertiesEx", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) CreatePropertyCollector(request *CreatePropertyCollectorRequestType) (*CreatePropertyCollectorResponse, error) {
	response := &CreatePropertyCollectorResponse{}
	err := service.client.Call("CreatePropertyCollector", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

/**
* Error can be either of the following types:
*
* - RuntimeFault
 */
func (service *VimPortType) DestroyPropertyCollector(request *DestroyPropertyCollectorRequestType) (*DestroyPropertyCollectorResponse, error) {
	response := &DestroyPropertyCollectorResponse{}
	err := service.client.Call("DestroyPropertyCollector", "urn:vim25/5.5", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
